unit Grobal2;

interface

uses
  Windows, Winapi.MMSystem,Classes, Vcl.Graphics, SysUtils,Forms,TlHelp32,PsAPI;

function GetProcessImageFileName(hProcess: Cardinal; lpBaseName: PAnsiChar; nSize: DWORD): DWORD; stdcall;
function GetProcessImageFileName; external 'psapi.dll' Name 'GetProcessImageFileNameA';

resourcestring
  g_sSelToDBSKey = 'LoadMsgFilterFile';
  g_sAutoLogin = '@AutoLogin@';

const
  SN_1 = 64;
  SN_2 = 12;

  SPEll_VER = 11; //新的技能消息， 处理64位的人物对象，非这个值就走老的消息逻辑
  PING_TIME = 1000 * 20;
  TitleMax = 17;
  SKILL_LEVEL = 15;
  SKILL_MAXLEVEL = 3;
  G_SpSkillRet = 4;

  FAKELOADLIB = False;

  HintWinList_Hash = True;
  VER_ClientType_45 = False;

  VIEWFOG = False; //1020
  HIGHHP = True;
  NEWUI = False;
  SERIESSKILL = True;
  MAX_IPLEVEL = 255;
  MAX_OVERFLOW = 9999;
  MAX_OVERLAPITEM = 9999;

  RELEASE_MAPOBJECT_TIME = 60 * 1000;

  SQLDTFORMAT = 'mm"/"dd"/"yyyy hh":"nn":"ss';

  USEPLUGFUNC = 1; //插件函数验证
  DEATHWALKING = 1;
  NEWGETMAPCELL = 0;
  USEHASHLIST = 1;    //快速列表
  VER_PATHMAP = 1;
  NewVisibleEvent = 0;
  g_MaxStatusTime = 60000; //High(Word);

  //登录器的配置
  WndName        = '无双游戏登录器';   //登录器主窗口名修改,此处跟着修改,否则相关功能将失效
  ScreenMode     = 'ScreenMode';
  Dpi            = 'Dpi';
  WndMode        = 'WndMode';
  VSync          = 'VSync';
  NXVA           = 'NXVA';
  CompatibleMode = 'CompatibleMode';

  Server         = '[Server]';
  Setup          = '[Setup]';
  Upgrade        = '[Upgrade]';


  EMOJI_REG_KEY       = '#\d+#'; //Emoji表情正则表达式


//  SM_QUERYDYNCODE = 41501;
//  SM_QUERYDYNCODE = 41510;
  SM_QUERYDYNCODE = 41511;

  SM_SENDSERVERINFO = 41502;
  SM_CMDRETINFO = 41503;

  SM_TEXTURL = 41801;
  CM_TESTCONNECT = 41802;

  SM_TESTCRC = 41803;
  CM_TESTCRC = 41804;

  SM_PROXYDATA = 41806;
  CM_PROXYDATA = 41807;
  SM_CHECKVER = 41808;
  CM_CHECKVER = 41809;
  SM_SMUGGLE = 41900; // 夹带数据

  // 与验证服务器通信
  CM_QUERYURL = 55000;
  CM_SENDLIST = 55001;


  SM_SMUGGLE_SUCESS = 41901;
  CM_SMUGGLE = 41902;
  CM_SMUGGLE_SUCESS = 41903;

  SM_CHECKCLIENT = 41904;
  CM_CHECKCLIENT_RES = 41905;
  CM_LOADMOD_OK = 41906;
  SM_CAPTCHAR = 41910;
  CM_CAPTCHAR = 41911;
  SM_CAPTCHAR_RES = 41912;
  SM_CAP_NOTICE = 41913;
  SM_DYNCODE_NORES = 41914;
//  SM_ASKAGAIN = 41912;
//  SM_ANSWEROK = 41913;
//  SM_ANSWERERR = 41914;

  ItemNameLen = 20;
  MapNameLen = 16;
  ActorNameLen = 14;
  GuildNameLen = 20;

  SUIT_RATE_MAXHP = 0;
  SUIT_RATE_MAXMP = 1;
  SUIT_RATE_AC = 2;
  SUIT_RATE_MAC = 3;
  SUIT_RATE_DC = 4;
  SUIT_RATE_MC = 5;
  SUIT_RATE_SC = 6;
  SUIT_RATE_HITPOINT = 7;
  SUIT_RATE_SPEED = 8;
  SUIT_RATE_ANTIMAG = 9;
  SUIT_RATE_ANTIPOISON = 10;
  SUIT_RATE_POISONRECOVER = 11;
  SUIT_RATE_HPRECOVER = 12;
  SUIT_RATE_MPRECOVER = 13;
  SUIT_RATE_SMITEDEF = 40;

  SUIT_PNT_MAXHP = 0;
  SUIT_PNT_MAXMP = 1;
  SUIT_PNT_HITPOINT = 2;
  SUIT_PNT_SPEED = 3;
  SUIT_PNT_ANTIMAG = 4;
  SUIT_PNT_ANTIPOISON = 5;
  SUIT_PNT_POISONRECOVER = 6;
  SUIT_PNT_HPRECOVER = 7;
  SUIT_PNT_MPRECOVER = 8;
  SUIT_PNT_AC_LOW = 9;
  SUIT_PNT_AC_HIGH = 10;
  SUIT_PNT_MAC_LOW = 11;
  SUIT_PNT_MAC_HIGH = 12;
  SUIT_PNT_DC_LOW = 13;
  SUIT_PNT_DC_HIGH = 14;
  SUIT_PNT_MC_LOW = 15;
  SUIT_PNT_MC_HIGH = 16;
  SUIT_PNT_SC_LOW = 17;
  SUIT_PNT_SC_HIGH = 18;
  SUIT_PNT_DAMADDEXTRA = 19;
  SUIT_PNT_OmitACMCDamageReduceProb = 20;
  SUIT_PNT_SUCKBLOOD = 21;//固定吸血

  VERDEMO = 0;
  VERFREE = 1;
  VERSTD = 2;
  VEROEM = 3;
  VERPRO = 4;
  VERENT = 5;
  SoftVersion = VERPRO;

  DEMOCLIENT = 0;

  HAM_ALL = 0;    //全体攻击
  HAM_PEACE = 1;  //和平模式
  HAM_DEAR = 2;   //夫妻模式
  HAM_MASTER = 3; //师徒模式
  HAM_GROUP = 4;  //组队模式
  HAM_GUILD = 5;  //行会模式
  HAM_PKATTACK = 6; //红名模式

  DR_UP = 0;
  DR_UPRIGHT = 1;
  DR_RIGHT = 2;
  DR_DOWNRIGHT = 3;
  DR_DOWN = 4;
  DR_DOWNLEFT = 5;
  DR_LEFT = 6;
  DR_UPLEFT = 7;

  U_DRESS = 0;     //衣服
  U_WEAPON = 1;    //身上武器
  U_RIGHTHAND = 2; //勋章
  U_NECKLACE = 3;  //身上项链
  U_HELMET = 4;    //头盔
  U_ARMRINGL = 5;  //左手镯
  U_ARMRINGR = 6;  //右手镯
  U_RINGL = 7;     //左戒指
  U_RINGR = 8;     //右戒指
  U_BUJUK = 9;     //毒符
  U_BELT = 10;     //腰带
  U_BOOTS = 11;    //靴子
  U_CHARM = 12;    //宝石
  U_HELMETEX = 13; //斗笠

  O_NOALLOW = 5;
  O_RET = 4;
  O_SWAP = 3;
  O_OUT = 2;
  O_IN = 1;
  O_CLOSE = 0;

{$IFDEF UI_0508}
  U_SHIELD  = 14;
  U_FASHION = 16;
{$ELSE}
  U_DRUM = 14;    //军鼓
  U_HORSE = 15;   //马牌
  U_FASHION = 16; //时装
  U_SHIELD  = 17; //盾牌
{$ENDIF}
  U_Animal1 = 18;
  U_Animal2 = 19;
  U_Animal3 = 20;
  U_Animal4 = 21;
  U_Animal5 = 22;
  U_Animal6 = 23;
  U_Animal7 = 24;
  U_Animal8 = 25;
  U_Animal9 = 26;
  U_Animal10 = 27;
  U_Animal11 = 28;
  U_Animal12 = 29;
  U_FaceMask = 30;//面巾
  U_Remain1 = 31;
  U_Remain2 = 32;
  U_Remain3 = 33;
  U_Remain4 = 34;
  U_Remain5 = 35;
  U_Remain6 = 36;
  U_Remain7 = 37;
  U_Remain8 = 38;
  U_Remain9 = 39;
  U_Max = 39;


  UNITX = 48;
  UNITY = 32;
  HALFX = 24;
  HALFY = 16;

  MAXMISSION = 20;

  BUFFERSIZE = 500 * 1024;
  DATA_BUFSIZE = 8192;
  MAXLEVEL = 500;
  GROUPMAX = 11;
  BAGGOLD = 5000000;
  BODYLUCKUNIT = 10;
  MAX_STATUS_ATTRIBUTE = 12;

  //图片流
  FIRST_PACKAGE = 1;
  LAST_PACKAGE = 0;
  START_SEND = 0;
  NEXT_SEND = 1;
  END_SEND = 0;
  MIDDLE_SEND = 1;
  IMAGE_STREAM_LENGTH = 15000;
  IMAGE_STREAM_BUF_SIZE = 50000;

  //中文字符串检测
  IS_HANZI = 1;

  //武器属性:攻击力......等等
  DC = 0;   //攻击力
  MC = 1;   //魔法
  SC = 2;   //道术

  TEMP_DAMAGE_LO = 0;   //攻击力下限
  TEMP_DAMAGE_HI = 1;   //攻击力上限
  TEMP_CRIT_RATE = 2;   //暴击率

  //人物属性:攻击防御等上限下限等
  AC_LO = 1;
  AC_HI = 2;
  MAC_LO = 3;
  MAC_HI = 4;
  DC_LO = 5;
  DC_HI = 6;
  MC_LO = 7;
  MC_HI = 8;
  SC_LO = 9;
  SC_HI = 10;
  MAX_HP = 11;
  MAX_MP = 12;
  HP_RCV = 13;	//血恢复
  MP_RCV = 14;	  //魔法恢复
  POISON_RCV = 15;  //毒恢复
  ANTI_POISON = 16;//毒躲避
  ANTI_MAGIC = 17;//魔法躲避
  HIT_POINT = 18; //命中
  SPEED_POINT = 19; //敏捷点
  LUCK = 20;		//幸运
  CRIT = 21;		//暴击
  ANTI_CRIT = 22; //防爆
  CD = 23;     //技能cd

  //宝宝属性:攻击防御等上限下限等
  SLAVE_DC_LO = 1;
  SLAVE_DC_HI = 2;
  SLAVE_MAX_HP = 3;
  SLAVE_DC_SPEED = 4;
  SLAVE_MOV_SPEED = 5;


  MISSION_DESC = 'title=%s desc=%s';
  sGameLogMsg = '%d'#9'%s'#9'%d'#9'%d'#9'%s'#9'%s'#9'%d'#9'%s'#9'%s';
  GAMELOGNUMBERBASE = 100;
  GAMELOGBUYITEM = GAMELOGNUMBERBASE + 1;

  POISON_DECHEALTH = 0; //$80000000   //中毒 绿毒 掉血
  POISON_DAMAGEARMOR = 1; //$40000000 //中毒 红毒 减防
  POISON_SHOCKED = 2; //$20000000  //BLUE  //蛛网，不能跑
  POISON_DONTMOVE = 3; //$10000000  //YELLOW   //冰冻
  POISON_FREEZE = 4; //$08000000  //PURPLE  //无效
  POISON_STONE = 5; //$04000000    //麻痹
  POISON_PURPLE = 6; //$02000000   //推动
  POISON_7 = 7; //$01000000       //防御为0

  STATE_TRANSPARENT = 8;         //隐身状态，隐身术
  STATE_DEFENCEUP = 9;           //增加防御
  STATE_MAGDEFENCEUP = 10;       // 增加魔域
  STATE_BUBBLEDEFENCEUP = 11;     //魔法盾

  STATE_8 = 8; //$00800000        //隐身术
  STATE_9 = 9; //$00400000        //神圣战甲术   魔
  STATE_10 = 10; //$00200000      //幽灵盾      防
  STATE_11 = 11; //$00100000      //魔法盾
  STATE_12 = 12; //$00080000    //4级 魔法盾

  STATE_13 = 13; //$00040000     //凤天魔甲 神龙附身 效果
  STATE_14 = 14; //$00020000     //龙化
  STATE_15 = 15; //$00010000      //重伤
  STATE_16 = 16; //$00008000      //无敌
  STATE_17 = 17; //$00004000      //隐身
  STATE_18 = 18; //$00002000      //锁定
  STATE_19 = 19; //$00001000      //蛛网
  STATE_20 = 20; //$00000800      //buff特效无法跑动
  STATE_21 = 21; //$00000400      //烈火剑法
  STATE_22 = 22; //$00000200      //无极真气
  STATE_23 = 23; //$00000100      //开天斩
  STATE_24 = 24; //$00000080
  STATE_25 = 25; //$00000040
  STATE_26 = 26; //$00000020
  STATE_27 = 27; //$00000010
  STATE_28 = 28; //$00000008
  STATE_29 = 29; //$00000004

  STATE_30 = 30; //$00000002
  STATE_31 = 31; //$00000001

  STATE_STONE_MODE = 2; //$00000002
  STATE_OPENHEATH = 1; //$00000001

  USERMODE_PLAYGAME = 1;
  USERMODE_LOGIN = 2;
  USERMODE_LOGOFF = 3;
  USERMODE_NOTICE = 4;

  RUNGATEMAX = 20;
  // For Game Gate
  GM_OPEN = 1;
  GM_CLOSE = 2;
  GM_CHECKSERVER = 3; // Send check signal to Server
  GM_CHECKCLIENT = 4; // Send check signal to Client
  GM_DATA = 5;
  GM_SERVERUSERINDEX = 6;
  GM_RECEIVE_OK = 7;
  GM_TEST = 20;

  OS_MOVINGOBJECT = 1; //活动对象
  OS_ITEMOBJECT = 2;   //物品对象
  OS_EVENTOBJECT = 3;  //事件对象
  OS_GATEOBJECT = 4;
  OS_SWITCHOBJECT = 5;
  OS_MAPEVENT = 6;     //地图对象
  OS_DOOR = 7;
  OS_ROON = 8;

  RC_PLAYOBJECT = 1;     //玩家
  RC_HERO = 60;
  RC_Escort = 54;        //不能圣言弄死
  RC_TRAINER = 55;       //练功师
  RC_MONSTER = 80;
  RC_ANIMAL = 50;
  RC_NPC = 10;           //npc
  RC_PEACENPC = 15;
  RC_GUARD = 11;
  RC_GUARD2 = 16;
  RC_ARCHERGUARD = 112;
  RC_MISSION = 108;
  RC_MISSIONARCHER = 109;

  {
  =============================Monsters================================
  BlackFoxman	Race: 182	RaceImg: 102
  RedFoxman	Race: 183	RaceImg: 103
  WhiteFoxman	Race: 184	RaceImg: 104
  TrapRock	Race: 185	RaceImg: 105
  GuardianRock	Race: 187	RaceImg: 106
  ThunderElement	Race: 188	RaceImg: 107
  CloudElement	Race: 189	RaceImg: 108
  GreatFoxSpirit	Race: 190	RaceImg: 109
  HedgeKekTal     Race: 191	RaceImg: 110
  BigHedgeKekTal	Race: 191	RaceImg: 111
  RedFrogSpider	Race: 81	RaceImg: 19
  BrownFrogSpider	Race: 81	RaceImg: 19
  SmallTurtle1	Race: 162	RaceImg: 117
  SmallTurtle2	Race: 163	RaceImg: 117
  TurtleBoss	Race: 164	RaceImg: 118
  }
  RC_MONSTERBOX = 160;
  RC_STICKBLOCK = 161;
  RC_FOXWARRIOR = 162;
  RC_FOXWIZARD = 163;
  RC_FOXTAOIST = 164;
  RC_PUSHEDMON = 165; //ThunderElement
  RC_PUSHEDMON2 = 166; //CloudElement
  RC_FOXPILLAR = 167;
  RC_FOXBEAD = 168; //GreatFoxSpirit
  RC_ARCHERMASTER = 169;

  RCC_USERHUMAN = 0;
  RCC_GUARD = 11;
  RCC_ARCHERGUARD = 112;
  RCC_MERCHANT = 50;

  SM_OPENSESSION = 100;
  SM_CLOSESESSION = 101;
  CM_CLOSESESSION = 102;

  SM_CERTIFICATION_SUCCESS = 1;
  SM_PURSUEHIT = 2;
  SM_SQUHIT = 3;
  SM_SMITEHIT = 4;
  SM_HORSERUN = 5;
  SM_RUSH = 6;
  SM_RUSHKUNG = 7;
  SM_FIREHIT = 8;
  SM_BACKSTEP = 9;
  SM_TURN = 10;
  SM_WALK = 11;
  SM_SITDOWN = 12;
  SM_RUN = 13;
  SM_HIT = 14;
  SM_HEAVYHIT = 15;
  SM_BIGHIT = 16;
  SM_SPELL = 17;
  SM_POWERHIT = 18;
  SM_LONGHIT = 19;
  SM_DIGUP = 20;
  SM_DIGDOWN = 21;
  SM_FLYAXE = 22;
  SM_LIGHTING = 23;
  SM_WIDEHIT = 24;
  SM_HERO_LONGHIT = 25;
  SM_HERO_LONGHIT2 = 26;
  SM_ALIVE = 27;
  SM_MOVEFAIL = 28;   //移动失败
  SM_HIDE = 29;
  SM_DISAPPEAR = 30;
  SM_STRUCK = 31;
  SM_DEATH = 32;
  SM_SKELETON = 33;
  SM_NOWDEATH = 34;
  SM_CRSHIT = 35;
  SM_TWNHIT = 36;
  SM_42 = 37;
  SM_43 = 38;
  SM_RUSHEX = 39;
  SM_HEAR = 40;
  SM_FEATURECHANGED = 41;  //更新特征
  SM_USERNAME = 42;
  SM_SMITELONGHIT = 43;
  SM_WINEXP = 44;
  SM_LEVELUP = 45;  //升级
  SM_DAYCHANGING = 46;
  SM_SMITEWIDEHIT = 47;
  SM_SMITELONGHIT2 = 48;
  SM_SMITEWIDEHIT2 = 49;
  SM_LOGON = 50;  //登录响应
  SM_NEWMAP = 51;
  SM_ABILITY = 52;
  SM_HEALTHSPELLCHANGED = 53;
  SM_MAPDESCRIPTION = 54;
  SM_GAMEGOLDNAME = 55;
  SM_SMITELONGHIT3 = 56;
  SM_POSTIONMOVE = 57;
  SM_WEAPONCHANGED = 58;  //武器变更
  SM_CURRENCYNAME = 59;
  SM_WWJATTACK = 60;
  SM_WSJATTACK = 61;
  SM_WTJATTACK = 62;
  SM_LOADANTIHACK = 63;  //加载反外挂黑名单列表
  SM_CLEARANTIHACK = 64;  //清空黑名单列表
  SM_ANTICONFIG = 65;  //反作弊配置
  SM_GETPROCEWNDSIGN = 66; //获得进程窗口特征

  SM_81 = 81;
  SM_82 = 82;
  SM_83 = 83;

  SM_LIGHTING_1 = 87;
  SM_LIGHTING_2 = 88;
  SM_LIGHTING_3 = 89;

  SM_SYSMESSAGE = 100;
  SM_GROUPMESSAGE = 101;
  SM_CRY = 102;
  SM_WHISPER = 103;
  SM_GUILDMESSAGE = 104;
  SM_INPOWERINFO = 105;
  SM_INTERNALPOWER = 106;
  SM_HEROINTERNALPOWER = 107;
  SM_INTERNALPOWER2 = 108;
  SM_HEROINTERNALPOWER2 = 109;
  SM_SYSMESSAGE2 = 110;
  SM_SYSMESSAGE4 = 111;
  SM_FOXSTATE = 112;
  SM_HWID = 113;
  SM_DEALSYSMESSAGE = 114;
  SM_MOVEMESSAGE = 115;
  SM_SPELL2 = 117;
  SM_HINT = 118;

  SM_ADDITEM = 200;   //增加物品
  SM_BAGITEMS = 201;  //下发背包物品
  SM_DELITEM = 202;
  SM_UPDATEITEM = 203; //刷新物品
  SM_ADDMAGIC = 210;
  SM_SENDMYMAGIC = 211;
  SM_DELMAGIC = 212;
  SM_HERODELMAGIC = 213;
  SM_SENDMYMAGIC_SZ = 214;
  SM_QUERYVALUE = 215;
  SM_CONVERTMAGIC = 216;
  SM_HCONVERTMAGIC = 217;

  ////
  SM_USERSTALL = 218;
  SM_OPENSTALL = 219;
  SM_BUYSTALLITEM = 220;
  SM_UPDATESTALLITEM = 221;
  SM_SENDHEROS = 222;
  SM_MYTITLES = 223;
  SM_CHANGETITLE = 224;
  SM_READSECONDS = 225;
  SM_SMS_CODE_FAIL = 226;
  SM_QR_CODE_FAIL = 227;
  SM_GETQRCODE = 228;
  SM_UPATEQRCODE = 229;  //生成新的二维码
  SM_GETSERVERNAME = 230;
  SM_LOGINVERIFY = 231;
  SM_CHECKLOGINOK = 232;
  SM_CHECKLOGIN_FAIL = 233;
  SM_GETQRCODEAPI = 234;

  SM_NEEDPASSWORD = 500;
  SM_CERTIFICATION_FAIL = 501;
  SM_ID_NOTFOUND = 502;
  SM_PASSWD_FAIL = 503;
  SM_NEWID_SUCCESS = 504;
  SM_NEWID_FAIL = 505;
  SM_CHGPASSWD_SUCCESS = 506;
  SM_CHGPASSWD_FAIL = 507;
  SM_GETBACKPASSWD_SUCCESS = 508;
  SM_GETBACKPASSWD_FAIL = 509;

  SM_CHANGENAME = 517;
  SM_QUERYDELCHR = 518;
  SM_GETBACKDELCHR = 519;
  SM_QUERYCHR = 520;
  SM_NEWCHR_SUCCESS = 521;
  SM_NEWCHR_FAIL = 522;
  SM_DELCHR_SUCCESS = 523;
  SM_DELCHR_FAIL = 524;
  SM_STARTPLAY = 525;
  SM_STARTFAIL = 526;
  SM_QUERYCHR_FAIL = 527;
  SM_OUTOFCONNECTION = 528;
  SM_PASSOK_SELECTSERVER = 529;
  SM_SELECTSERVER_OK = 530;
  SM_NEEDUPDATE_ACCOUNT = 531;
  SM_UPDATEID_SUCCESS = 532;
  SM_UPDATEID_FAIL = 533;
  SM_SETTARGETXY = 534;
  SM_REFDIAMOND = 535;
  SM_QUERYYBSELL_SELL = 536;
  SM_QUERYYBSELL_DEAL = 537;
  SM_OPENDEAL_FAIL = 538;
  SM_SETSERIESSKILL = 539;
  SM_CANCELYBSELL_FAIL = 540;
  SM_AFFIRMYBDEA_FAIL = 541;
  SM_SERIESSKILLARR = 542;
  SM_POST_FAIL1 = 543;
  SM_POST_FAIL2 = 544;
  SM_ATTACKMODE = 545;  //全体攻击模式
  SM_FIREWORKS = 554;
  SM_FIRESERIESSKILL = 555;
  SM_SERIESSKILLREADY = 556;
  SM_INSAFEZONEFLAG = 557;
  SM_PICKUP_FAIL = 558;
  SM_RUNGATELOGOUT = 559;
  SM_PLAYERCONFIG = 560;

  SM_DROPITEM_SUCCESS = 600;
  SM_DROPITEM_FAIL = 601;

  SM_ITEMSHOW = 610;
  SM_ITEMHIDE = 611;
  SM_OPENDOOR_OK = 612;
  SM_OPENDOOR_LOCK = 613;
  SM_CLOSEDOOR = 614;
  SM_TAKEON_OK = 615;
  SM_TAKEON_FAIL = 616;
  SM_TAKEOFF_OK = 619;
  SM_TAKEOFF_FAIL = 620;
  SM_SENDUSEITEMS = 621;
  SM_WEIGHTCHANGED = 622;
  SM_QUERYITEMDLG = 623;
  SM_ITEMDLGSELECT = 624;
  SM_QUERYBINDITEM = 625;
  SM_QUERYBINDITEM_FALI = 626;
  SM_QUERYCHANGEHERO_FALI = 627;

  SM_MERCHANTBIGDLGSAY = 628;
  SM_CLEAROBJECTS = 633;
  SM_CHANGEMAP = 634;
  SM_EAT_OK = 635;
  SM_EAT_FAIL = 636;
  SM_BUTCH = 637;
  SM_MAGICFIRE = 638;
  SM_MAGICFIRE_FAIL = 639;
  SM_MAGIC_LVEXP = 640;
  SM_MAGIC_MAXLV = 641;
  SM_DURACHANGE = 642;
  SM_MERCHANTSAY = 643;      //服务器发送NPC脚本内容
  SM_MERCHANTDLGCLOSE = 644;
  SM_SENDGOODSLIST = 645;  //获得物品列表
  SM_SENDUSERSELL = 646;
  SM_SENDBUYPRICE = 647;
  SM_USERSELLITEM_OK = 648;
  SM_USERSELLITEM_FAIL = 649;
  SM_BUYITEM_SUCCESS = 650;
  SM_BUYITEM_FAIL = 651;
  SM_SENDDETAILGOODSLIST = 652;
  SM_GOLDCHANGED = 653;
  SM_CHANGELIGHT = 654;
  SM_LAMPCHANGEDURA = 655;
  SM_CHANGENAMECOLOR = 656;
  SM_CHARSTATUSCHANGED = 657; //人物状态改变
  SM_SENDNOTICE = 658;
  SM_GROUPMODECHANGED = 659;
  SM_CREATEGROUP_OK = 660;
  SM_CREATEGROUP_FAIL = 661;
  SM_GROUPADDMEM_OK = 662;
  SM_GROUPDELMEM_OK = 663;
  SM_GROUPADDMEM_FAIL = 664;
  SM_GROUPDELMEM_FAIL = 665;
  SM_GROUPCANCEL = 666;
  SM_GROUPMEMBERS = 667;
  SM_SENDUSERREPAIR = 668;
  SM_USERREPAIRITEM_OK = 669;
  SM_USERREPAIRITEM_FAIL = 670;
  SM_SENDREPAIRCOST = 671;
  SM_QUERYREFINEITEM = 672;
  SM_DEALMENU = 673;
  SM_DEALTRY_FAIL = 674;
  SM_DEALADDITEM_OK = 675;
  SM_DEALADDITEM_FAIL = 676;
  SM_DEALDELITEM_OK = 677;
  SM_DEALDELITEM_FAIL = 678;
  SM_DEALCANCEL = 681;  //取消交易
  SM_DEALREMOTEADDITEM = 682;
  SM_DEALREMOTEDELITEM = 683;
  SM_DEALCHGGOLD_OK = 684;
  SM_DEALCHGGOLD_FAIL = 685;
  SM_DEALREMOTECHGGOLD = 686;
  SM_DEALSUCCESS = 687;
  SM_SENDUSERSTORAGEITEM = 700;
  SM_STORAGE_OK = 701;
  SM_STORAGE_FULL = 702;
  SM_STORAGE_FAIL = 703;
  SM_SAVEITEMLIST = 704;
  SM_TAKEBACKSTORAGEITEM_OK = 705;
  SM_TAKEBACKSTORAGEITEM_FAIL = 706;
  SM_TAKEBACKSTORAGEITEM_FULLBAG = 707;
  SM_AREASTATE = 708;
  SM_DELITEMS = 709;
  SM_READMINIMAP_OK = 710;
  SM_READMINIMAP_FAIL = 711;
  SM_SENDUSERMAKEDRUGITEMLIST = 712;
  SM_MAKEDRUG_SUCCESS = 713;
  SM_HEROLAMPCHANGEDURA = 714;
  SM_CONNECTPUBLICSERVER = 715; //连接跨服 服务器
  SM_NORMALEFFECT = 716;
  SM_OPENMERCHANTBIGDLG = 717;

  SM_MAKEDRUG_FAIL = 65036;

  SM_CHANGEGUILDNAME = 750;
  SM_SENDUSERSTATE = 751;
  SM_SUBABILITY = 752;
  SM_OPENGUILDDLG = 753;       //打开行会成功
  SM_OPENGUILDDLG_FAIL = 754;  //打开行会失败
  SM_SENDGUILDMEMBERLIST = 756;
  SM_GUILDADDMEMBER_OK = 757;
  SM_GUILDADDMEMBER_FAIL = 758;
  SM_GUILDDELMEMBER_OK = 759;
  SM_GUILDDELMEMBER_FAIL = 760;
  SM_GUILDRANKUPDATE_FAIL = 761;
  SM_BUILDGUILD_OK = 762;
  SM_BUILDGUILD_FAIL = 763;
  SM_DONATE_OK = 764;
  SM_DONATE_FAIL = 765;
  SM_MYSTATUS = 766;
  SM_MENU_OK = 767;
  SM_GUILDMAKEALLY_OK = 768;
  SM_GUILDMAKEALLY_FAIL = 769;
  SM_GUILDBREAKALLY_OK = 770;
  SM_GUILDBREAKALLY_FAIL = 771;
  SM_DLGMSG = 772;
  SM_CREATEHERO_INFO = 773;
  SM_SETMISSION = 774;
  SM_TRAINSKILL = 775;
  SM_BREAKPOINT = 776;
  SM_TRAINVENATION = 777;
  SM_BUILDACUS = 778;
  SM_SENDBOOKCNT = 779;
  SM_USEREXCHGITEM_FAIL = 780;
  SM_APPRCHANGED = 781;

  SM_LOOPNORMALEFFECT = 782;
  SM_LOOPSCREENEFFECT = 783;

  SM_SPACEMOVE_HIDE = 800;
  SM_SPACEMOVE_SHOW = 801;
  SM_RECONNECT = 802;
  SM_GHOST = 803;
  SM_SHOWEVENT = 804;  //显示事件
  SM_HIDEEVENT = 805;
  SM_SPACEMOVE_HIDE2 = 806;
  SM_SPACEMOVE_SHOW2 = 807;
  SM_TIMECHECK_MSG = 810;
  SM_ADJUST_BONUS = 811;
  SM_SPECOFFERITEM = 812;
  SM_PRESENDITEMFAIL = 813;
  SM_HEROEXCHGBAGITEM_FAIL = 814;
  SM_OFFERITEM = 815;
  SM_BUGITEMFAIL = 816;
  SM_ADDITEMTOHEROBAG = 817;
  SM_ADDITEMTOHEROBAG1 = 818;
  SM_GETITEMFROMHEROBAG = 819;
  SM_GETITEMFROMHEROBAG1 = 820;

  SM_GUILDREQGUILDNAME = 821; //请求的公会名
  SM_GUILDSHOWLIST = 822;     //公会列表
  SM_GUILDSHOURENINFO = 823;  //招募信息
  SM_GUILDSHOWREQLIST = 824;  //请求入会列表
  SM_GUILDMEMBERINFO = 825;   //公会成员信息
  SM_REQICONINFO = 826;       //返回buff图标提示信息
  SM_HUMSTATETIME = 827;      //人物状态时间

  // Maket system ---------------------
  SM_MARKET_LIST = 828;    //交易行列表系统
  SM_MARKET_RESULT = 829;

  SM_EMAIL_LIST   = 830; //邮箱列表

  SM_USERBAGITEMLIST = 831;//指定人物背包数据
  SM_USERSTORAGEITEMLIST = 832;//指定人物仓库数据

  SM_SHOWHINT = 833;        //提示框
  SM_SAYSHOWHINT = 834;     //提示框内容
  SM_CLOSESHOWHINT = 835;   //关闭提示框
  SM_MISSIONPAGE = 836;     //任务页数
  SM_NOLOGOUT = 837;        //禁止小退
  SM_SHOWHINTNPC = 838;     //提示框NPC
  SM_ADDICONSTATE = 839;    //增加图标
  SM_REMOVEICONSTATE = 840;//删除图标
  SM_CLEARICONSTATE = 841;//清空图标
  SM_BUFFCLIENTDEF = 842;//buff自定义客户端资源
  SM_REQBUFFHINT = 843;       //请求buff信息
  SM_REQDBITEMINFO = 844; //返回DB物品信息
  SM_UPDATEHUMSTATUS = 845;//刷新单个人物状态
  SM_ATTACKEFFCT = 846;  //攻击特效
  SM_EMAIL_RESULT = 847;
  SM_MAGICCD = 848; //技能CD
  SM_MAGICICON = 849;//技能 治愈术图标
  SM_HIGHMAGIC = 850;//带冷却技能
  SM_ONEMAGICICON = 851;//技能 治愈术
  SM_STOPAUTOGAME = 852;//停止挂机
  SM_GUILDDIARY = 853;//公会日记
  SM_REQAMINFO = 854;//自定义怪物数据
  SM_AMHIT = 855; //自定义怪物攻击1
  SM_AMHIT2 = 856;//自定义怪物攻击2
  SM_AMHIT3 = 857;//自定义怪物攻击3
  SM_AMHIT4 = 858;//自定义怪物攻击4
  SM_WAKEUP = 859;//苏醒
  SM_ACTIONSTATE = 860;
  SM_ADDITEMMSG = 861;
  SM_ANIMAL12STATE = 862;//12生肖开启状态
  SM_ANIMAL12OPEN = 863;//开启生肖
  SM_RMMARKETITEM = 864;//删除客户端交易行物品
  SM_SHOWEXPHITTER = 865;//显示经验获得者
  SM_SHOWIGNOREREHART = 866;//显示无视减伤
  SM_SHOWFASHION = 867;//显示时装
  SM_REQFASHION = 868;//时装内观参数
SM_JOINPUBLIC = 869;//连接跨服服务器
  SM_CLIENTLOGOUT = 895;
  SM_HEROLOGOUT = 896;
  SM_HEROLOGIN = 897;
  SM_HERONAME = 898;
  SM_HEROSTATE = 899;
  SM_HEROABILITY = 900;
  SM_HEROSUBABILITY = 901;
  SM_HEROBAGITEMS = 902;
  SM_HEROUSEITEMS = 903;
  SM_HEROMYMAGICS = 904;
  SM_HEROADDITEM = 905;
  SM_HERODELITEM = 906;
  SM_HEROTAKEON_OK = 907;
  SM_HEROTAKEON_FAIL = 908;
  SM_HEROTAKEOFF_OK = 909;
  SM_HEROTAKEOFF_FAIL = 910;
  SM_HEROEAT_OK = 911;
  SM_HEROEAT_FAIL = 912;
  SM_HEROADDMAGIC = 913;
  SM_HEROLEVELUP = 914;
  SM_HEROWINEXP = 915;
  SM_HEROMAGIC_LVEXP = 916;
  SM_HERODELITEMS = 917;
  SM_HEROSTATEDISPEAR = 918;
  SM_HERODURACHANGE = 919;
  SM_HERODROPITEM_SUCCESS = 920;
  SM_HERODROPITEM_FAIL = 921;
  SM_HEROUPDATEITEM = 922;
  SM_HEROPOWERUP = 923;
  SM_HEROSPELL = 924;

  SM_OPENBOX = 950;
  SM_OPENBOX_FAIL = 951;
  SM_SELETEBOXFLASH = 952;
  SM_CLOSEBOX = 953;

  SM_SQUAREPOWERUP = 958;

  SM_OPENHEALTH = 1100;
  SM_CLOSEHEALTH = 1101;
  SM_BREAKWEAPON = 1102;
  SM_INSTANCEHEALGUAGE = 1103;
  SM_CHANGEFACE = 1104;
  SM_PASSWORD = 1105;
  SM_VERSION_FAIL = 1106;
  SM_STRUCKEFFECT = 1107;
  SM_LEVELRANK = 1108;
  SM_OVERCLIENTCOUNT = 1109;
  SM_PLAYSOUND = 1110;
  SM_SMITEEFFECT = 1111;

  //1109 装备绑定
  SM_ITEMUPDATE = 1500;
  SM_MONSTERSAY = 1501;
  SM_SUITESTR = 1502;
  SM_DETECTITEM_FALI = 1503;
  SM_MOVEDETECTITEM_FALI = 1504;
  SM_UPDATEDETECTITEM = 1505;
  SM_TreasureIdentify = 1506;
  SM_ExchangeItem = 1507;
  SM_SecretProperty = 1508;
  SM_SetMerchantDlgImgName = 1509;
  SM_SENDTITLES = 1510;

  SM_PLAYDICE = 1200;

  SM_UPGRADEITEM_RESULT = 1300;
  SM_COUNTERITEMCHANGE = 1301;
  SM_USERSELLCOUNTITEM_OK = 1302;
  SM_USERSELLCOUNTITEM_FAIL = 1303;
  SM_ITEMSUMCOUNT_FAIL = 1304;
  SM_HEROITEMSUMCOUNT_FAIL = 1305;

  SM_CANCLOSE_OK = 1304;
  SM_CANCLOSE_FAIL = 1305;
  SM_HEROCOUNTERITEMCHANGE = 1306;
  SM_CDVERSION_FAIL = 1307;
  SM_CDBroadCastMsg = 1308;

//----------------------------------------------------
  SM_OPENBIGDIALOGBOX = 1309;      //使用NPC大对话框  Development 2019-01-14
//----------------------------------------------------


  SM_AUTOPLAYGAME     = 1310;   //开始挂机
  SM_ADDBUTTON        = 1311;   //增加按钮
  SM_DELBUTTON        = 1312;   //删除按钮
  SM_GOTONOW          = 1313;   //自动移动
  SM_SHOWPROGRESSBARDLG = 1314; //显示进度条
  SM_HIDEPROGRESSBARDLG = 1315; //隐藏进度条
  //SM_OPENCHECKTHREAD    = 1316; //打开客户端检测线程

  SM_OPENUPGRADEDIALOG = 1350;    //OpenUpgradeDialog  打开宝石淬炼见面

  SM_SHOWSTOREHPMP = 1351;//刷新存储血量和蓝量
  SM_PLAYERRECTSCIRPT = 1352;//脚本控制人物特效
  SM_FLUSHBUFF = 1353;    //刷新buff
  SM_TRANSFERMSG = 1354;   //转发广播
  SM_TRANSFERALL = 1355;    //转发全服消息

  SM_ITEMLOCK = 2811;
  SM_BOOK = 2812;
  SM_MSG001 = 2813;
  SM_SHELLEXECUTE = 2814;
  SM_RELOADSHOPITEM = 2815;//重新加载商铺物品

//  SM_GETHINT = 2825;  //获取提示信息

  SM_HEROLOYALTY = 45000;
  SM_WINIPEXP = 45001;
  SM_HEROWINIPEXP = 45002;
  SM_WINNIMBUSEXP = 45003;
  SM_HEROWINNIMBUSEXP = 45004;
  SM_COLLECTEXP = 45005;
  SM_RELEASECOLLECTEXP = 45006;
  SM_COLLECTEXPSTATE = 45007;

  SM_REMOTEMSG = 60004;
  SM_TEST = 65037;
  SM_THROW = 65069;
  SM_MAPSSCOREINFOSHOW = 65070;
  SM_MAPSSCOREINFOHIDE = 65071;
  SM_ADDHUALING = 65072;  //增加花翎

  RM_DELITEMS = 9000;
  RM_STALLSTATUS = 9001;

  RM_TURN = 10001;
  RM_WALK = 10002;
  RM_RUN = 10003;
  RM_HIT = 10004;
  RM_HEAVYHIT = 10005;
  RM_BIGHIT = 10006;
  RM_SPELL = 10007;
  RM_SPELL2 = 10008;
  RM_POWERHIT = 10009;
  RM_MOVEFAIL = 10010;
  RM_LONGHIT = 10011;
  RM_WIDEHIT = 10012;
  RM_PUSH = 10013;  //推动活动对像
  RM_FIREHIT = 10014;
  RM_RUSH = 10015;
  RM_HERO_LONGHIT = 10016;
  RM_HERO_LONGHIT2 = 10017;
  RM_NORMALEFFECT = 10018;
  RM_HEROSPELL = 10019;
  RM_STRUCK = 10020;
  RM_DEATH = 10021;
  RM_DISAPPEAR = 10022;
  RM_FIREHITREADY = 10023;
  RM_SKELETON = 10024;
  RM_MAGSTRUCK = 10025;
  RM_MAGHEALING = 10026;
  RM_STRUCK_MAG = 10027;
  RM_MAGSTRUCK_MINE = 10028;
  RM_INSTANCEHEALGUAGE = 10029;
  RM_HEAR = 10030;
  RM_WHISPER = 10031;
  RM_CRY = 10032;
  RM_RIDE = 10033;
  RM_SENDUSERREPAIR = 10034;
  RM_SENDUSERSREPAIR = 10035;
  RM_CRSHIT = 10036;
  RM_RUSHKUNG = 10037;
  RM_SENDREGINFO = 10038;
  RM_PURSUEHIT = 10039;
  RM_INPOWERINFO = 10040;
  RM_SETMISSION = 10041;
  RM_ATTACKMODE = 10042;
  RM_USERNAME = 10043;
  RM_WINEXP = 10044;
  RM_LEVELUP = 10045;
  RM_CHANGENAMECOLOR = 10046;
  RM_REMOTEMSG = 10047;
  RM_SELLOFF = 10048;
  RM_BUYOFF = 10049;
  RM_LOGON = 10050;  //玩家登录
  RM_ABILITY = 10051;
  RM_HEALTHSPELLCHANGED = 10052;
  RM_DAYCHANGING = 10053;
  RM_HORSERUN = 10054;
  RM_GETSELLITEMSLIST = 10055;
  RM_HEROWINEXP = 10056;
  RM_HEROLEVELUP = 10057;
  RM_HEROUSERNAME = 10058;
  RM_JOINTATTACK = 10059;
  RM_STRUCKEFFECTEX = 10060;
  RM_81 = 10061;
  RM_82 = 10062;
  RM_83 = 10063;
  RM_HEROWINIPEXP = 10064;
  RM_WINIPEXP = 10065;
  RM_INTERNALPOWER = 10066;
  RM_WINNIMBUSEXP = 10067;
  RM_HEROWINNIMBUSEXP = 10068;
  RM_RUSHEX = 10069;
  RM_SMITEHIT = 10070;
  RM_SMITELONGHIT = 10071;
  RM_SMITEWIDEHIT = 10072;
  RM_COLLECTEXP = 10073;
  RM_COLLECTEXPSTATE = 10074;
  RM_SMITELONGHIT2 = 10075;
  RM_SMITEWIDEHIT2 = 10076;
  RM_SMITELONGHIT3 = 10077;
  RM_STRUCKEFFECTEX_DELAY = 10078;
  RM_SYSMESSAGE4 = 10079;
  RM_FOXSTATE = 10080;
  RM_CURSE = 10081;
  RM_PLAYERCONFIG = 10082;
  RM_PLAYERCONFIGHERO = 10083;
  RM_PLAYSOUND = 10084;
  RM_SMITEEFFECT = 10085;

  RM_MERCHANTBIGDLGSAY = 10086;
  RM_SYSMESSAGE = 10100;
  RM_STRUCKEFFECT = 10101;
  RM_GROUPMESSAGE = 10102;
  RM_SYSMESSAGE2 = 10103;
  RM_GUILDMESSAGE = 10104;
  RM_SYSMESSAGE3 = 10105;
  RM_DEALSYSMESSAGE = 10106;//交易行消息
  RM_MOVEMESSAGE    = 10107;
  RM_ADDBUTTON      = 10108;//增加按钮
  RM_ITEMSHOW = 10110;
  RM_ITEMHIDE = 10111;
  RM_DOOROPEN = 10112;
  RM_DOORCLOSE = 10113;
  RM_SENDUSEITEMS = 10114;
  RM_WEIGHTCHANGED = 10115;
  RM_FEATURECHANGED = 10116;
  RM_CLEAROBJECTS = 10117;
  RM_CHANGEMAP = 10118;
  RM_BUTCH = 10119;
  RM_MAGICFIRE = 10120;
  RM_SENDMYMAGIC = 10122;
  RM_MAGIC_LVEXP = 10123;
  RM_DURACHANGE = 10125;
  RM_MERCHANTSAY = 10126;
  RM_MERCHANTDLGCLOSE = 10127;
  RM_SENDGOODSLIST = 10128;
  RM_SENDUSERSELL = 10129;
  RM_SENDBUYPRICE = 10130;
  RM_USERSELLITEM_OK = 10131;
  RM_USERSELLITEM_FAIL = 10132;
  RM_BUYITEM_SUCCESS = 10133;
  RM_BUYITEM_FAIL = 10134;
  RM_SENDDETAILGOODSLIST = 10135;
  RM_GOLDCHANGED = 10136;
  RM_CHANGELIGHT = 10137;
  RM_LAMPCHANGEDURA = 10138;
  RM_CHARSTATUSCHANGED = 10139;
  RM_GROUPCANCEL = 10140;
  RM_SENDREPAIRCOST = 10142;
  RM_USERREPAIRITEM_OK = 10143;
  RM_USERREPAIRITEM_FAIL = 10144;
  RM_USERSTORAGEITEM = 10146;
  RM_USERGETBACKITEM = 10147;
  RM_SENDDELITEMLIST = 10148;
  RM_USERMAKEDRUGITEMLIST = 10149;
  RM_MAKEDRUG_SUCCESS = 10150;
  RM_MAKEDRUG_FAIL = 10151;
  RM_GETSALELIST = 10152;
  RM_ALIVE = 10153;
  RM_DELAYMAGIC = 10154;
  RM_MAPRANDOMMOVE = 10155;
  RM_MAGICFIREFAIL = 10156;
  RM_HEROLOGOUT = 10157;
  RM_HEROLOGIN = 10158;
  RM_HEROSTATE = 10159;
  RM_HERONAME = 10160;
  RM_HERODISPEAR = 10161;
  RM_HEROMAGIC_LVEXP = 10162;
  RM_FIREWORKS = 10163;
  RM_DRAGONDURACHANGE = 10164;
  RM_DELAYINCHEALTHSPELL = 10165;
  //RM_DELAYMAGICEX           = 10166;
  RM_SERIESSKILLARR = 10167;
  RM_MAGIC_MAXLV = 10168;
  RM_CONVERTMAGIC = 10169;
  RM_DELAYDECINTERNALPOWER = 10170;
  RM_SENDHEROS = 10171;
  RM_SUITESTR = 10172;
  RM_MAGMEDUSAEYE = 10173;
  RM_SENDBOOKCNT = 10174;
  RM_APPRCHANGED = 10175;
  RM_LOOPNORMALEFFECT = 10176;
  RM_LOOPSCREENEFFECT = 10177;
  RM_POSTIONMOVE = 10178;
  RM_DELAY_MAGIC = 10179;
  RM_SENDTITLES = 10180;
  SM_GETITEMSNOTELIST = 10181;

  RM_DIGUP = 10200;
  RM_DIGDOWN = 10201;
  RM_FLYAXE = 10202;
  RM_LIGHTING = 10204;
  RM_LIGHTING_1 = 10205;
  RM_LIGHTING_2 = 10206;
  RM_LIGHTING_3 = 10207;

  RM_POISON = 10300;
  RM_CHANGEGUILDNAME = 10301;
  RM_SUBABILITY = 10302;
  RM_BUILDGUILD_OK = 10303;
  RM_BUILDGUILD_FAIL = 10304;
  RM_DONATE_OK = 10305;
  RM_DONATE_FAIL = 10306;

  RM_TRANSPARENT = 10308;
  RM_MENU_OK = 10309;
  RM_OPENMERCHANTBIGDLG = 10310;
  RM_HINT = 10311;


  RM_ADJUST_BONUS = 10400;
  RM_10401 = 10401;
  RM_PLAYDICE = 10500;

  RM_GAMEGOLDCHANGED = 10666;
  RM_MYSTATUS = 10777;
  RM_SPACEMOVE_FIRE2 = 10330;
  RM_SPACEMOVE_FIRE = 10331;
  RM_DELAYPUSHED = 10555;
  RM_DELAYPUSHED1 = 10556;
  RM_10414 = 10414;

  RM_RECONNECTION = 11332;
  RM_SPACEMOVE_SHOW = 11331;
  RM_SPACEMOVE_SHOW2 = 10332;
  RM_HIDEEVENT = 10333;
  RM_SHOWEVENT = 10334;
  RM_ZEN_BEE = 10337;

  RM_OPENHEALTH = 10410;
  RM_CLOSEHEALTH = 10411;
  RM_DOOPENHEALTH = 10412;
  RM_BREAKWEAPON = 10413;
  RM_CHANGEFACE = 10415;
  RM_PASSWORD = 10416;

  RM_ITEMUPDATE = 11000;
  RM_MONSTERSAY = 11001;
  RM_MAKESLAVE = 11002;

  RM_MAPSSCOREINFOHIDE = 11010; //隐藏客户端地图评分显示
  RM_COUNTERITEMCHANGE = 11011;
  RM_USERSELLCOUNTITEM_OK = 11012;
  RM_USERSELLCOUNTITEM_FAIL = 11013;
  RM_SENDUSERMAKEFOODLIST = 11014;
  RM_MARKET_LIST = 11015;
  RM_MARKET_RESULT = 11016;

  RM_EMAIL_LIST   = 11017;
  RM_EMAIL_RESULT = 11018;
  RM_QUERYHUMNAME_RESULT = 11019; //查询名字返回

  RM_SHOWSTOREHPMP = 11020; //刷新 存储血量和蓝量
  RM_PLAYERRECTSCIRPT = 11021; //脚本控制特效
  RM_FLUSHBUFF = 11022;     //刷新buff
  RM_HUMSTATETIME = 11023;    //人物状态时间
  RM_SHOWHINT = 11024;      //打开提示框
  RM_SAYSHOWHINT = 11025;   //提示框内容
  RM_CLOSESHOWHINT = 11026; //关闭提示框
  RM_MISSIONPAGE = 11027; //任务页数
  RE_NOLOGOUT = 11028;  //禁止小退
  RM_SHOWHINTNPC = 11029; //提示框NPC
  RM_ADDICONSTATE = 11030; //增加图标
  RM_REMOVEICONSTATE = 11031; //删除图标
  RM_CLEARICONSTATE = 11032; //清空图标
  RM_BUFFCLIENTDEF = 11033; //buff自定义客户端资源
  RM_OKBOX = 11034; //ok框消息
  RM_REQDBITEMINFO = 11035; //请求数据库物品信息
  RM_UPDATEHUMSTATUS = 11036; //刷新人物单个状态
  RM_ATTACKEFFCT = 11037; //攻击特效
  RM_MAGICCD = 11038; //技能CD时间
  RM_MAGICICON = 11039; //技能
  RM_HIGHMAGIC = 11040; //已经学习过的带冷却技能
  RM_ONEMAGICICON = 11041; //
  RM_STOPAUTOGAME = 11042; //停止挂机
  RM_GUILDDIARY = 11043; //公会日记
  RM_SAY_BIG_EMOJI = 11044; //发送大表情
  RM_AMHIT = 11045; //自定义怪物攻击
  RM_AMHIT2 = 11046; //自定义怪物攻击2
  RM_AMHIT3 = 11047; //自定义怪物攻击3
  RM_AMHIT4 = 11048; //自定义怪物攻击4
  RM_REQAMINFO = 11049; //自定义怪物数据
  RM_WAKEUP = 11050; //苏醒
  RM_ACTIONSTATE = 11051;
  RM_KFConsleCmd = 11052; //处理客服工具发送的命令转到QF脚本[@KFConsleCmd_XXX]
  RM_HTTPRET = 11053; //http请求返回消息
  RM_ADDHUALING = 11054; //添加花翎
  RM_CANCEL_DELAY_PROCESS = 11055;//取消延迟进度条延迟。
  RM_ADDITEMMSG = 11056;//添加获取物品消息提示
  RM_ANIMAL12STATE = 11057;//12生肖开启状态
  RM_RMMARKETITEM = 11058;//删除客户端交易行物品
  RM_SHOWPROGRESSBARDLG = 11059;//释放藏宝图
  RM_SHOWEXPHITTER = 11060;//显示经验人
  RM_SHOWIGNOREREHART = 11061;//显示无视减伤
  RM_REQFASHION = 11062;//请求时装内观参数
  RM_SHOWFASHION = 11063;//展示时装外观
  RM_TRANSFERMSG = 11064;//转发广播消息
  RM_TRANSFERALL = 11065;//转发全服消息
  RM_WEBQUERY = 11066;//网站查询结果

RM_JOINPUBLIC = 11067;  //连接跨服 服务器
  RM_PASSWORDSTATUS = 20001;
  SM_PASSWORDSTATUS = 20001;

  SM_ACTION_MIN = SM_PURSUEHIT;
  SM_ACTION_MAX = SM_HERO_LONGHIT2;
  SM_ACTION2_MIN = 35;
  SM_ACTION2_MAX = 99;

  RUNGATECODE = $AA55AA55 + $00450045;
  MAGICCODE = $AA55AA55;
  MAGICWORD = $FF28;

  SS_LOGINCOST = 3333;
  SS_OPENSESSION = 1000;
  SS_CLOSESESSION = 1001;
  SS_SOFTOUTSESSION = 1002;
  SS_SERVERINFO = 1003;
  SS_KEEPALIVE = 1004;
  SS_110 = 1005;
  SS_KICKUSER = 1006;
  SS_SERVERLOAD = 1007;
  UNKNOWMSG = 1008;
  SS_CLOSESESSIONA = 1009;
  SS_OPENSESSION_OK = 1010;

  SLAVEMAXLEVEL = 15;
  PN_GETRGB = 'GetRgb';
  PN_GAMEDATALOG = 'GAMEDATALOG';
  PN_SENDBROADCASTMSG = 'SENDBROADCASTMSG';
  sENCYPTSCRIPTFLAG = 'ENCYPTSCRIPTFLAG';

  //改名常量
  Hum_NameFilter = 0; //名字过滤
  Hum_NameFlushFail = 1; //数据库修改失败
  Hum_NameExists = 2;  //名字已经存在
  Hum_EmailUnread = 4;  //邮件未读取,或者邮件还有东西未取出
  Hum_ItemMarket =5;   //物品还在上架

  sHUMNAMEFILTER = '名字过滤';
  sHUMNAMEFLUSHFAIL = '修改失败';
  sHUMNAMEEXISTS = '名字存在';
  sHUMEMAILUNREAD = '邮件未读取或者邮件还有东西未取出';
  sHUMITEMMARKET = '交易行物品未下架';

  //人形怪法术分类
  SKILL_FIRST = 1;
  SKILL_MELEE = 2;
  SKILL_RANGED = 3;

  LA_UNDEAD = 1;
  SKILL_FIREBALL = 1;   //火球术
  SKILL_HEALLING = 2;   //治愈术
  SKILL_ONESWORD = 3;  //基本剑术
  SKILL_ILKWANG = 4;   //精神力战法
  SKILL_FIREBALL2 = 5;   //大火球
  SKILL_AMYOUNSUL = 6;   //施毒术
  SKILL_YEDO = 7;       //攻杀剑术
  SKILL_FIREWIND = 8;   //抗拒火环
  SKILL_FIRE = 9;       //地狱火
  SKILL_SHOOTLIGHTEN = 10; //疾光电影
  SKILL_LIGHTENING = 11;   //雷电术
  SKILL_ERGUM = 12;        //刺杀剑术
  SKILL_FIRECHARM = 13;   //灵魂火符
  SKILL_HANGMAJINBUB = 14; //幽灵盾
  SKILL_DEJIWONHO = 15;   //神圣战甲术
  SKILL_HOLYSHIELD = 16;   //困魔咒
  SKILL_SKELLETON = 17;   //召唤骷髅
  SKILL_CLOAK = 18;       //隐身术
  SKILL_BIGCLOAK = 19;     //集体隐身术
  SKILL_TAMMING = 20;      //诱惑之光
  SKILL_SPACEMOVE = 21;   //瞬息移动
  SKILL_EARTHFIRE = 22;    //火墙
  SKILL_FIREBOOM = 23;    //爆裂火焰
  SKILL_LIGHTFLOWER = 24;  //地狱雷光
  SKILL_BANWOL = 25;       //半月弯刀
  SKILL_FIRESWORD = 26;   //烈火剑法
  SKILL_MOOTEBO = 27;     //野蛮冲撞
  SKILL_SHOWHP = 28;      //心灵启示
  SKILL_BIGHEALLING = 29;  //群体治疗术
  SKILL_SINSU = 30;       //召唤神兽
  SKILL_SHIELD = 31;     //魔法盾
  SKILL_KILLUNDEAD = 32; //圣言术
  SKILL_SNOWWIND = 33;   //冰咆哮
  SKILL_UNAMYOUNSUL = 34; //解毒术
  SKILL_WINDTEBO = 35;
  SKILL_MABE = 36;
  SKILL_GROUPLIGHTENING = 37; //群体雷电术
  SKILL_GROUPAMYOUNSUL = 38;  //诅咒术
  SKILL_GROUPDEDING = 39;     //彻地钉
  SKILL_40 = 40;    //双龙斩
  SKILL_41 = 41;    //狮子吼
  SKILL_42 = 42;    //龙影剑法
  SKILL_43 = 43;    //雷霆剑法
  SKILL_44 = 44;    //寒冰掌
  SKILL_45 = 45;    //灭天火
  SKILL_46 = 46;
  SKILL_47 = 47;    //火龙烈炎
  SKILL_48 = 48;    //气功波
  SKILL_49 = 49;    //净化术
  SKILL_50 = 50;    //无极真气
  SKILL_51 = 51;    //
  SKILL_52 = 52;    //飓风破
  SKILL_53 = 53;
  SKILL_54 = 54;
  SKILL_55 = 55;    //召唤月灵
  SKILL_56 = 56;    //逐日剑法
  SKILL_57 = 57;    //噬血术
  SKILL_58 = 58;    //流星火雨
  SKILL_59 = 59;

  ET_STONEMINE = 1;
  ET_DIGOUTZOMBI = 2;
  ET_PILESTONES = 3;
  ET_HOLYCURTAIN = 4;
  ET_FIRE = 5;
  ET_SCULPEICE = 6;
  ET_MAPEFFECT = 7;

  ET_NIMBUS_1 = 50;
  ET_NIMBUS_2 = 51;
  ET_NIMBUS_3 = 52;

  ET_ITEMMINE1 = 55;
  ET_ITEMMINE2 = 56;
  ET_ITEMMINE3 = 57;

  DB_LOADHUMANRCD = 100;
  DB_SAVEHUMANRCD = 101;
  DB_NEWHERO = 102;
  DB_SAVEHUMANRCDEX = 103;
  DB_GETREMOVEDIP = 104;
  DB_LOADRANKDATA = 105;
  DB_LOADHEROS = 106;


  DB_MAKEITEMRCD = 150;
  DB_ITEMTHROW = 151;
  DB_MAKEITEMRCD2 = 152;
  DB_QUERYHUMNAMEEXIST = 153;
  DB_CHANGEHUMNAME = 154;

  DBR_LOADHUMANRCD = 1200;
  DBR_LOADHUMANRCD2 = 1201;
  DBR_NEWHERO = 1203;
  DBR_GETREMOVEDIP = 1204;
  DBR_LOADRANKDATA = 1205;
  DBR_LOADHEROS = 1206;


  DBR_MAKEITEMRCD = 1300;
  DBR_MAKEITEMRCD2 = 1301;
  DBR_QUERYHUMNAMEEXIST = 1302;
  DBR_CHANGEHUMNAME = 1303;

  DBR_SAVEHUMANRCD = 1400;
  DBR_FAIL = 2000;

  DBR_LOADRCDFLAG = 8;
  DBR_SAVERCDFLAG = 5;
  DBR_NEWHEROFLAG = 415;
  DBR_LOADDEALFLAG = 6;
  DBR_SAVEDEALFLAG = 7;
  DBR_QUERYHUMNAMEFLAG = 9;
  DBR_CHANGEHUMNAMEFLAG = 11;
  CLIENTVERNO = 10;

  CM_QUERYUSERNAME = 80;
  CM_QUERYBAGITEMS = 81;
  CM_QUERYUSERSTATE = 82;
  CM_QUERYHEROBAGITEMS = 83;
  CM_WANTVIEWRANGE = 84;
  CM_GETCAPTCHA = 85;
  CM_GETQRCODE = 86;
  CM_GETSERVERNAME = 87;
  CM_CHECKQRCODE = 88;
  CM_LOADANTICHEATINFO = 89;                  //加载反外挂信息
  CM_UPLOADUSER = 90;                         //上传用户信息
  CM_UPLOADWNDTEXT = 91;                      //上传窗口控件文本信息
  CM_UPLOADNOSIGNPROCE = 92;                  //上报可疑进程信息
  CM_UPLOADQUERYDISKINFO = 93;                //上报扫盘结果
  CM_REPORTFAKEINFO = 94;                     //上报模拟键鼠信息

  CM_QUERYCHR = 100;
  CM_NEWCHR = 101;
  CM_DELCHR = 102;
  CM_SELCHR = 103;
  CM_SELECTSERVER = 104;
  CM_QUERYDELCHR = 105;
  CM_GETBACKDELCHR = 106;

  CM_FASTLOOP = 140;
  CM_DBSTEST = 141;
  CM_DBSQUESTINFO = 142;
  CM_REMOVEDCMD = 143;

  CM_METEOR_SHOWER_LOCK = 998;
  CM_POISON_AMULET_SWAP = 999;
  CM_DROPITEM = 1000;
  CM_PICKUP = 1001;                                          //捡物品
  CM_OPENDOOR = 1002;                                        //开门
  CM_TAKEONITEM = 1003;
  CM_TAKEOFFITEM = 1004;
  CM_HEROMAGICKEYCHANGE = 1005;
  CM_EAT = 1006;
  CM_BUTCH = 1007;
  CM_MAGICKEYCHANGE = 1008;
  CM_SOFTCLOSE = 1009;                                       //安全退出 小退
  CM_CLICKNPC = 1010;                                        //玩家点击NPC
  CM_MERCHANTDLGSELECT = 1011;                               //发送点击label标签
  CM_MERCHANTQUERYSELLPRICE = 1012;
  CM_USERSELLITEM = 1013;
  CM_USERBUYITEM = 1014;
  CM_USERGETDETAILITEM = 1015;
  CM_DROPGOLD = 1016;                                        //丢元宝
  CM_LOGINNOTICEOK = 1018;                                   //客户端成功登录游戏 发来的通知
  CM_GROUPMODE = 1019;
  CM_CREATEGROUP = 1020;
  CM_ADDGROUPMEMBER = 1021;
  CM_DELGROUPMEMBER = 1022;
  CM_USERREPAIRITEM = 1023;
  CM_MERCHANTQUERYREPAIRCOST = 1024;
  CM_DEALTRY = 1025;                                         //点击物品交易按钮
  CM_DEALADDITEM = 1026;
  CM_DEALDELITEM = 1027;
  CM_DEALCANCEL = 1028;
  CM_DEALCHGGOLD = 1029;
  CM_DEALEND = 1030;                                         //点击交易按钮
  CM_USERSTORAGEITEM = 1031;                                 //入仓
  CM_USERTAKEBACKSTORAGEITEM = 1032;                         //出仓
  CM_WANTMINIMAP = 1033;
  CM_USERMAKEDRUGITEM = 1034;
  CM_OPENGUILDDLG = 1035;
  CM_GUILDHOME = 1036;
  CM_GUILDMEMBERLIST = 1037;
  CM_GUILDADDMEMBER = 1038;
  CM_GUILDDELMEMBER = 1039;
  CM_GUILDUPDATENOTICE = 1040;
  CM_GUILDUPDATERANKINFO = 1041;
  CM_POSTSELL = 1042;
  CM_ADJUST_BONUS = 1043;
  CM_GUILDALLY = 1044;
  CM_GUILDBREAKALLY = 1045;
  CM_GETSHOPITEM = 1046;
  CM_ITEMDLGSELECT = 1047;
  CM_BUYSHOPITEM = 1048;
  CM_SHOPPRESEND = 1049;
  CM_RECALLHERO = 1050;
  CM_UNRECALLHERO = 1051;
  CM_SETSERIESSKILL = 1052;
  CM_FIRESERIESSKILL = 1053;
  CM_BREAKPOINT = 1054;
  CM_TRAINVENATION = 1055;
  CM_CANCELYBDEAL = 1056;
  CM_CANCELYBSELL = 1057;
  CM_AFFIRMYBDEAL = 1058;
  CM_OPENSTALL = 1059;
  CM_LEVELRANK = 1060;
  CM_REFINEITEM = 1061; //淬炼
  CM_REFINEITEM_FAIL = 1062;
  CM_TRAINSKILL = 1063;
  CM_BUILDACUS = 1064;
  CM_QUERYVAL = 1065;
  CM_RELEASECOLLECTEXP = 1066;
  CM_ITEMSUMCOUNT = 1067;
  CM_MARKET_LIST = 1068;  //拉取交易行物品数据
  CM_MARKET_SELL = 1069;  //出售物品
  CM_MARKET_BUY = 1070;   //购买物品
  CM_MARKET_CANCEL = 1071;
  CM_MARKET_GETPAY = 1072;
  CM_MARKET_CLOSE = 1073;

  CM_MARKET_READYSELL = 1089;  //准备上架物品
  CM_MARKET_SAY       = 1090;

  CM_UPDATESTALLITEM = 1074;
  CM_QUERYBINDITEM = 1075;
  CM_HEROCHANGING = 1076;
  CM_MoveDetectItem = 1077;
  CM_DetectItem = 1078;
  CM_TreasureIdentify = 1079;

  CM_OPENBOX = 1080;
  CM_SELETEBOXFLASH = 1081;
  CM_GETBOXITEM = 1082;
  CM_ExchangeItem = 1083;
  CM_ExchangeBook = 1084;
  CM_MERCHANTQUERYEXCHGBOOK = 1085;
  CM_SecretProperty = 1086;
  CM_PLAYERCONFIG = 1087;
  CM_CHANGETITLE = 1088;
  CM_EMAIL_LIST   = 1091;
  CM_EMAIL_ACTION   = 1092;
  CM_MARKET_ITEM = 1093;

  CM_PLAYERADDITEMTOHERO = 1100;
  CM_HEROADDITEMTOPLAYER = 1101;
  CM_HEROTAKEONITEM = 1102;
  CM_HEROTAKEOFFITEM = 1103;
  CM_HEROEAT = 1104;
  CM_HEROSETTARGET = 1105;
  CM_HERODROPITEM = 1106;
  CM_HERORECALLSLAVE = 1107;
  CM_HERORJOINTATTACK = 1108;
  CM_DISMANTLEITEM = 1109;

  CM_GUILDCHANGETITLE = 1110;                           //改变成员公会封号
  CM_GUILDCREATETITLE = 1111;                           //创建封号
  CM_GUILDEDITTITLE = 1112;                             //编辑封号
  CM_GUILDDELETETITLE = 1113;                           //删除封号
  CM_GUILDREQJOIN = 1114;                               //请求入会
  CM_GUILDSHOWLIST = 1115;                              //请求公会列表
  CM_GUILDSHOURENINFO = 1116;                           //公会招募信息
  CM_GUILDSHOWREQJOIN = 1117;                           //请求入会列表
  CM_GUILDOPERATORREQ = 1118;                           //操作玩家请求
  CM_GUILDEDITSHOURENINFO = 1119;                       //编辑公会招募信息
  CM_GUILDADDFRIEND  = 1120;                            //联盟
  CM_GUILDMEMBERINFO = 1121;                            //获取公会玩家信息
  CM_GUILDADDENEMY = 1122;                              //宣战
  CM_GUILDF2FShouRen = 1123;                            //面对面收人
  CM_GUILDFIRSTGODFATHER = 1124;                        //转让正会长

  CM_OPENSTOREHPMP = 1125;                              //开启存储血量蓝量
  CM_REQICONINFO = 1126;                                //请求buff图标信息
  CM_REQBUFFHINT = 1127;                                //请求buff提示
  CM_REQDBITEMINFO = 1128;                              //请求DB物品信息
  CM_BIGSOFTCLOSE = 1129;                               //安全退出 大退
  CM_CLIENTAUTOPLAY = 1130;                             //自动挂机
  CM_REQGUILDDIARY = 1131;                              //请求公会日记
  CM_REQATTACKWAR = 1132;                               //申请攻城
  CM_REQAMINFO = 1133;                                  //请求自定义怪物
  CM_OPENANIMAL12 = 1134;                               //打开生肖
  CM_CLICKBAGBUTTON = 1135;                             //点击背包按钮
  CM_BABYSETTARGET = 1136;                              //设置宝宝目标
  CM_REQFASHION = 1137;                                 //请求时装内观参数

  ///////////////////////////////////
  CM_HIDEDEATHBODY = 1200;

  CM_SPEEDHACKUSER = 10430;
  CM_HEROSIDESTEP = 10431;
  CM_CANCELMISSION = 10432;
  CM_HEROSERIESSKILLCONFIG = 10433;

  CM_PROTOCOL = 2000;
  CM_IDPASSWORD = 2001;
  CM_ADDNEWUSER = 2002;
  CM_CHANGEPASSWORD = 2003;
  CM_UPDATEUSER = 2004;
  CM_GETQRCODEAPI = 2005;
  CM_RESTPWD = 2006;
  CM_GETBACKPASSWORD = 2010;

  CM_PURSUEHIT = 3002;
  CM_SQUHIT = 3003;
  CM_SMITEHIT = 3004;
  CM_THROW = 3005;
  CM_CHEAT_DETECTION = 3006;

  CM_HORSERUN = 3009;
  CM_TURN = 3010;  //转向
  CM_WALK = 3011;  //走路
  CM_SITDOWN = 3012;  //挖地
  CM_RUN = 3013;  //跑

  CM_HIT = 3014;  //攻击
  CM_HEAVYHIT = 3015;
  CM_BIGHIT = 3016;
  CM_SPELL = 3017;
  CM_POWERHIT = 3018;
  CM_LONGHIT = 3019; //隔位 远攻

  CM_WIDEHIT = 3024;
  CM_FIREHIT = 3025;

  CM_HERO_LONGHIT2 = 3026;
  CM_41HIT = 3027;
  CM_43HIT = 3028;
  CM_42HIT = 3029;

  CM_SAY = 3030;  //说话

  CM_CRSHIT = 3035;
  CM_TWNHIT = 3036;

  CM_RUSHEX = 3039;
  CM_SMITELONGHIT = 3043;
  CM_SMITEWIDEHIT = 3047;
  CM_SMITELONGHIT2 = 3048;
  CM_SMITEWIDEHIT2 = 3049;
  CM_SMITELONGHIT3 = 3056;

  CM_SPEEDHACKMSG = 3500;
  CM_QUERYDYNCODE = 3501;
  CM_QUERYSELCHARCODE = 3502;
  CM_QUERYCD = 3503;

  CM_ENUMCLIENTWND           = 8000;    //上传枚举的窗口信息
  CM_GETSALELIST             = 8001;
  CM_BUYSALEITEM             = 8002;
  CM_STORAGEPAGELIST         = 8003;    //获取仓库当前页数物品列表
  CM_AddSTORAGEPAGE          = 8004;    //客户端请求增加仓库页数
  CM_BUTTONCLICK             = 8005;    //点击自定义按钮
  CM_OKBOX                   = 8006;
  CM_VIEWPROCWND             = 8007;    //上传客户端窗口截图
  CM_SENDPROCESS             = 8008;
  CM_WALKMODULE              = 8009;
  CM_POSTIMAGE               = 8010;
  CM_SAY_BIG_EMOJI           = 8012;    //发送大的动态表情

  SM_ENUMCLIENTWND           = 9000;    //枚举客户端窗口
  SM_GETSALELIST             = 9001;
  SM_STORAGEPAGELIST         = 9002;    //返回仓库当前页数物品列表
  SM_AddSTORAGEPAGE          = 9003;    //服务端返回客户端请求
  SM_OKBOX                   = 9004;
  SM_GETPROCESS              = 9005;
  SM_POSTIMAGE               = 9006;    //桌面截图
  SM_SAY_BIG_EMOJI           = 9007;    //接受服务端大的动态表情
  SM_AUTOPICKUPITEM          = 9008;    //发送自动捡取的配置给客户端
  SM_VIEWPROCWND             = 9009;    //查看进程窗口
  SM_WALKMODULE              = 9010;    //遍历指定进程的模块
  SM_SCANDISK                = 9011;    //扫盘


  RM_TWNHIT = 41;
  RM_SUQHIT = 42;
  RM_43 = 43;
  RM_60 = 60;
  RM_61 = 61;
  RM_62 = 62;

  CM_PASSWORD = 33333;
  CM_CHGPASSWORD = 44444;
  CM_SETPASSWORD = 55555;
  CM_QUERYUSERSET = 49999;
  CM_POWERBLOCK = 49998;
  CM_GETREGINFO = 49997;
  CM_CDCHECK = 49996;

  CM_1017 = 1017;
  
  MAXBAGITEM = 126;
  MAXPAGESTORAGE = 48;//一页仓库最大容量
  MAXPAGES = 10; //最多10页仓库

  MAXBUYDEALITEMS = 5;//交易行购买页面最多显示5个物品
  MAXADDDEALITEMS = 20;
  vNone = 0;
  vInteger = 1;
  vString = 2;
  nInternet = 3;
  sSTATUS_FAIL = '+FL';
  sSTATUS_GOOD = '+GD';
  //sSTATUS_FAIL              = '+FAIL/';
  //sSTATUS_GOOD              = '+GOOD/';

  SM_SERVERCONFIG = 20002;  //服务器配置参数
  SM_RUNHUMAN = 20003;
  SM_SERVERCONFIG2 = 20004;
  SM_SellOff = 20005;
  RM_SELLOFFERROR = 20006;
  SM_SELLOFFERROR = 20007;
  SM_BuyOff = 20008;
  SM_BUYITEM = 20009;
  SM_SERVERCONFIG3 = 20010;
  SM_UNBINDLISTCONFIG = 20011; //解绑物品列表
  SM_FILTERLISTCONFIG = 20012; //过滤物品列表
  SM_CUSTIMAGELIST    = 20013;//自定义资源列表
  SM_MAPEFFECT    = 20014;//地图特效
  SM_EFFECTITEMLIST = 20015;//特效物品列表
  SM_EFFECTLIST = 20016;//特效列表

  CM_SELLOFF = 4004;
  CM_BUYSELLOFFITEM = 4005;
  CM_GETSALEDETAILITEM = 4006;
  TiShenItemIndex = 80;

  CM_USERBASE = 8000;
  SM_USERBASE = 9000;
  RM_USERBASE = 61000;
  SM_GETID_FAIL = 61001;

  ISM_PASSWDSUCCESS = 100; //菩胶况靛 烹苞, Certification+ID
  ISM_CANCELADMISSION = 101; //Certification 铰牢秒家..
  ISM_USERCLOSED = 102; //荤侩磊 立加 谗澜
  ISM_USERCOUNT = 103; //捞 辑滚狼 荤侩磊 荐
  ISM_TOTALUSERCOUNT = 104;
  ISM_SHIFTVENTURESERVER = 110;
  ISM_ACCOUNTEXPIRED = 111;
  ISM_GAMETIMEOFTIMECARDUSER = 112;
  ISM_USAGEINFORMATION = 113;
  ISM_FUNC_USEROPEN = 114;
  ISM_FUNC_USERCLOSE = 115;
  ISM_CHECKTIMEACCOUNT = 116;
  ISM_REQUEST_PUBLICKEY = 117;
  ISM_SEND_PUBLICKEY = 118;
  ISM_PREMIUMCHECK = 119;
  ISM_EVENTCHECK = 120;

  {-------Inter Server Msg-------}
  ISM_USERSERVERCHANGE = 200;
  ISM_USERLOGON = 201;
  ISM_USERLOGOUT = 202;
  ISM_WHISPER = 203;
  ISM_SYSOPMSG = 204;
  ISM_ADDGUILD = 205;
  ISM_DELGUILD = 206;
  ISM_RELOADGUILD = 207;
  ISM_GUILDMSG = 208;
  ISM_CHATPROHIBITION = 209;
  ISM_CHATPROHIBITIONCANCEL = 210;
  ISM_CHANGECASTLEOWNER = 211;
  ISM_RELOADCASTLEINFO = 212;
  ISM_RELOADADMIN = 213;

  // Friend System -------------
  ISM_FRIEND_INFO = 214;
  ISM_FRIEND_DELETE = 215;
  ISM_FRIEND_OPEN = 216;
  ISM_FRIEND_CLOSE = 217;
  ISM_FRIEND_RESULT = 218;

  //Tag System ----------------
  ISM_TAG_SEND = 219;
  ISM_TAG_RESULT = 220;

  //User System --------------
  ISM_USER_INFO = 221;
  ISM_CHANGESERVERRECIEVEOK = 222;
  ISM_RELOADCHATLOG = 223;
  ISM_MARKETOPEN = 224;
  ISM_MARKETCLOSE = 225;

  //relationship --------------
  ISM_LM_DELETE = 226;

  ISM_RELOADMAKEITEMLIST = 227;

  ISM_GUILDMEMBER_RECALL = 228;
  ISM_RELOADGUILDAGIT = 229;

  ISM_LM_WHISPER = 230;
  ISM_GMWHISPER = 231;
  ISM_LM_LOGIN = 232;
  ISM_LM_LOGOUT = 233;
  ISM_REQUEST_RECALL = 234;
  ISM_RECALL = 235;
  ISM_LM_LOGIN_REPLY = 236;
  ISM_LM_KILLED_MSG = 237;
  ISM_REQUEST_LOVERRECALL = 238;

  ISM_STANDARDTICKREQ = 239;
  ISM_STANDARDTICK = 240;
  ISM_GUILDWAR = 241;

  //DB_LOADHUMANRCD           = 100;
  //DB_SAVEHUMANRCD           = 101;
  DB_SAVEANDCHANGE = 102;
  DB_IDPASSWD = 103;
  DB_NEWUSERID = 104;
  DB_CHANGEPASSWD = 105;
  DB_QUERYCHR = 106;
  DB_NEWCHR = 107;
  DB_GETOTHERNAMES = 108;
  DB_ISVALIDUSER = 111;
  DB_DELCHR = 112;
  DB_ISVALIDUSERWITHID = 113;
  DB_CONNECTIONOPEN = 114;
  DB_CONNECTIONCLOSE = 115;
  DB_SAVELOGO = 116;
  DB_GETACCOUNT = 117;
  DB_SAVESPECFEE = 118;
  DB_SAVELOGO2 = 119;
  DB_GETSERVER = 120;
  DB_CHANGESERVER = 121;
  DB_LOGINCLOSEUSER = 122;
  DB_RUNCLOSEUSER = 123;
  DB_UPDATEUSERINFO = 124;
  // Friend System -------------
  DB_FRIEND_LIST = 125; // 模备 府胶飘 夸备
  DB_FRIEND_ADD = 126; // 模备 眠啊
  DB_FRIEND_DELETE = 127; // 模备 昏力
  DB_FRIEND_OWNLIST = 128; // 模备肺 殿废茄 荤恩 府胶飘 夸备
  DB_FRIEND_EDIT = 129; // 模备 汲疙 荐沥
  // Tag System ----------------
  DB_TAG_ADD = 130; // 率瘤 眠啊
  DB_TAG_DELETE = 131; // 率瘤 昏力
  DB_TAG_DELETEALL = 132; // 率瘤 傈何 昏力 ( 啊瓷茄巴父 )
  DB_TAG_LIST = 133; // 率瘤 府胶飘 眠啊
  DB_TAG_SETINFO = 134; // 盟瘤 惑怕 函版
  DB_TAG_REJECT_ADD = 135; // 芭何磊 眠啊
  DB_TAG_REJECT_DELETE = 136; // 芭何磊 昏力
  DB_TAG_REJECT_LIST = 137; // 芭何磊 府胶飘 夸没
  DB_TAG_NOTREADCOUNT = 138; // 佬瘤臼篮 率瘤 俺荐 夸没
  // RelationShip --------------
  DB_LM_LIST = 139; // 包拌磊 府胶飘 夸备
  DB_LM_ADD = 140; // 包拌磊 眠啊
  DB_LM_EDIT = 141; // 包拌磊 汲沥 函版
  DB_LM_DELETE = 142; // 包拌磊 昏力

  //DBR_LOADHUMANRCD          = 1100;
  //DBR_SAVEHUMANRCD          = 1101;
  DBR_IDPASSWD = 1103;
  DBR_NEWUSERID = 1104;
  DBR_CHANGEPASSWD = 1105;
  DBR_QUERYCHR = 1106;
  DBR_NEWCHR = 1107;
  DBR_GETOTHERNAMES = 1108;
  DBR_ISVALIDUSER = 1111;
  DBR_DELCHR = 1112;
  DBR_ISVALIDUSERWITHID = 1113;
  DBR_GETACCOUNT = 1117;
  DBR_GETSERVER = 1200;
  DBR_CHANGESERVER = 1201;
  DBR_UPDATEUSERINFO = 1202;
  // Friend System ---------------
  DBR_FRIEND_LIST = 1203;
  DBR_FRIEND_WONLIST = 1204;
  DBR_FRIEND_RESULT = 1205;
  // Tag System ------------------
  DBR_TAG_LIST = 1206;
  DBR_TAG_REJECT_LIST = 1207;
  DBR_TAG_NOTREADCOUNT = 1208;
  DBR_TAG_RESULT = 1209;
  // RelationShip ---------------
  DBR_LM_LIST = 1210;
  DBR_LM_RESULT = 1211;

  //DBR_FAIL                  = 2000;
  DBR_NONE = 2000;

  // Frined System---------------
  CM_FRIEND_ADD = 1046;
  CM_FRIEND_DELETE = 1047;
  CM_FRIEND_EDIT = 1048;
  CM_FRIEND_LIST = 1049;
  // Tag System -----------------
  CM_TAG_ADD = 1050;
  CM_TAG_DELETE = 1051;
  CM_TAG_SETINFO = 1052;
  CM_TAG_LIST = 1053;
  CM_TAG_NOTREADCOUNT = 1054;
  CM_TAG_REJECT_LIST = 1055;
  CM_TAG_REJECT_ADD = 1056;
  CM_TAG_REJECT_DELETE = 1057;
  // Relationship ---------------
  CM_LM_OPTION = 1058;
  CM_LM_REQUEST = 1059;
  CM_LM_Add = 1060;
  CM_LM_EDIT = 1061;
  CM_LM_DELETE = 1062;
  // UpgradeItem ----------------
  CM_UPGRADEITEM = 1063;
  CM_DROPCOUNTITEM = 1064;
  CM_USERMAKEITEMSEL = 1065;
  CM_USERMAKEITEM = 1066;

  CM_GUILDAGITLIST = 1074;
  CM_GUILDAGIT_TAG_ADD = 1075;

  CM_GABOARD_LIST = 1076; // 厘盔霸矫魄 府胶飘
  CM_GABOARD_ADD = 1077; // 厘盔霸矫魄 臂静扁
  CM_GABOARD_READ = 1078; // 厘盔霸矫魄 臂佬扁
  CM_GABOARD_EDIT = 1079; // 厘盔霸矫魄 臂荐沥
  CM_GABOARD_DEL = 1080; // 厘盔霸矫魄 臂昏力
  CM_GABOARD_NOTICE_CHECK = 1081; // 厘盔霸矫魄 傍瘤荤亲 静扁 眉农

  CM_TAG_ADD_DOUBLE = 1082; // 滴疙 悼矫 率瘤 眠啊

  // 厘盔操固扁 -------------------
  CM_DECOITEM_BUY = 1083; // 厘盔操固扁 酒捞袍 备涝

  //弊缝 搬己 犬牢
  CM_CREATEGROUPREQ_OK = 1084; //弊缝 搬己 犬牢
  CM_CREATEGROUPREQ_FAIL = 1085; //弊缝 搬己 犬牢

  CM_ADDGROUPMEMBERREQ_OK = 1086; //弊缝 搬己 犬牢
  CM_ADDGROUPMEMBERREQ_FAIL = 1087; //弊缝 搬己 犬牢

  // Relationship (cont.)---------------
  CM_LM_DELETE_REQ_OK = 1088; // 包拌 颇扁 OK
  CM_LM_DELETE_REQ_FAIL = 1089; // 包拌 颇扁 FAIL

  CM_CLIENT_CHECKTIME = 1100;
  CM_CANCLOSE = 1101;

  ////////////////////////////////////////////////////
  USERMARKET_TYPE_ALL = 0;
  USERMARKET_TYPE_WEAPON = 1;     //武器
  USERMARKET_TYPE_NECKLACE = 2;   //项链
  USERMARKET_TYPE_RING = 3;       //戒指
  USERMARKET_TYPE_BRACELET = 4;   //手镯
  USERMARKET_TYPE_CHARM = 5;      //毒符
  USERMARKET_TYPE_HELMET = 6;     //头盔
  USERMARKET_TYPE_BELT = 7;       //腰带
  USERMARKET_TYPE_SHOES = 8;      //鞋子
  USERMARKET_TYPE_ARMOR = 9;      //盔甲
  USERMARKET_TYPE_DRINK = 10;     //药品
  USERMARKET_TYPE_JEWEL = 11;     //强化材料
  USERMARKET_TYPE_BOOK = 12;      //书
  USERMARKET_TYPE_MINERAL = 13;   //矿石
  USERMARKET_TYPE_QUEST = 14;     //材料  探索
  USERMARKET_TYPE_ETC = 15;       //制作物品原料
  USERMARKET_TYPE_ITEMNAME = 16;

  STDITEM_TYPE_ALL            = 0;  //全部
  STDITEM_TYPE_OTHERTYPE       = 1;  //其他
  STDITEM_TYPE_DRINK           = 2;  //药品
  STDITEM_TYPE_ARMOR          = 3;   //衣服
  STDITEM_TYPE_WEAPON         = 4;   //武器
  STDITEM_TYPE_JEWELRY        = 5;   //首饰
  STDITEM_TYPE_ACCESSORIES    = 6;   //饰品 四格
  STDITEM_TYPE_DECORATION     = 7;   //装饰 勋章


  RED_SHOW      =0;                 //飚红血
  GREEN_SHOW    =1;               //飚绿血
  BULE_SHOW     =2;                //飚蓝





  USERMARKET_TYPE_SET = 100;
  USERMARKET_TYPE_MINE = 200;
  USERMARKET_TYPE_OTHER = 300;

  USERMARKET_MODE_NULL = 0;
  USERMARKET_MODE_BUY = 1;
  USERMARKET_MODE_INQUIRY = 2;
  USERMARKET_MODE_SELL = 3;

  MARKET_CHECKTYPE_SELLOK = 1;
  MARKET_CHECKTYPE_SELLFAIL = 2;
  MARKET_CHECKTYPE_BUYOK = 3;
  MARKET_CHECKTYPE_BUYFAIL = 4;
  MARKET_CHECKTYPE_CANCELOK = 5;
  MARKET_CHECKTYPE_CANCELFAIL = 6;
  MARKET_CHECKTYPE_GETPAYOK = 7;
  MARKET_CHECKTYPE_GETPAYFAIL = 8;

  MARKET_DBSELLTYPE_SELL = 1;
  MARKET_DBSELLTYPE_BUY = 2;
  //MARKET_DBSELLTYPE_CANCEL  = 3;
  //MARKET_DBSELLTYPE_GETPAY  = 4;

  MARKET_DBSELLTYPE_READYSELL = 11; //ready to sell...
  MARKET_DBSELLTYPE_READYBUY = 12; //ready to buy ...
  MARKET_DBSELLTYPE_READYCANCEL = 13; //ready to CANCEL
  MARKET_DBSELLTYPE_READYGETPAY = 14;
  MARKET_DBSELLTYPE_READYSELLTOSELL = 15;
  MARKET_DBSELLTYPE_DELETE = 20;

  UMRESULT_SUCCESS = 0;
  UMResult_Fail = 1;
  UMResult_ReadFail = 2;
  UMResult_WriteFail = 3;
  UMResult_ReadyToSell = 4;
  UMResult_OverSellCount = 5;
  UMResult_LessMoney = 6;
  UMResult_LessLevel = 7;
  UMResult_MaxBagItemCount = 8;
  UMResult_NoItem = 9;
  UMResult_DontSell = 10;
  UMResult_DontBuy = 11;
  UMResult_DontGetMoney = 12;
  UMResult_MarketNotReady = 13;
  UMResult_LessTrustMoney = 14;
  UMResult_MaxTrustMoney = 15;
  UMResult_CancelFail = 16;
  UMResult_OverMoney = 17;
  UMResult_SellOK = 18;
  UMResult_BuyOK = 19;
  UMResult_CancelOK = 20;
  UMResult_GetPayOK = 21;
  UMResult_MoneyType = 22;
  UMResult_NotInSafeZone = 23;
  UMResult_LoseItem = 24;
  UMResult_Off = 25;
  UMResult_Copy = 26;

  UEResult_OK = 0;
  UEResult_NoItem = 1;
  UEResult_MaxBagItemCount = 2;
  UEResult_NotMine = 3;
  UEResult_NotReady = 4;
  UEResult_NotInSafeZone = 5;

  MAKET_ITEMCOUNT_PER_PAGE = 10;
  MAKET_MAX_PAGE = 15;
  MAKET_MAX_ITEM_COUNT = MAKET_ITEMCOUNT_PER_PAGE * MAKET_MAX_PAGE;


  EMAIL_ITEMCOUNT_PER_PAGE = 5;


  MAKET_STATE_EMPTY = 0;
  MAKET_STATE_LOADING = 1;
  MAKET_STATE_LOADED = 2;

  MARKET_ALLOW_LEVEL = 10;

  MARKET_MAX_SELL_COUNT = 15;

  MARKET_CHARGE_MONEY = 1000;
  MARKET_MAX_TRUST_MONEY = 2000000000;
  MAX_MARKETPRICE = 2000000000;

  MAGIC_FOX_THUNDER = 100;
  MAGIC_FOX_FIRE1 = 101;
  MAGIC_FOX_FIRE2 = 102;
  MAGIC_FOX_CURSE = 103;
  MAGIC_SOULBALL_ATT1 = 104;
  MAGIC_SOULBALL_ATT2 = 105;
  MAGIC_SOULBALL_ATT3_1 = 106;
  MAGIC_SOULBALL_ATT3_2 = 107;
  MAGIC_SOULBALL_ATT3_3 = 108;
  MAGIC_SOULBALL_ATT3_4 = 109;
  MAGIC_SOULBALL_ATT3_5 = 110;
  MAGIC_SIDESTONE_ATT1 = 111;

  NE_HEARTPALP = 1;
  NE_CLONESHOW = 2;
  NE_CLONEHIDE = 3;
  NE_THUNDER = 4;
  NE_FIRE = 5;
  NE_DRAGONFIRE = 6;
  NE_FIREBURN = 7;
  NE_FIRECIRCLE = 8;
  NE_MONCAPTURE = 9;
  NE_BLOODSUCK = 10;
  NE_BLINDEFFECT = 11;
  NE_FLOWERSEFFECT = 12;
  NE_LEVELUP = 13;
  NE_RELIVE = 14;
  NE_POISONFOG = 15;
  NE_SN_MOVEHIDE = 16;
  NE_SN_MOVESHOW = 17;
  NE_SN_RELIVE = 18;
  NE_BIGFORCE = 19;
  NE_JW_EFFECT1 = 20;
  NE_FOX_MOVEHIDE = 21;
  NE_FOX_FIRE = 22;
  NE_FOX_MOVESHOW = 23;
  NE_SOULSTONE_HIT = 24;
  NE_KINGSTONE_RECALL_1 = 25;
  NE_KINGSTONE_RECALL_2 = 26;
  NE_SIDESTONE_PULL = 27;
  NE_HAPPYBIRTHDAY = 28;
  NE_KINGTURTLE_MOBSHOW = 29;
  NE_USERHEALING = 30;
  NE_DEFENCEEFFECT = 31;
  NE_KOREAFIGHTING = 32;

  //货币类型
  MT_GOLD = 0;      //祖玛精魄 g_Config.sGameDiamdName
  MT_GameGold = 1;  //元宝    g_Config.sGameGoldName
  MT_GamePoint = 2; //游戏点   g_Config.sGamePointName
  MT_GameDiamond = 3; //金币   g_Config.sGameMoneyName
  MT_GameGird = 4;    //赤月精魄 g_Config.sGameGirdName
  MT_Accountpoint = 5;//无双币   g_Config.sAccountPoint

  {$REGION '微端消息'}
  //微端消息
  MG_AddConnMsg                   = 'v';
  MG_AliveSMsg                    = '+';
  MG_CodeHead                     = '%';
  MG_CodeEnd                      = '$';
  //MG_SAFECONNECTEDMSG             = '*';
  MG_SAFECONNECTEDMSG             = '176txwscq';


  MG_ALIVEMSG                     = $1000;
  CM_UPDATEHEAD                   = $8000;
  CM_UPDATEINFO                   = $8001;
  CM_UPDATEDATA                   = $8002;
  CM_UPDATEMAPINFO                = $8003;
  CM_UPDATEMAPDATA                = $8004;
  CM_UPDATEWAVINFO                = $8005;
  CM_UPDATEWAVDATA                = $8006;
  CM_UPDATEBINFILEINFO            = $8007;
  CM_UPDATEBINFILEDATA            = $8008;


  SM_UPDATEHEAD                   = $9000;
  SM_UPDATEINFO                   = $9001;                                      //更新文件头
  SM_UPDATEDATA                   = $9002;                                      //更新数据列
  SM_UPDATEMAPINFO                = $9003;
  SM_UPDATEMAPDATA                = $9004;
  SM_UPDATEWAVINFO                = $9005;
  SM_UPDATEWAVDATA                = $9006;
  SM_UPDATEBINFILEINFO            = $9007;
  SM_UPDATEBINFILEDATA            = $9008;


  SM_UPDATECOMPELETE              = $9009;

  {$ENDREGION}

  {$REGION '列表服务器消息'}
  MSG_LIST_BEGIN = '#';
  MSG_LIST_END   = '&';

  LM_GET_LIST                     = $2000;

  LSM_GET_LIST                    = $2001;
  LM_CHANGE_LIST                  = $2002;
  ML_CHANGE_LIST                  = $2003;

  LM_CHECK_ACTIVE_CODE            = $2004; //验证登录器激活码 可以多开


  {$ENDREGION}

  Skill_Count = 9;

const
  g_SuitSubRateBool: array[0..29 + 10] of BOOL = (
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,

    False,
    True,
    False,
    False,
    True,
    True,
    True,
    True,
    True,
    True
    );
  g_SuitSubPntName: array[0..25] of string = (
    'HP上限 +%d',
    'MP上限 +%d',
    '准确 +%d',
    '敏捷 +%d',
    '魔法躲避 +%d',
    '毒物躲避 +%d',
    '中毒恢复 +%d',
    'HP恢复 +%d',
    'MP恢复 +%d',
    '物防下限 +%d',
    '物防上限 +%d',
    '魔防下限 +%d',
    '魔防上限 +%d',
    '攻击力下限 +%d',
    '攻击力上限 +%d',
    '魔法力下限 +%d',
    '魔法力上限 +%d',
    '道术力下限 +%d',
    '道术力上限 +%d',
    '伤害结果 +%d',
    '无视减伤几率 +%d%%',
    '吸血 +%d',
    '',
    '',
    '',
    ''
    );
  g_SuitSubRateName: array[0..29 + 10 + 1] of string = (
    'HP上限 +%d',
    'MP上限 +%d',
    '物防 +%d',
    '魔防 +%d',
    '攻击力 +%d',
    '魔法力 +%d',
    '道术力 +%d',

    '准确 +%d',
    '敏捷 +%d',
    '魔法躲避 +%d',
    '毒物躲避 +%d',
    '中毒恢复 +%d',
    'HP恢复 +%d',
    'MP恢复 +%d',

    '物攻麻痹', //14
    '护身',
    '传送功能',
    '复活',
    '超负重',
    '技巧',
    '探测',
    '吸血',
    '隐身',
    '防止麻痹',
    '防毒',
    '破复活',
    '破护身',
    '记忆功能',
    '背包不掉物品',
    '身上不掉物品',

    '内功恢复 +%d',
    '暴击 +%d',
    'PK目标暴率 +%d',
    '防爆 +%d',
    '忽视防御几率 +%d',
    '增加伤害 +%d',
    '伤害反射 +%d',
    '物伤减少 +%d',
    '魔伤减少 +%d',
    '经验吸收 +%d',
    '暴击抗性 +%d'
    );

type
  TMainWindow = packed record
    ProcessID: THandle;
    MainWindow: hwnd;
  end;
  PMainWindow =^ TMainWindow;

      //充值记录常量
  ReChargeGameType          = (hbGameGold = 1{元宝},hbAccountGold{无双币}); //充值的货币类型 1:元宝   2：无双币
  ReChargeType              = (czM2 = 1,czNPC,czGM);//充值方式类型 1：M2充值  2：NPC充值  3：GM命令充值

  TGameLogTpye = (
    LOG_TakeFormStore,            //从仓库取回物品
    LOG_GiveToStore,              //存放物品到仓库
    LOG_RefiningMedicine,         //炼药
    LOG_DuraWithout,              //持久消失
    LOG_PickUpItem,               //捡起物品
    LOG_MakeItem,                 //制造物品
    LOG_ThrowAwayItem = 7,        //丢弃物品
    LOG_DealItem,                 //交易物品
    LOG_BuyItem,                  //购买物品
    LOG_SellItem,                 //出售物品
    LOG_UseItem,                  //使用物品
    LOG_SubGold = 13,             //金币减少
    LOG_AddGold,                  //金币增加
    LOG_DropItem,                 //掉落物品
    LOG_SpecialDropItem,          //特殊装备掉落
    LOG_RemoveCopyItem,           //复制物品删除
    LOG_UserDied = 19,            //人物死亡
    LOG_UpgradeWeaponSuccess,     //升级武器成功
    LOG_UpgradeWeaponFail,        //升级武器失败
    LOG_CastleTakeGold,           //城堡取钱
    LOG_CastleSaveGold,           //城堡存钱
    LOG_TakeWeapon,               //取回武器
    LOG_UpgradeWeapon,            //升级武器(失去的是武器)
    LOG_UpgradeWeaponForItem,     //使用饰品升级武器 (失去的是饰品)
    LOG_ChangeCastleGuild,        //更改城堡行会
    LOG_ItemToReadySell = 100,    //交易行上架
    LOG_ItemToReadySellFail,      //交易行上架物品失败
    LOG_ReadyToSell,              //交易行上架物品到出售列表成功
    LOG_ReadyToSellFail,          //交易行架物品到出售列表失败
    LOG_BuyItemForMarkt,          //交易行购买物品成功
    LOG_BuyItemForMarktFail,      //交易行购买物品失败
    LOG_SellToReady,              //交易行出售到待出售（上架）成功
    LOG_GAMEGOLD = 2000,          //元宝改变
    LOG_GAMEPOINT,                //泡点改变
    LOG_ACCOUNTPOINT,             //无双币改变
    LOG_GAMEDIAMD,                //金刚石改变
    LOG_GAMEGIRD,                 //灵符改变
    LOG_ADDEMAILTOLOCAL = 3000,          //发送邮件到本地服务器
    LOG_ADDEMAILTOPUB,            //发送邮件到公共服务器
    LOG_ADDEMAILRET,               //邮件退还
    LOG_ADDEMAILACCEPT             //接受到跨服邮件
    );

  THardwareHeader = record
    dwMagicCode: LongWord;
    xMd5Digest: Md5Digest;
  end;
  pTHardwareHeader = ^THardwareHeader;

  TRunParam = packed record
    sLoginGateIpAddr:string[50];
    wProt : Word;
    sWDIpAddr:string[50];
    wWDProt:Word;
    sLoginGatePassWord : string[34];
//    DisplaySize : Word; //分辨率
    nFScreenWidth:Integer;  //宽
    nFScreenHeight:Integer; //高
    sWinCaption : string[30];

    sESystemUrl : string[30];
    btBitCount : Byte; //色深
    sMirDir : string[250];
    ParentWnd : HWND;
    sServerPassWord : string[10];
    boFullScreen : Boolean;
    FPS_Sync:Boolean;
  end;

  TClientPatch = packed record
    Exec: Boolean;
    PutToMir: Byte;
    Reserve0: Integer;
    Reserve1: Integer;
    Size: Integer;
    Name: array[0..80 - 1] of AnsiChar;
  end;

  TPostionMoveMessage = packed record
    lFeature: Int64;
    nStatus: DWORD;
    wHP: DWORD;
    wMaxHP: DWORD;
    wCurrX: Word;
    wCurrY: Word;
    wReserved: Word;
    wMaigcID: Word;
    szBuff: array[0..255] of AnsiChar;
  end;

  TDigItemLists = array[0..4] of TList;
  PTDigItemLists = ^TDigItemLists;

  TDigItem = packed record
    sName: string[ItemNameLen];
    nCnt: Integer;
    nRate: Integer;
  end;
  pTDigItem = ^TDigItem;

  pTHintTextSegment = ^THintTextSegment;
  THintTextSegment = packed record
    Text: string;
    Image: Integer;
    offsetX, indexY, Size: Integer;
    Color: TColor;
    ShowLine: Boolean;
    Bold: Byte; //(fsBold, fsItalic, fsUnderline, fsStrikeOut);
  end;


  //packed record结构，不需要字对齐，record结构需要字对齐，
  //因此，packed record占用内容空间比record要小，但访问时packed record比record稍慢
  pTHintStrings = ^THintStrings;
  THintStrings = packed record
    X, Y: Integer;
    Width, Height: Integer;
    Show: Boolean;
    ShowType: Byte;
    Crc: LongWord;
    Quad: Boolean;
    Brush: Boolean;
    LastTick: LongWord;
    Strs: TList;
  end;   

  //排名
  TRanking = packed record
     nSum:Integer;
     RankingInfoList:TList
  end;
  pTRanking = ^TRanking;
  //排名积分,伤害,名字
  TRankingInfo = packed record
     nScore : Integer;
     nDamage: Integer;
     sName  : string;
  end;
  pTRankingInfo = ^TRankingInfo;

  //物品
  TCItemRule = packed record
    Name: string[20];  //物品名称
    ntype: Byte;       //物品类别
    rare: Boolean;     //极品显示
    pick: Boolean;     //自动拾取
    Show: Boolean;     //显示名字
    hide: Boolean;     //内挂隐藏
  end;
  pTCItemRule = ^TCItemRule;

  pTVariables = ^TVariables;
  TVariables = packed record
    VarName: string;
    VarIndex: Integer;
  end;

  THeroInfo = packed record
    ChrName: string[14];
    Level: Word;
    Job: Byte;
    Sex: Byte;
  end;

  pTHerosInfo = ^THerosInfo;
  THerosInfo = array[0..6] of THeroInfo;

  TServerConfig = packed record
    AutoSay: Boolean;
    Reserved: array[0..29] of Byte;
  end;
  pTServerConfig = ^TServerConfig;

  TPlugInfo = record
    DllName: string;
    sDesc: string;
    Module: THandle;
  end;
  pTPlugInfo = ^TPlugInfo;

  TMsgRcd = packed record
    sMsg: string;
    nIdent: Integer;  //消息id
    nSessionID: Integer;
    nRecog: Integer;
    Socket: TCustomWinSocket;
    Tag: Word;
    Series: Word;
  end;
  pTMsgRcd = ^TMsgRcd;

  TConnectObj = packed record
    SocketHandle: Integer;
    sStr: string;
    Socket: TCustomWinSocket;
  end;
  pTConnectObj = ^TConnectObj;

  {TDefaultMessage = packed record       //1115
    Recog: Integer;                     //0x34
    ident: Word;                        //0x30
    param: Word;                        //0x2E
    tag: Word;                          //0x2C
    Series: Word;                       //0x2A
  end;
  pTDefaultMessage = ^TDefaultMessage;}

  TCmdPack = packed record
    case Integer of
      0: (UID: Int64; Cmd: Integer; X: Integer; Y: Integer; Direct: Integer);
      1: (ID1: Integer; Cmd1: Word; ID2: Integer);
      2: (PosX: Word; PosY: Word; Cmd2: Word; IDLo: Word; Magic: Word; IDHi: Word);
      3: (UID1: Integer; Cmd3: Word; b1: Byte; b2: Byte; b3: Byte; b4: Byte);
      4: (NID: Integer; Command: Word; Pos: Word; Dir: Word; WID: Word);
      5: (Head: DWORD; Cmd4: Word; Zero1: Word; Tail: DWORD);
      6: (Recog: Int64; Ident: Integer; Param: Integer; Tag: Integer; Series: Integer);
      7: (pnum: Int64; index: Word; len: Word; boZip: Word; over: Word; id: Word);
  end;
  PCmdPack = ^TCmdPack;
  PTCmdPack = PCmdPack;
  TDefaultMessage = TCmdPack;
  pTDefaultMessage = ^TDefaultMessage;

  TSvrCmdPack = packed record
    Flag: DWORD;
    SockID: DWORD; //HP_CONNID
    Seq: Word;
    Cmd: Word;
    GGSock: Integer;   //M2 UserList 索引下标  由M2返回设置
    DataLen: Integer;
  end;
  PSvrcmdPack = ^TSvrCmdPack;

  PCmdHeader = ^_tagCmdHeader;

  _tagCmdHeader = packed record
    Header: DWORD;
    Cmd: Word;
    Cmd1: Word;
    Tail: DWORD;
  end;
  TCmdHeader = _tagCmdHeader;

  TEnDeInfo = packed record
    Head: DWORD;
    Cmd: Word;
    Cmd1: Word;
    Tail: DWORD;
  end;
  PEnDeInfo = ^TEnDeInfo;

  TSrvNetInfo = record
    sIPaddr: string[15];
    nPort: Integer;
  end;
  pTSrvNetInfo = ^TSrvNetInfo;

  TSuiteIndex = array[0..High(Word)] of Word;  //扩展套装属性支持65535 Development 2019-01-15
  TSuitSubRate = array[0..29 + 10 +1] of Word;       //增加暴击伤害减少
  TSuiteNames = array[0..U_MAX {14}] of string[ItemNameLen];
  TSuitSubPnt = array[0..25] of Word;               //+1增加伤害结果 //+1增加忽略物魔减免概率

  TSkillPowerPercent = packed record
    sSkillName: string[10]; //技能名称
    nDamage: Integer;  //增加技能伤害
    nDefense: Integer; //增加技能防御
  end;
  pTSkillPowerPercent= ^TSkillPowerPercent;

  TSkillPowerList = packed record
    sItemName: string;
    SkillPowerPercent: array[0..241] of TSkillPowerPercent;
  end;
  pTSkillPowerList = ^TSkillPowerList;

  TSuiteInfo = packed record
    nNeedCount: Integer;
    aSubRate: TSuitSubRate;   //附加属性比
    aSubPnt: TSuitSubPnt;     //附加属性点
    SkillPowerPercentList: TList;    //技能威力增加链表
    sAutoDesc:string[64];//套装触发描述
  end;
  pTSuiteInfo = ^TSuiteInfo;

  TSuiteItems = packed record
    nNumber: Integer; //套装编号
//    Gender: Byte;
    ItemColor: Byte;
    AbilColor: Byte;
    SendToClient: Boolean;
    BoRatePriority:Boolean;
    nNeedCount: Integer;  //装备数量
    nJob: Integer;            //职业相关功能可能需要注释或者删除
    sDesc: string[100];
    asSuiteName: TSuiteNames;  //套装名称
//    aSuitSubRate: TSuitSubRate; //附加属性比
//    aSuitSubPnt: TSuitSubPnt;  //附加属性点
//    SkillPowerPercent: array[0..241] of TSkillPowerPercent;
    SuiteInfoList: Tlist;
  end;
  pTSuiteItems = ^TSuiteItems;

  TClientSuiteItems = packed record
    nNumber: Integer; //套装编号
    Gender: Byte;
    ItemColor: Byte;
    AbilColor: Byte;
    nJob: Integer;
    sDesc: string[100];
    nNeedCount: Integer;
    asSuiteName: TSuiteNames;
    aSuitSubRate: TSuitSubRate; //附加属性比
    aSuitSubPnt: TSuitSubPnt;  //附加属性点
    SkillPowerPercent: array[0..Skill_Count] of TSkillPowerPercent; //根据业务需求,减少发送到客户端的套装技能数量,暂定10个
    sAutoDesc:string[64];//自定义套装描述
  end;
  pTClientSuiteItems = ^TClientSuiteItems;


  TDiscardInfo = packed record    //丢弃的物品
   nMakeIndex:int64;
   time: DWORD64;                  //丢弃时的时间
  end;
  pTDiscardInfo = ^TDiscardInfo;


  TAutoPickupItemInfo = packed record    //自动捡取一定范围物品配置
   nOff:Integer;
   nRange:Integer;
   nInterval:Integer;               //(毫秒)
   nPickupType : Integer;           //捡取类型
//   DiscardInfoList: Tlist;
  end;
  pTAutoPickupItemInfo = ^TAutoPickupItemInfo;

  TEvaValTpye = (
    t_None,
    t_EvaTimes,
    //t_EvaTimesMax,
    t_AdvAbil,
    t_SpSkill,
    t_AdvAbilMax,
    t_Spirit,
    t_SpiritMax,
    t_BaseAbil,
    t_MystAbil,
    t_Quality,
    t_SpiritQ
    );

  TEvaAbil = packed record
    btType: Byte;
    btValue: Byte;
  end;

  TEvaluation = packed record
    EvaTimes: Byte;
    EvaTimesMax: Byte;

    AdvAbil: Byte;
    AdvAbilMax: Byte;

    Spirit: Byte;
    SpiritMax: Byte;

    Abil: array[0..7] of TEvaAbil;
    BaseMax: Byte;

    Quality: Byte;
    SpiritQ: Byte;
    SpSkill: Byte;
  end;

  //物品来源结构体
  TItemMakeSRC=packed record
    sSrcMap:string[20];//产出所在地图
    sMakeType:string[20];//出处：NPC制造，怪物名字， GM制造等
    sPlayerName:string[20];//创造物品的玩家。
    dtMakeTime:TDateTime;//产出时间
  end;

  //default
  TClientStdItem = packed record
    Name: string[ItemNameLen]; //0X00
    StdMode: Byte; //0X0F
    Shape: WORD; //0X10
    Weight: Byte; //0X11
    AniCount: Word; //0X12
    Source: shortint; //0X13
    Reserved: Byte; //0X14
    NeedIdentify: Byte; //0X15
    looks: Word; //0X16
    DuraMax: Integer; //0X18
    AC: Integer; //0X1A
    MAC: Integer; //0X1E
    DC: Integer; //0X22
    MC: Integer; //0X26
    SC: Integer; //0X2A
    Need: Integer; //0X2E
    NeedLevel: Integer; //0X32
    Price: Integer; //0X36

    UniqueItem: Byte;
    Overlap: Byte;
    ItemType: Byte;
    ItemSet: Word;
    AntiCrit: Byte;    //暴击伤害减少

    Binded: Byte;  //绑定
    reserve: array[0..13+1] of Integer;
    AddOn: array[0..9] of Byte;
    Eva: TEvaluation;
    sCustText: string[20];
    btCustTextColor: Byte;
    UpgradeCount: Byte;
    itemMakeSrc: TItemMakeSRC;//物品来源属性
    nDamAddExtra : Integer;  //伤害结果
    AddOnEx: array[0..9] of Byte;
//    nOmitACMCDamageReduceProb : Integer;  //忽略免伤概率--此为套装加的属性,客户端单独显示
  end;
  pTClientStdItem = ^TClientStdItem;

  TStdItemExt = packed record
    boHeroPickup: Boolean;
    btRefSuiteCount: Byte;
    aSuiteWhere: TSuiteIndex;
    aSuiteIndex: TSuiteIndex;
    nGetRate: Integer;
    nBind: Integer;
  end;

  TStdItem = packed record
    Name: string[ItemNameLen]; //0X00
    StdMode: Byte; //0X0F [0 - 药品] [ 2 3 - 卷轴]
    Shape: WORD; //0X10   [0 - 普通药] [1 - 速效救心丸]
    Weight: Byte; //0X11
    AniCount: Word; //0X12   //136 137 138 虹魔吸血百分比
    Source: shortint; //0X13
    Reserved: Byte; //0X14   0x08 死亡掉落消失标记
    NeedIdentify: Byte; //0X15
    looks: Word; //0X16
    DuraMax: Integer; //0X18
    AC: Integer; //0X1A
    MAC: Integer; //0X1E
    DC: Integer; //0X22
    MC: Integer; //0X26
    SC: Integer; //0X2A
    Need: Integer; //0X2E
    NeedLevel: Integer; //0X32  //所需等级
    Price: Integer; //0X36  //价格

    UniqueItem: Byte;
    Overlap: Byte;  //是重叠物品
    ItemType: Byte;
    ItemSet: Word;
    AntiCrit: Byte;

    Binded: Byte;  //绑定
    reserve: array[0..13+1] of Integer;
    AddOn: array[0..9] of Byte;
    Eva: TEvaluation;
    Color: Byte;  //物品名称颜色
    SvrSet: TStdItemExt;
    nSmiteDef : Integer;
    nDamAddExtra : Integer;
    AddOnEx: array[0..9] of Byte;
//    nOmitACMCDamageReduceProb : Integer;  //忽略免伤概率
  end;
  pTStdItem = ^TStdItem;

  TOStdItem = packed record
    Name: string[14]; //ItemNameLen
    StdMode: Byte; //0X0F
    Shape: WORD; //0X10
    Weight: Byte; //0X11
    AniCount: Word; //0X12
    Source: shortint; //0X13
    Reserved: Byte; //0X14
    NeedIdentify: Byte; //0X15
    looks: Word; //0X16
    DuraMax: Integer; //0X18
    AC: Word; //0X1A
    MAC: Word; //0X1C
    DC: Word; //0X1E
    MC: Word; //0X20
    SC: Word; //0X22
    Need: Byte; //0X24
    NeedLevel: Byte; //0X25
    w26: Word; //0X26
    Price: Integer; //0X28
  end;
  pTOStdItem = ^TOStdItem;

  TMonSpAbil = packed record
    sName: string[14];
    bResistancePoisonRatio: Byte; //1-毒抗(0~100)
    btIgnoreTagDefence: Byte;     // 2-忽视防御(0~100)
    btDamageAddOn: Byte;          //3-增加伤害(0~255)
    btDamageRebound: Byte;        //4-伤害反弹(0~100)
    btACDamageReduction: Byte;    //5-物伤减少(0~100)
    btMCDamageReduction: Byte;    //6-魔伤减少(0~100)

    boMonParalysis: Boolean;      //7-麻痹-几率-时间(0~1 0~10 0~10)
    boMonUnParalysis: Boolean;    //8-防麻痹(0~1)
    boMonUnAllParalysis: Boolean; //9-防全毒(0~1)
    boMonUnRevival: Boolean;      //破复活
    boMonUnMagicShield: Boolean;  //破护身
    boMonUnFire:Boolean;          //防火墙
  end;
  pTMonSpAbil = ^TMonSpAbil;

  TMonInfo = packed record
    sName: string[14];
    btRace: Byte;
    btRaceImg: Byte;
    wAppr: Word;
    wLevel: Word;
    wCoolEye: Word;
    dwExp: DWORD;
{$IF HIGHHP}
    wMP: DWORD;
    wHP: DWORD;
{$ELSE}
    wMP: Word;
    wHP: Word;
{$IFEND}
    wWalkSpeed: Word;
    wWalkStep: Word;
    wWalkWait: Word;
    wAttackSpeed: Word;
    wAC: Word;
    wMAC: Word;
    wDC: Word;
    wMaxDC: Word;
    wMC: Word;
    wSC: Word;
    wSpeed: Word;
    wHitPoint: Word;
    btLifeAttrib: Byte;
    boUndead: Boolean;
    ItemList: TList;    //物品暴率
    btExplore: Byte;
    wInLevel: Word;
    dwIPExp: DWORD;
    spMonAbil: TMonSpAbil; //怪物特殊属性

  end;
  pTMonInfo = ^TMonInfo;

  TMinMap = record
    sName: string[16];
    NID: Integer;
  end;
  pTMinMap = ^TMinMap;

  TMapRoute = record
    sSMapNO: string;
    nDMapX: Integer;
    nSMapY: Integer;
    sDMapNO: string;
    nSMapX: Integer;
    nDMapY: Integer;
  end;
  pTMapRoute = ^TMapRoute;

//  TUnbindInfo = record
//    nUnbindCode: Integer;
//    sItemName: string[ItemNameLen];
//  end;
//
//  pTUnbindInfo = ^TUnbindInfo;

  TBindItem = record
    nType:Integer;
    sItemName:string[20];
    sItemPackegeName:string[20];
  end;
  pTBindItem = ^TBindItem;

  TQuestDiaryInfo = record
    QDDinfoList: TList;
  end;
  pTQuestDiaryInfo = ^TQuestDiaryInfo;

  TAdminInfo = record
    nLv: Integer;
    sChrName: string[14];
    sIPaddr: string[15];
  end;
  pTAdminInfo = ^TAdminInfo;

  TAbility = packed record
    Level: Word;  //等级
    AC: Integer;  //防御
    MAC: Integer; //魔防
    DC: Integer;  //攻击
    MC: Integer;  //魔法
    SC: Integer;  //道术
{$IF HIGHHP}
    HP: DWORD;    //血量
    MP: DWORD;    //蓝量
    MaxHP: DWORD;
    MaxMP: DWORD;
{$ELSE}
    HP: Word;
    MP: Word;
    MaxHP: Word;
    MaxMP: Word;
{$IFEND}
    Exp: UInt64;   //经验值
    MaxExp: UInt64;
    Weight: Word;
    MaxWeight: Word;  //最大负重
    WearWeight: Word;
    MaxWearWeight: Word;
    HandWeight: Word;
    MaxHandWeight: Word;
  end;
  pTAbility = ^TAbility;

  TAbilityEx = packed record
    Level: Word;  //等级
    DC: Integer;  //攻击
    MC: Integer;  //魔法
    SC: Integer;  //道术
  end;

  TOAbility = packed record
    Level: Word;
    AC: Word;
    MAC: Word;
    DC: Word;
    MC: Word;
    SC: Word;
    HP: Word;
    MP: Word;
    MaxHP: Word;
    MaxMP: Word;
    Diamond: Integer;
    Gird: Integer;
    Exp: Uint64;
    MaxExp: Uint64;
    Weight: Word;
    MaxWeight: Word;
    WearWeight: Byte;
    MaxWearWeight: Byte;
    HandWeight: Byte;
    MaxHandWeight: Byte;
  end;

  TStoreHpMp = packed record
    nStoreOpen:Byte;    //开启和关闭自动使用存储血量
    nStoreHp:Integer;   //存储血量
    nStoreMp:Integer;   //存储蓝量
    nStoreMaxHp:Integer; //最大值
    nStoreMaxMp:Integer;
  end;

    //脚本控制人物特效
  TDrawEffectScirpt = packed record
     nHumId: Integer; //
     nWilId: Integer;//WIL文件序号
     nStart: Integer;//开始图片数
     nPicCnt: Integer;//播放图片张数
     nPlayCnt: WORD; //播放次数 (0:永久)
     nSpeed: Integer; //播放速度 (ms)
     nOrder:Byte; //播放顺序 (0:角色前、1:角色身后)
     nX:Integer;//X坐标
     nY:Integer;//Y坐标
     nMode: Byte;//播放模式 (0:特效播放、1:普通播放、空:特效播放
  end;

  TPointDef = packed record
    x,y:Integer;
  end;

  TDrawHint = packed record
    nWilId:Integer;
    nIndex:Integer;
    nPoint:TPointDef;
    state:Integer;
    nLayout:Byte;//初始参考点 (0=左上角,1=右上角,2=左下角,3=右下角,4=居中)
    nTopShow:Byte; //置顶
    nDontMove:Byte; //不能移动
    btDisableNpcClick: Byte; //禁用npc点击
    boShowQrCode: Byte;  //0 不显示 1 显示二维码
  end;

  TWAbility = packed record
    dwExp: LongWord;
    wHP: Word;
    wMP: Word;
    wMaxHP: Word;
    wMaxMP: Word;
  end;

  TMerchantInfo = packed record
    sScript: string[14];
    sMapName: string[14];
    nX: Integer;
    nY: Integer;
    sNPCName: string[40];
    nFace: Integer;
    nBody: Integer;
    boCastle: Boolean;
  end;
  pTMerchantInfo = ^TMerchantInfo;

  TSocketBuff = packed record
    Buffer: PAnsiChar;
    nlen: Integer;
  end;
  pTSocketBuff = ^TSocketBuff;

  {TSendBuff = record
    nLen: Integer;
    Buffer: array[0..DATA_BUFSIZE - 1] of AnsiChar;
  end;
  pTSendBuff = ^TSendBuff;}

  TItemValEx = packed record
    UpgTimes: Byte;
    EvaAbil: array[0..7] of Word;
    Spirit: Byte;
    SpiritMax: Byte;
    Quality: Byte;
  end;

  TItemReserved = packed record //
    sCustText: string[20];      //21
    btCustTextColor: Byte;      //22
    btCustValue: array[0..9] of Word;//42

    //0物理伤害减少 1魔法伤害减少 2清空已被污染的数据 3人物体力增加 4人物魔力增加
    {(5)攻击上限  1~100%(6)魔法上限  1~100%(7)道术上限  1~100%(8)暴击伤害减少  1~100%
    (9)忽略物理和魔法减伤概率
      }
    SpecialValue: array[0..9] of Byte;//52
    UpgradeCount: Byte;          //53
    itemMakeSrc: TItemMakeSRC;   //53 + 71 = 124
    StoreInfo :array[0..4] of Integer; //存储血槽信息 144
    btValue:array[0..55] of Byte;//扩展字段   0-1 MAXHP 200
  end;
  pTItemReserved = ^TItemReserved;

  TOkItemIndex = packed record
    makeIndex : string[64];
    BoxIndex  : Integer;
  end;
  pTOkItemIndex = ^TOkItemIndex;

  TUserItem32 = packed record //56
    MakeIndex: Integer;      //物品id
    wIndex: Word;            //标识武器是否破碎  为0则破碎
    Dura: Integer;           //当前持久  重叠物品则标识物品数量
    DuraMax: Integer;        //持久上限
    NameColor: Byte;         //物品名称颜色
    //btValue:
    //衣服 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //武器 0攻击 1魔法 2道术 3幸运 4诅咒 5准确 6攻速 8暴击 9爆率 14防爆出
    //勋章 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //项链 0准确 1敏捷 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //头盔 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //左手镯 0准确 1敏捷 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //右手镯 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //戒指 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //腰带 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //靴子 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //斗笠 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //22~25     绑定
    //15~17     元素  15忽视目标防御 16增加伤害 17伤害反射
    //19        物品状态 是否禁止扔
    //20        抗暴击
    //21        空
    btValue: array[0..25] of Byte; //22..25   空：20~21    6：攻击速度

    //13 :自定义名字
    //14 :物品类型
    //18 :发光
    btValueEx: array[0..19] of Byte; //22..25   空：19

    //btCustValue:array[0..40] of Byte;

    Reserved: array[0..200 - 1] of Byte;
    //Reserved: array[0..460 - 1] of Byte;
    nPageAndPos: Integer;
  end;

  TUserItem = packed record //56
    MakeIndex: int64;      //物品id
    wIndex: Word;            //标识武器是否破碎  为0则破碎
    Dura: Integer;           //当前持久  重叠物品则标识物品数量
    DuraMax: Integer;        //持久上限
    NameColor: Byte;         //物品名称颜色
    //btValue:
    //衣服 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //武器 0攻击 1魔法 2道术 3幸运 4诅咒 5准确 6攻速 8暴击 9爆率 14防爆出
    //勋章 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //项链 0准确 1敏捷 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //头盔 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //左手镯 0准确 1敏捷 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //右手镯 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //戒指 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //腰带 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //靴子 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //斗笠 0防御 1魔防 2攻击 3魔法 4道术 8暴击 9爆率 14防爆出
    //22~25     绑定
    //15~17     元素  15忽视目标防御 16增加伤害 17伤害反射
    //19        物品状态 是否禁止扔
    //20        抗暴击
    //21        空
    btValue: array[0..25] of Byte; //22..25   空：20~21    6：攻击速度

    //13 :自定义名字
    //14 :物品类型
    //18 :发光
    btValueEx: array[0..19] of Byte; //22..25   空：19

    //btCustValue:array[0..40] of Byte;

    Reserved: array[0..200 - 1] of Byte;
    //Reserved: array[0..460 - 1] of Byte;
    nPageAndPos: Integer;
  end;
  pTUserItem = ^TUserItem;

  TMonItemInfo = packed record
    IsGold: Boolean;
    SelPoint: Integer;
    MaxPoint: Integer;
    ItemName: string;
    Count: Integer;
    extend: TObject;
  end;
  pTMonItemInfo = ^TMonItemInfo;

  TMapItem = packed record
    Name: string[35];
    looks: Word;
    AniCount: Word;
    Reserved: Byte;
    Count: Integer;
    dwCanPickUpTick: DWORD64;
    UserItem: TUserItem;
    OfBaseObject: TObject;
    DropBaseObject: TObject;
    boHeroPickup: Boolean;
    IsGold: Boolean;
    boDel: Boolean;  //标识是否要释放该结构体
    nAutoPickType : Integer;  //标识那种类型掉落,决定范围捡取能不能捡取
  end;
  pTMapItem = ^TMapItem;

  {THumanRcd = record
    sUserID: string[16];
    sCharName: string[20];
    btJob: Byte;
    btGender: Byte;
    btLevel: Byte;
    btHair: Byte;
    sMapName: string[15];
    btAttackMode: Byte;
    btIsAdmin: Byte;
    nX: Integer;
    nY: Integer;
    nGold: Integer;
    dwExp: LongWord;
  end;
  pTHumanRcd = ^THumanRcd;}

  TGlobaSessionInfo = packed record
    sAccount: string[10];
    sHumName: string[64];
    sIPaddr: string[15];
    nSessionID: Integer;
    dwAddTick: DWORD64;
    dAddDate: TDateTime;
    boLoadRcd: Boolean;
    boStartPlay: Boolean;
  end;
  pTGlobaSessionInfo = ^TGlobaSessionInfo;

  TObjectFeature = packed record
    btGender: Byte;
    btWear: Byte;
    btHair: Byte;
    btWeapon: Byte;
  end;
  pTObjectFeature = ^TObjectFeature;

  TStatusInfo = packed record
    nStatus: Integer; //0x60
    dwStatusTime: LongWord; //0x1E8
    sm218: SmallInt; //0x218
    dwTime220: LongWord; //0x220
  end;

  TMsgHeader = packed record
    dwCode: LongWord; //0x00
    nSocket: Integer; //0x04
    wGSocketIdx: Word; //0x08
    wIdent: Word; //0x0A
    wUserListIndex: Integer; //0x0C
    nLength: Integer; //0x10
  end;
  pTMsgHeader = ^TMsgHeader;

  TMapCollectExp = packed record
    nCollectExp: Integer;
    nCollectIPExp: Integer;
    nCollectRate: Integer;
    nGainExpPayment: Integer;
    nCollectExpTime: Integer;
    dwCollectExps: array[1..4] of LongWord;
    dwCollectIPExps: array[1..4] of LongWord;
  end;
  TDieDropItemInfo = packed record
    boDieDropItem: Boolean;  //地图标识,死亡掉物品
    sDieDropItemItems: TStringList; //string;
    nDieDropItemMin: Integer;
    nDieDropItemMax: Integer;
  end;
  //PTMapCollectExp = ^TMapCollectExp;

  TMapFlag = record
    boSAFE: Boolean;       //安全区域
    boDARK: Boolean;
    boFIGHTZone: Boolean;
    boFIGHT2Zone: Boolean;
    boFIGHT3Zone: Boolean;
    boDAY: Boolean;
    boQUIZ: Boolean;
    boNORECONNECT: Boolean;
    boMUSIC: Boolean;
    boEXPRATE: Boolean;
    boPKWINLEVEL: Boolean;
    boPKWINEXP: Boolean;
    boPKLOSTLEVEL: Boolean;
    boPKLOSTEXP: Boolean;
    boDECHP: Boolean;
    boINCHP: Boolean;
    boDECGAMEGOLD: Boolean;
    boINCGAMEGOLD: Boolean;
    boINCGAMEPOINT: Boolean;
    boDECGAMEPOINT: Boolean;
    boRUNHUMAN: Boolean;
    boRUNMON: Boolean;
    boWALKMON: Boolean;
    boNEEDHOLE: Boolean;
    boNORECALL: Boolean;
    boNOGUILDRECALL: Boolean;
    boNODEARRECALL: Boolean;
    boNOMASTERRECALL: Boolean;
    boNORANDOMMOVE: Boolean;
    boNODRUG: Boolean;
    boMINE: Boolean;
    boNOPOSITIONMOVE: Boolean;
    boNoManNoMon: Boolean;
    boONKILLMON:Boolean;
    boATTACK: Boolean;       //是否触发QF [@Attack]标签

    boNoUseShop: Boolean;

    boRealiveScript:Boolean;  //能否触发复活脚本

    nl: Integer;
    nNEEDSETONFlag: Integer;
    nNeedONOFF: Integer;
    nMUSICID: Integer;
    nPKWINLEVEL: Integer;
    nEXPRATE: Integer;
    nPKWINEXP: Integer;
    nPKLOSTLEVEL: Integer;
    nPKLOSTEXP: Integer;
    nDECHPPOINT: Integer;
    nDECHPTIME: Integer;
    nINCHPPOINT: Integer;
    nINCHPTIME: Integer;
    nDECGAMEGOLD: Integer;
    nDECGAMEGOLDTIME: Integer;
    nDECGAMEPOINT: Integer;
    nDECGAMEPOINTTIME: Integer;
    nINCGAMEGOLD: Integer;
    nINCGAMEGOLDTIME: Integer;
    nINCGAMEPOINT: Integer;
    nINCGAMEPOINTTIME: Integer;
    sReConnectMap: string[16];
    boKILLFUNC: Boolean;
    nKILLFUNCNO: Integer;
    boCANRIDE: Boolean;
    boCANBAT: Boolean;

    boNotAllowUseItems: Boolean; //地图不允许使用物品
    sNotAllowUseItems: TList; //string;

    DieDropItemInfo:TDieDropItemInfo;

    boNotAllowUseMag: Boolean;
    sNotAllowUseMag: TList; //string;

    boNoTagMapInfo: Boolean;
    boNoRecallHero: Boolean;
    boNOTHROWITEM: Boolean;
    boNODEAL: Boolean;
    nThunder: Integer;
    nGreatThunder: Integer;
    nLava: Integer;
    nSpurt: Integer;
    nGuildTerritory: Integer;
    //nNimbus: Integer;

    PCollectExp: TMapCollectExp;

    boStall: Boolean;
    boNoSwitchAttackMode: Boolean;
    nDigItem: Integer;
    pDigItemList: PTDigItemLists;

    //
    nSecret: Integer;
    nSecretShowName: string[ActorNameLen];
    nSecretClothShape: Word;
    nSecretWeaponShape: Word;

    sAttackLable: string[16];  //攻击触发标签

    boAllowUseAutoGame:Boolean;//是否允许挂机
    boGuildMap:Boolean;//是否是公会地图
    boNoDura:Boolean; //地图是否掉持久 true 不掉持久

    boDecMoney:Boolean;  //地图自动扣货币
    nDecMoneyType:Integer; //货币类型
    nDecMoneyTime:Integer; //时间间隔
    nDecMoneyCnt:Integer;  //扣除数量
    nDecQuitMap:string[32];//货币不足 遣返到那个地图
    nDecNoHart:Integer;//不掉血掉蓝
    boNoDropUseItem:Boolean;//玩家死亡不爆物品
  end;
  pTMapFlag = ^TMapFlag;

  TNakedAbility = record
    DC: Word;
    MC: Word;
    SC: Word;
    AC: Word;
    MAC: Word;
    HP: Word;
    MP: Word;
    Hit: Word;
    Speed: Word;
    X2: Word;
  end;
  pTNakedAbility = ^TNakedAbility;

  TAddAbility = record
    btWeaponStrong: Byte;
    btHoly: Byte;
    wHitPoint: Word;
    wSpeedPoint: Word;
    wAntiPoison: Word;
    wPoisonRecover: Word;
    wHealthRecover: Word;
    wSpellRecover: Word;
    wAntiMagic: Word;
    btLuck: Byte;
    btUnLuck: Byte;
    nHitSpeed: shortint;
{$IF HIGHHP}
    wHP: DWORD;
    wMP: DWORD;
{$ELSE}
    wHP: Integer;
    wMP: Integer;
{$IFEND HIGHHP}
    wAC: Integer;
    wMAC: Integer;
    wDC: Integer;
    wMC: Integer;
    wSC: Integer;
  end;

{$IFDEF UI_0508}
  TtSuiteAbil = array[0..13] of Byte;
{$ELSE}
  TtSuiteAbil = array[0..U_SHIELD] of Byte;
{$ENDIF}

  TStatusTime = array[0..11] of Word;

  TStatusTimeEx = array[STATE_13..STATE_29] of Word;
  TStatusArrTickEx = array[STATE_13..STATE_29] of DWORD64;

  TQuestUnit = array[0..12] of Byte;
  TQuestFlag = array[0..100] of Byte;

  THumanUseItemsDB = array[0..U_SHIELD] of TUserItem;
  THumanUseItemsDB32 = array[0..U_SHIELD] of TUserItem32;
  TAnimal12ItemDB = array[U_Animal1..U_Animal12] of TUserItem;
  TAnimal12ItemDB32 = array[U_Animal1..U_Animal12] of TUserItem32;
  TRemainItemDB = array[U_FaceMask..U_MAX] of TUserItem;
  TRemainItemDB32 = array[U_FaceMask..U_MAX] of TUserItem32;

{$IFDEF UI_0508}  //这里屏蔽掉UI_0508，就可以通过
  THumanUseItems = array[0..U_Max] of TUserItem;
{$ELSE}
  THumanUseItems = array[0..U_Max] of TUserItem;
{$ENDIF}
  pTHumanUseItems = ^THumanUseItems;

  TPetItems = array[0..7] of TUserItem;
  pTPetItems = ^TPetItems;

  TMonUseMagic = (t_Norm, t_MobSlave, t_Defence_m, t_Defence_m_m, t_Defence_s, t_Defence_s_m, t_Attack, t_AddHP_M, t_AddHP_S, t_Poison_0, t_Poison_1, t_Poison_2, t_Poison_3, t_SCDouble, t_UNAMYOUNSUL, t_UNAMYOUNSULSELF);
  TMsgColor = (c_Red, c_Green, c_Blue, c_White, c_Purple, c_Cust,c_Move,c_Grey);
  TMsgType = (t_Mon, t_Hint, t_GM, t_System, t_Notice, t_Cust, t_Castle, t_Say, t_SysRight,t_DealSysy,t_Move);
  TMonStatus = (s_KillHuman, s_UnderFire, s_Die, s_MonGen);
  TItemType = (t_aMake, t_dMake, t_dTakeOff, t_aSellOff, t_dSell, t_dDeal, t_dDrop, t_dStorage, t_pOnLogon, t_dUpgrade, t_dRepair, t_sDrop, t_ADrop, t_dCustomName, t_dHeroUse, t_dps, t_nsc, t_dTakeOn,t_Vanish,t_Super,t_bind);

  TProcessMessage = record
    wIdent: Word; //0x00
    WParam: Word; //0x02
    nParam1: NativeInt; //0x04
    nParam2: NativeInt; //0x0C
    nParam3: NativeInt; //0x14
    dwDeliveryTime: DWORD; //0x1C
    BaseObject: TObject;
    boLateDelivery: Boolean;
    nMagicID: Word;
    sMsg: string;
  end;
  pTProcessMessage = ^TProcessMessage;

  TSendMessage = record
    wIdent: Word; //0x00
    WParam: Word; //0x02
    nParam1: NativeInt; //0x04
    nParam2: NativeInt; //0x08
    nParam3: NativeInt; //0x0C
    dwDeliveryTime: DWORD64; //0x10
    BaseObject: TObject; //0x14
    boLateDelivery: Boolean; //0x18
    nMagicID: Word;
    Buff: PAnsiChar; //0x18
  end;
  pTSendMessage = ^TSendMessage;

  TSessInfo = record
    nSessionID: Integer;
    nPayMent: Integer;
    nPayMode: Integer;
    nSessionStatus: Integer;
    dwStartTick: DWORD64;
    dwActiveTick: DWORD64;
    nRefCount: Integer;
    nSocket: Integer;
    nGateIdx: Integer;
    nGSocketIdx: Integer;
    dwNewUserTick: DWORD64;
    nSoftVersionDate: Integer;
    sAccount: string[10];
    sIPaddr: string[15];
  end;
  pTSessInfo = ^TSessInfo;

  TQuestInfo = record
    wFlag: Word;
    btValue: Byte;
    nRandRage: Integer;
  end;

  TScript = record
    boQuest: Boolean;
    nQuest: Integer;
    QuestInfo: array[0..9] of TQuestInfo;
    RecordList: TList;
  end;
  pTScript = ^TScript;

  TPowerBlock = array[0..99] of Byte;
  pTPowerBlock = ^TPowerBlock;

  TSlaveInfo = record
    sSalveName: string[14];
    btSalveLevel: Byte;
    btSlaveExpLevel: Byte;
    dwRoyaltySec: DWORD64;
    nKillCount: Integer;
    nHP: Integer;
    nMP: Integer;
  end;
  pTSlaveInfo = ^TSlaveInfo;

  TMagic = packed record
    wMagicId: Word;  //技能id
    sMagicName: string[12];  //技能名
    btEffectType: Byte;
    btEffect: Byte; //技能图标id
    btEffectEx:word;//强化技能图标id
    wSpell: Word;
    wPower: Word;
    TrainLevel: array[0..14] of Word;
    MaxTrain: array[0..14] of LongWord;
    wEffectID: array[0..15] of Word;
    wIntensEffectID: array[0..15] of Word;
    btTrainLv: Byte;  //最大技能等级
    btJob: Byte;
    dwDelayTime: DWORD;
    btDefSpell: Byte;
    btDefPower: Byte;
    wMaxPower: Word;
    btDefMaxPower: Byte;
    sDescr: string[14];
    btClass: Byte;
  end;
  pTMagic = ^TMagic;

  TUserMagic = packed record
    MagicInfo: pTMagic;
    btLevel: Byte;  //技能当前等级
    btKey: Byte;
    wMagIdx: Integer;
    nTranPoint: Integer;  //经验点
    btIntensLevel: Byte;//强化等级
    btLimitLevel: Byte;  //限制等级
    btMaxLevel: Byte; //最大等级
    btEffectID: Byte;
    btIntensEffectID: Byte;
  end;
  pTUserMagic = ^TUserMagic;

  TMagicArr = array[0..2, 0..255] of pTUserMagic;
  PTMagicArr = ^TMagicArr;

  TUserMagicSet = packed record  //技能集
    nMagBubbleDefenceRate: Integer; //魔法盾吸收伤害比例
    nMagBubbleDefencePoint: Integer; //魔法盾吸收伤害点数
    nKaitianChoppingDamageRate: Integer; //开天斩伤害百分比
    nKaitianChoppingDamagePoint: Integer; //开天斩伤害点数
  end;
  pTUserMagicSet = ^TUserMagicSet;

  //THumItems = array[0..13] of TUserItem; //THumanUseItems;
  //pTHumItems = ^THumItems;
  //THumAddItems = array[14..16] of TUserItem;
  //pTHumAddItems = ^THumAddItems;

  TBagItems = array[0..MAXBAGITEM-1] of TUserItem;
  TBagItems32 = array[0..MAXBAGITEM-1] of TUserItem32;
  pTBagItems = ^TBagItems;

  TMagicRcd = packed record
    wMagIdx: Byte; //Word;      InternalPower
    btClass: Byte;
    btLevel: Byte;      //技能等级
    btKey: Byte;
    nTranPoint: Integer;
    btIntensLevel: Byte;//强化等级
    btLimitLevel: Byte;  //限制等级
    btMaxLevel: Byte; //最大等级
    btEffectID: Byte;
    btIntensEffectID: Byte;
  end;
  pTHumMagicInfo = ^TMagicRcd;
  THumMagic = array[0..59] of TMagicRcd;
  pTHumMagic = ^THumMagic;

  TStorageItems = array[0..MAXPAGESTORAGE * MAXPAGES] of TUserItem;
  TStorageItems32 = array[0..MAXPAGESTORAGE * MAXPAGES] of TUserItem32;
  pTStorageItems = ^TStorageItems;




  TStorageItemsEx = array[0..64] of TUserItem;
  pTStorageItemsEx = ^TStorageItemsEx;

  TCustomData = packed record
    StorageItems: TStorageItemsEx;
  end;

  {THumAbil = packed record
    Level: byte; //等级
    unknown1: byte; //保留
    AC: Word;
    MAC: Word;
    MinAttack: byte; // 最小攻击力
    MaxAttack: byte; // 最大攻击力
    MinMagic: byte; // 最小魔法
    MAXMAGIC: byte; // 最大魔法
    MinDao: byte; // 最小道术
    MaxDao: byte; // 最大道术
    HP: Word; // 生命值
    MP: Word; // 魔法值
    MaxHP: Word; // 最大生命值
    NowMaxMagic: Word; // 最大魔法值
    unknown2: array[0..3] of byte; // 不清楚
    Exp: Longword; // 经验值
    MaxExp: Longword; // 升级所需经验值
    unknown3: array[0..31] of byte; // 不清楚
  end;}

  TMissionData = packed record
    idx: Word;
    Step: Word;
  end;

  THumAbility = record
    btPercent: array[0..CD] of Byte;
    cAbilitySymbol:array[0..CD] of AnsiChar;
    wAbility: array[0..CD] of word;
    nAbilityTick: array[0..CD] of LongWord;
  end;

  TSlaveAbility = record
    btPercent: array[0..SLAVE_MOV_SPEED] of Byte;
    cAbilitySymbol:array[0..SLAVE_MOV_SPEED] of AnsiChar;
    wAbility: array[0..SLAVE_MOV_SPEED] of word;
    nAbilityTick: array[0..SLAVE_MOV_SPEED] of LongWord;
  end;


  TVenationInfo = packed record //2
    Level: Byte; //-1未通 0已同 1重...
    Point: Byte; //舒经活络丸 打通
  end;
  TVenationInfos = array[0..3] of TVenationInfo;

  TSeriesSkillArr = array[0..3] of Byte;

  TSeriesSkillInfo = packed record
    wMagicId: Byte;
    wDamageRate: Word;
  end;
  TSeriesSkillInfos = array[0..3] of TSeriesSkillInfo;

  THumTitle = packed record
    Index: Byte;
    Time: Integer;
  end;

  THumTitles = array[0..TitleMax] of THumTitle;


  WeaponUpgradesInfo = packed record       //武器升级等信息
     nNonce:Integer;
     nCurrentNumber:Integer;
     nAllWinNumber:Integer;
     nWinNumber:Integer;
  end;

  //人物数据类型扩展结构
  THumEtxData = packed record
    btStorgeMaxPage: Byte;// 0仓库最大页数
    nCurWeaponUpgrade: Word; //1金刚石数量
    nWeaponUpgradeSuccess: Word;//3武器升级成功次数
    nWeaponUpgradeFail: Word;//5武器升级失败次数
    nKillCount: Integer;     //7计分地图击杀数量
    nTotalDamage: Integer;  //11计分地图的总伤害
    nTotalEXP: Integer;        //15计分地图获取的总经验
    nMaxMapIndex: Integer;   //19计分地图最高层数
    ScriptSign: array[0..19] of Char;
    dFirstEnterTime: TDateTime;
    dLastLeaveTime: TDateTime;
    nTotalTime: Int64;
    nStoreInfo: TStoreHpMp;
    HumTitles: THumTitles;
    btActiveTitle: Byte;
    dwPermOnlineTime: DWORD64;  //持久化的在线时长
  end;
  pTHumEtxData = ^THumEtxData;

  //人物数据类型结构
  THumData = packed record
    nAccountPoint:  Integer;              //无双币
    nFreezeAccPoint: Integer;             //冻结无双币
    sWeChatID: string[32];                //微信id
    HumAbility: THumAbility;
    sChrName: string[14];                 //角色名称
    sCurMap: string[16];                  //当前地图编号
    wCurX: Word;                          //当前X坐标
    wCurY: Word;                          //当前Y坐标
    btDir: Byte;                          //人物朝向
    btHair: Byte;
    btSex: Byte;                          //角色性别
    btJob: Byte;                          //角色职业
    nGold: Uint64;                        //金币数量
    Abil: TOAbility;
    wStatusTimeArr: TStatusTime;
    sHomeMap: string[17];
    wHomeX: Word;
    wHomeY: Word;
    sDearName: string[14];
    sMasterName: string[14];
    boMaster: Boolean;
    btCreditPoint: Byte;
    btInPowerLevel: Byte;
    btMedusaEyeAttack: Byte;
    sStoragePwd: string[7];
    btReLevel: Byte;
    boLockLogon: Boolean;
    wInPowerPoint: Word;
    BonusAbil: TNakedAbility;
    nBonusPoint: Integer;
    nGameGold: Integer;                   //元宝数量
    nGamePoint: Integer;                  //游戏点数量
    nPayMentPoint: Integer;
    nHungerStatus: Integer;
    nPKPOINT: Integer;
    btAllowGroup: Byte;
    btClPkPoint: Byte;
    btAttatckMode: Byte;
    btIncHealth: Byte;
    btIncSpell: Byte;
    btIncHealing: Byte;
    btFightZoneDieCount: Byte;
    sAccount: string[10];                 //玩家游戏账号
    btNewHuman: Byte;
    dwInPowerExp: LongWord;
    SeriesSkillArr: TSeriesSkillArr;
    btSPLuck: Byte;
    btSPEnergy: Byte;
    btActiveTitle: Byte;
    btUnUsed1: Byte;
    boShowFashion: Boolean;               //
    dwGatherNimbus: LongWord;
    btAttribute: Byte;                    //五行属性
    boAllowGuildReCall: Boolean;
    boAllowGroupReCall: Boolean;
    nKillMonExpRate: Integer;
    dwKillMonExpRateTime: LongWord;
    sHeroName: string[14];
    sHeroMasterName: string[14];
    btOptnYBDeal: Byte;
    wGroupRcallTime: Word;
    dBodyLuck: Double;
    sMarkerMap: string[16];
    wMarkerX: Word;
    wMarkerY: Word;
    QuestUnitOpen: TQuestUnit;
    QuestUnit: TQuestUnit;
    QuestFlag: TQuestFlag;
    HumItems: THumanUseItemsDB;
    Animal12Items : TAnimal12ItemDB;//12生肖格子
    RemainItems:TRemainItemDB;//预留装备格子
    tempUserItem1: TUserItem;
    tempUserItem2: TUserItem;
    BagItems: TBagItems;
    Magic: THumMagic;
    humanvariable_T : array[0..49] of string[80]; //脚本T变量  字符型
    humanvariable_U : array[0..49] of Integer; //脚本U变量   数字型

    StorageItems: TStorageItems;    //仓库数据

    MissionFlag: array[0..MAXMISSION - 1] of TMissionData;
    VenationInfos: TVenationInfos;
    wStatusTimeArrEx: TStatusTimeEx;
    HumTitles: THumTitles;
    tempBytes: array[0..257] of Byte; //扩展字段 查看结构体 THumEtxData
  end;
  pTHumData = ^THumData;

  THumHeader = packed record
    sGuid: string[36];
    sName: string[15];
    boDeleted: Boolean;    //是否禁用
    boSelected: Boolean;   //是否当前选择角色
    aByte: array[0..2] of Byte;
    dCreateDate: TDateTime;//角色创建时间
    dUpdateDate: TDateTime;//角色最后一次更新时间
  end;

  THumDataInfo = packed record
    Header: THumHeader;
    data: THumData;
  end;
  pTHumDataInfo = ^THumDataInfo;

  pTQueryChr = ^TQueryChr;
  TQueryChr = packed record
    btJob: Byte;
    btHair: Byte;
    btSex: Byte;
    wLevel: Word;
    sName: string[ActorNameLen];
  end;

  TIDHeader = packed record
    unknown1: array[0..2] of Byte;
    boDeleted: Boolean;
    CreateDate: TDateTime; //注册日期
    UpdateDate: TDateTime; //最后登录日期
    sAccount: string[11]; //用户登录id
  end;
  TUserEntry = packed record
    sAccount: string[10];
    sPassword: string[16];
    sUserName: string[20];
    sSSNo: string[14];
    sExpiretime: string[14];
    sMd5: string[SN_1];  //用做存储MD5
    sAnswer: string[40];  //验证码开始时间
    sCheckCode: string[10];
  end;
  TUserEntryA = packed record
    sAccount: string[10];
    sPassword: string[16];
    sUserName: string[20];
    sSSNo: string[14];
    sExpiretime: string[14]; //验证码有效时间
    sMd5: string[SN_1];  //用做存储MD5
    sAnswer: string[40];  //验证码开始时间
    sCheckCode: string[10];  //用做短信验证码
    sHWID: string[SN_1];  //机器码
    sAnswer2: string[SN_2];
    sBirthDay: string[10];
    sMobilePhone: string[13];
    sMemo: string[20];
    sMemo2: string[20];
  end;
  TUserEntryAdd = packed record
    sHWID: string[SN_1];  //机器码
    sAnswer2: string[SN_2]; //授权码
    sBirthDay: string[10];
    sMobilePhone: string[13];
    sWx_id: string[64];
    sWx_Name: string[64];
    sMd5: string[SN_1];
    sCheckCode: string[10];  //微信验证码
    LastLogin: TDateTime;
    LastIp: string;
    sMemo: string[20];
    sMemo2: string[20];
  end;
  TAccountDBRecord = packed record
    Header: TIDHeader;
    UserEntry: TUserEntry;
    UserEntryAdd: TUserEntryAdd;
    b: array[0..6] of Byte;
    nErrorCount: Integer;
    dwActionTick: DWORD64;
    b1: array[0..31] of Byte;
  end;
  pTAccountDBRecord = ^TAccountDBRecord;

  TGameCmd = packed record
    sCmd: string[25];
    nPermissionMin: Integer;
    nPermissionMax: Integer;
  end;
  pTGameCmd = ^TGameCmd;

  TLoadDBInfo = packed record
    btClinetFlag: Byte;
    nGateIdx: Integer;
    nSocket: Integer;
    nSessionID: Integer;
    nSoftVersionDate: Integer;
    nPayMent: Integer;
    nPayMode: Integer;
    nGSocketIdx: Integer;
    nReLoadCount: Integer;
    dwNewUserTick: DWORD64;
    sAccount: string[10];
    sCharName: string[14];
    sMasterName: string[14];
    sIPaddr: string[15];
    btQueryMsg: Byte;
    nLRType: Integer;
    nLRPage: Integer;
    nLRResult: Integer;
    xHWID: MD5.Md5Digest;
  end;
  pTLoadDBInfo = ^TLoadDBInfo;

  {TGoldChangeInfo = packed record
    sGameMasterName: string;
    sGetGoldUser: string;
    nGold: Integer;
  end;
  pTGoldChangeInfo = ^TGoldChangeInfo;}

  TSwitchDataInfo = packed record
    dwWaitTime: DWORD64;
    sChrName: string[14];
    sMAP: string[16];
    wX: Word;
    wY: Word;
    wClitntType: Word;
    nClientTick: Integer;
    nClientVerNO: Integer;
    nCode: Integer;
    boRecallHero: Boolean;
    boBanShout: Boolean;
    boHearWhisper: Boolean;
    boBanGuildChat: Boolean;
    boAdminMode: Boolean;
    boObMode: Boolean;
    BlockWhisperArr: array[0..19] of string[14];
    SlaveArr: array[0..5] of TSlaveInfo;
    StatusValue: array[0..5] of Word;
    StatusTimeOut: array[0..5] of LongWord;
    Abil: TAbility;
    TempArr: array[1..2048] of AnsiChar;
  end;
  pTSwitchDataInfo = ^TSwitchDataInfo;

  TUserOpenType = (tHumDat, tHeroDat, tLvRank, tResume, tLoadFail, tHumDat2, tSendMyHeros);

  TUserOpenInfo = packed record
    LoadType: TUserOpenType;
    LoadUser: TLoadDBInfo;
    HumanRcd: THumDataInfo;
    //HerosInfo: THerosInfo;
    RankData: string;
    sAchievement:string;//成就信息
  end;
  pTUserOpenInfo = ^TUserOpenInfo;

  TUserSaveInfo = packed record
    sChrName: string[14];
    RcdSaved: Boolean;
    bNewHero: Boolean;
    HeroFlag: Integer;
    id:Integer;
  end;
  pTUserSaveInfo = ^TUserSaveInfo;

  TIPaddr = packed record
    a, b, c, d: Byte;
    Port: Integer;
    sIPaddr: string[15];
    dIPaddr: string[15];
  end;
  PTIPAddr = ^TIPaddr;

  TClassProc = procedure(Sender: TObject);

  TProc = packed record
    sProcName: string;
    nProcAddr: Pointer;
  end;
  TProcArray = array[0..100] of TProc;

  TMyObject = packed record
    sObjcName: string;
    Obj: TObject;
  end;
  TObjectArray = array[0..100] of TMyObject;

  {TCheckCode = packed recordend;}

  TClientConf = packed record
    boClientCanSet: Boolean;
    boRUNHUMAN: Boolean;
    boRUNMON: Boolean;
    boWALKMON: Boolean;
    boRunNpc: Boolean;
    boWarRunAll: Boolean;
    btDieColor: Integer;
    wSpellTime: Integer;
    wHitTime: Integer;  //攻击速度
    wRunlTime: Integer; //跑步速度
    wWalkTime: Integer; //走路速度
    dwTurnTime: Integer; //转身间隔
    wItemFlashTime: Integer;
    btItemSpeed: Integer;
    boCanStartRun: Boolean;
    boParalyCanRun: Boolean;
    boParalyCanWalk: Boolean;
    boParalyCanHit: Boolean;
    boParalyCanSpell: Boolean;
    boForbidDoubleHit: Boolean;
    boForbidDoubleSpell: Boolean;
    boForbidDoubleRun: Boolean;
    boShowRedHPLable: Boolean;
    boShowHPNumber: Boolean;
    boShowJobLevel: Boolean;
    boDuraAlert: Boolean;
    boMagicLock: Boolean;
    boAutoPuckUpItem: Boolean;
    boJiShiYu: Boolean;                     //及时雨内挂开关
    botiOpenSystem: Boolean;
    boItemMarketGold: Boolean;              //交易行允许使用金币
    boItemMarketGameGold: Boolean;          //交易行允许使用元宝
    boItemMarketPoint: Boolean;             //交易行允许使用泡点
    boItemMarketDiamond: Boolean;           //交易行允许使用金刚石
    boItemMarketGird: Boolean;              //交易行允许使用灵符
    boItemMarketAccPoint: Boolean;          //交易行允许使用无双币
    nIteMarketRate: Integer;                //交易行 手续费率
    boShowElementValue: Boolean;            //是否显示物品元素属性
    boPlayerAttackBack: Boolean;            //玩家攻击后仰
    nClientTipInfoPos: Integer;             //客户端提示信息位置
    nClientTip_OffsetXY: array[0..2] of Integer;  //XY偏移
    boOnlyChatFrame: Boolean;               //仅在聊天框显示提示信息
    nTaoistSkillSet: Integer;
    boBagForge: Boolean;                    //背包锻造
    nStartPriceGold: Integer;               //金币起拍价
    nStartPriceGameGold: Integer;           //元宝起拍价
    nStartPricePoint: Integer;              //泡点起拍价
    nStartPriceDiamond: Integer;            //金刚石起拍价
    nStartPriceGird: Integer;               //灵符起拍价
    nStartPriceAccPoint: Integer;           //无双币起拍价
    nMainGoldType: Integer;                 //背包主货币类型
    nOtherGoldType: Integer;                //其他显示货币
    boShowMainGoldName: Boolean;            //显示主货币名称
    nMainGoldBagFileID: Integer;            //背包货币 资源编号
    nMainGoldBagId: Integer;
    nMainGoldGroundId: Integer;
    nMarketSayType: Integer;                //交易行喊话费用类型
    nMarketSayCnt: Integer;                 //交易行喊话数量
    nAnimal12Type: Integer;                 //12生肖开放类型 0-关闭 1-4生肖 2-8生肖 3-12生肖
    boIsopenJobber: Boolean;                //是否开启交易行
    boUseBigBag:Boolean;//使用大背包
    nMarketMaxGold:Integer; //拍卖行拍卖最大值
    boUse176TopShow:Boolean;//使用176顶部显示
    boShowFashion:Boolean;//显示时装
  end;

  TRecallMigic = packed record
    nHumLevel: Integer;
    nCount: Integer;
    nLevel: Integer;
    sMonName: string[16];
  end;

  TLimitLevelExp = packed record
    nHumLevel: Integer;
    nEXPRATE: Integer;
  end;
  TLevelNeedExp = array[1..500] of Int64;
  //TLevelAddPoint = array[1..255] of LongWord;

  TIPLelelInfo = packed record
    nPower: Integer;
    dwPExp: LongWord;
    dwHExp: LongWord;
  end;
  TIPLvlNeedList = array[1..MAX_IPLEVEL] of TIPLelelInfo;
  PTIPLvlNeedList = ^TIPLvlNeedList;

  CommandType = packed record
    sCmd: string[25];
    nPermissionMin: Integer;
    nPermissionMax: Integer;
  end;

  TGameCommand = packed record
    data: CommandType;
    PRVMSG: CommandType;
    ALLOWMSG: CommandType;
    LETSHOUT: CommandType;
    LETTRADE: CommandType;
    LETGUILD: CommandType;
    ENDGUILD: CommandType;
    BANGUILDCHAT: CommandType;
    AUTHALLY: CommandType;
    AUTH: CommandType;
    AUTHCANCEL: CommandType;
    DIARY: CommandType;
    USERMOVE: CommandType;
    SEARCHING: CommandType;
    ALLOWGROUPCALL: CommandType;
    GROUPRECALLL: CommandType;
    ALLOWGUILDRECALL: CommandType;
    GUILDRECALLL: CommandType;
    UNLOCKSTORAGE: CommandType;
    UnLock: CommandType;
    Lock: CommandType;
    PASSWORDLOCK: CommandType;
    SETPASSWORD: CommandType;
    CHGPASSWORD: CommandType;
    CLRPASSWORD: CommandType;
    UNPASSWORD: CommandType;
    MEMBERFUNCTION: CommandType;
    MEMBERFUNCTIONEX: CommandType;
    DEAR: CommandType;
    ALLOWDEARRCALL: CommandType;
    DEARRECALL: CommandType;
    Master: CommandType;
    ALLOWMASTERRECALL: CommandType;
    MASTERECALL: CommandType;
    ATTACKMODE: CommandType;
    REST: CommandType;
    TAKEONHORSE: CommandType;
    TAKEOFHORSE: CommandType;
    HUMANLOCAL: CommandType;
    Move: CommandType;
    POSITIONMOVE: CommandType;
    SignMove: CommandType;
    Info: CommandType;
    MOBLEVEL: CommandType;
    MOBCOUNT: CommandType;
    HUMANCOUNT: CommandType;
    Map: CommandType;
    KICK: CommandType;
    TING: CommandType;
    SUPERTING: CommandType;
    MAPMOVE: CommandType;
    SHUTUP: CommandType;
    RELEASESHUTUP: CommandType;
    SHUTUPLIST: CommandType;
    GAMEMASTER: CommandType;
    OBSERVER: CommandType;
    SUEPRMAN: CommandType;
    Level: CommandType;
    SABUKWALLGOLD: CommandType;
    RECALL: CommandType;
    REGOTO: CommandType;
    SHOWFLAG: CommandType;
    SHOWOPEN: CommandType;
    SHOWUNIT: CommandType;
    Attack: CommandType;
    MOB: CommandType;
    MOBNPC: CommandType;
    DELNPC: CommandType;
    NPCSCRIPT: CommandType;
    RECALLMOB: CommandType;
    LUCKYPOINT: CommandType;
    LOTTERYTICKET: CommandType;
    RELOADGUILD: CommandType;
    RELOADLINENOTICE: CommandType;
    RELOADABUSE: CommandType;
    BACKSTEP: CommandType;
    BALL: CommandType;
    FREEPENALTY: CommandType;
    PKPOINT: CommandType;
    IncPkPoint: CommandType;
    CHANGELUCK: CommandType;
    HUNGER: CommandType;
    hair: CommandType;
    TRAINING: CommandType;
    DELETESKILL: CommandType;
    CHANGEJOB: CommandType;
    CHANGEGENDER: CommandType;
    NameColor: CommandType;
    Mission: CommandType;
    MobPlace: CommandType;
    TRANSPARECY: CommandType;
    DELETEITEM: CommandType;
    LEVEL0: CommandType;
    CLEARMISSION: CommandType;
    SETFLAG: CommandType;
    SETOPEN: CommandType;
    SETUNIT: CommandType;
    RECONNECTION: CommandType;
    DISABLEFILTER: CommandType;
    CHGUSERFULL: CommandType;
    CHGZENFASTSTEP: CommandType;
    CONTESTPOINT: CommandType;
    STARTCONTEST: CommandType;
    ENDCONTEST: CommandType;
    ANNOUNCEMENT: CommandType;
    OXQUIZROOM: CommandType;
    GSA: CommandType;
    CHANGEITEMNAME: CommandType;
    DISABLESENDMSG: CommandType;
    ENABLESENDMSG: CommandType;
    DISABLESENDMSGLIST: CommandType;
    KILL: CommandType;
    MAKE: CommandType;
    MAKEEX: CommandType;
    SMAKE: CommandType;
    BonusPoint: CommandType;
    DELBONUSPOINT: CommandType;
    RESTBONUSPOINT: CommandType;
    FIREBURN: CommandType;
    TESTFIRE: CommandType;
    TESTSTATUS: CommandType;
    DELGOLD: CommandType;
    ADDGOLD: CommandType;
    DELGAMEGOLD: CommandType;
    ADDGAMEGOLD: CommandType;
    GAMEGOLD: CommandType;
    GAMEPOINT: CommandType;
    CREDITPOINT: CommandType;
    TESTGOLDCHANGE: CommandType;
    REFINEWEAPON: CommandType;
    RELOADADMIN: CommandType;
    ReLoadNpc: CommandType;
    RELOADMANAGE: CommandType;
    RELOADROBOTMANAGE: CommandType;
    RELOADROBOT: CommandType;
    RELOADMONITEMS: CommandType;
    RELOADDIARY: CommandType;
    RELOADITEMDB: CommandType;
    RELOADMAGICDB: CommandType;
    RELOADMONSTERDB: CommandType;
    RELOADMINMAP: CommandType;
    ReAlive: CommandType;
    ADJUESTLEVEL: CommandType;
    ADJUESTEXP: CommandType;
    AddGuild: CommandType;
    DelGuild: CommandType;
    CHANGESABUKLORD: CommandType;
    FORCEDWALLCONQUESTWAR: CommandType;
    ADDTOITEMEVENT: CommandType;
    ADDTOITEMEVENTASPIECES: CommandType;
    ItemEventList: CommandType;
    STARTINGGIFTNO: CommandType;
    DELETEALLITEMEVENT: CommandType;
    STARTITEMEVENT: CommandType;
    ITEMEVENTTERM: CommandType;
    ADJUESTTESTLEVEL: CommandType;
    TRAININGSKILL: CommandType;
    OPDELETESKILL: CommandType;
    CHANGEWEAPONDURA: CommandType;
    RELOADGUILDALL: CommandType;
    who: CommandType;
    TOTAL: CommandType;
    TESTGA: CommandType;
    MAPINFO: CommandType;
    SBKDOOR: CommandType;
    CHANGEDEARNAME: CommandType;
    CHANGEMASTERNAME: CommandType;
    STARTQUEST: CommandType;
    SETPERMISSION: CommandType;
    CLEARMON: CommandType;
    RENEWLEVEL: CommandType;
    DENYIPLOGON: CommandType;
    DENYACCOUNTLOGON: CommandType;
    DENYCHARNAMELOGON: CommandType;
    DELDENYIPLOGON: CommandType;
    DELDENYACCOUNTLOGON: CommandType;
    DELDENYCHARNAMELOGON: CommandType;
    SHOWDENYIPLOGON: CommandType;
    SHOWDENYACCOUNTLOGON: CommandType;
    SHOWDENYCHARNAMELOGON: CommandType;
    VIEWWHISPER: CommandType;
    Spirit: CommandType;
    SPIRITSTOP: CommandType;
    SetMapMode: CommandType;
    SHOWMAPMODE: CommandType;
    TESTSERVERCONFIG: CommandType;
    SERVERSTATUS: CommandType;
    TESTGETBAGITEM: CommandType;
    ClearBag: CommandType;
    SHOWUSEITEMINFO: CommandType;
    BINDUSEITEM: CommandType;
    MOBFIREBURN: CommandType;
    TESTSPEEDMODE: CommandType;
    LOCKLOGON: CommandType;
    UNLOCKLOGON: CommandType;
    RemoteMusic: CommandType;
    RemoteMsg: CommandType;
    INITSABUK: CommandType;
    TAKEUSERITEM: CommandType;
    ADDBLACKLIST: CommandType;
  end;

  TMonDrop = record
    sItemName: string[20];
    nDropCount: Integer;
    nNoDropCount: Integer;
    nCountLimit: Integer;
    ClearTime: LongWord;
    Time: DWORD64;
  end;
  pTMonDrop = ^TMonDrop;

  TMonSayMsg = record
    State: TMonStatus;
    Color: TMsgColor;
    nRate: Integer;
    sSayMsg: string;
  end;
  pTMonSayMsg = ^TMonSayMsg;

  TtSeriesSkill = record
    umag: pTUserMagic;
    used: Boolean;
  end;
  TtSeriesSkills = array[0..3] of TtSeriesSkill;
  
  TBuffMsg = record
      Player: int64; //NativeInt 服务器64位  客户端32位 会出问题
      Mainbuffs:array[0..2] of DWORD; //主buff  显示在人物脚下的特效
      SecondBuffs:array[0..2] of DWORD; //副buff
      RemainTime :array[0..4] of DWORD; //剩余时间秒
  end;
  //图标显示信息
  TShowIconMsg = record
     nType:Integer;
     nFlag:Integer;
     sMsg:string;
  end;

  //
  THumStateTimeMsg = record
     nTimes:array [0..31] of DWORD;
  end;

  TCustomIconMsg = record
      wil:Integer;
      index:Integer;
      id:Integer;
      nTime:Integer;
      sHint:string[255];
  end;

type
  NTStatus = Longint;

const
  STATUS_SUCCESS = NTStatus(0);
  STATUS_INFO_LENGTH_MISMATCH = NTStatus($C0000004);
  STATUS_INVALID_HANDLE = NTStatus($C0000008);
  STATUS_ACCESS_DENIED = NTStatus($C0000022);

  OBJ_INHERIT = $00000002;
  OBJ_PERMANENT = $00000010;
  OBJ_EXCLUSIVE = $00000020;
  OBJ_CASE_INSENSITIVE = $00000040;
  OBJ_OPENIF = $00000080;
  OBJ_OPENLINK = $00000100;
  OBJ_KERNEL_HANDLE = $00000200;
  OBJ_VALID_ATTRIBUTES = $000003F2;

  OB_TYPE_JOB = 0;
  OB_TYPE_TYPE = 1;
  OB_TYPE_DIRECTORY = 2;
  OB_TYPE_SYMBOLIC_LINK = 3;
  OB_TYPE_TOKEN = 4;
  OB_TYPE_PROCESS = 5;
  OB_TYPE_THREAD = 6;
  OB_TYPE_EVENT = 7;
  OB_TYPE_EVENT_PAIR = 8;
  OB_TYPE_MUTANT = 9;
  OB_TYPE_SEMAPHORE = 10;
  OB_TYPE_TIMER = 11;
  OB_TYPE_PROFILE = 12;
  OB_TYPE_WINDOW_STATION = 13;
  OB_TYPE_DESKTOP = 14;
  OB_TYPE_SECTION = 15;
  OB_TYPE_KEY = 16;
  OB_TYPE_PORT = 17;
  OB_TYPE_ADAPTER = 18;
  OB_TYPE_CONTROLLER = 19;
  OB_TYPE_DEVICE = 20;
  OB_TYPE_DRIVER = 21;
  OB_TYPE_IO_COMPLETION = 22;
  OB_TYPE_FILE = 23;
  ChineseNum : array [0..9] of string = ('零','一','二','三','四','五','六','七','八','九');
  ChineseUnit : array [0..6] of string = ('','','十','百','千','万','亿');

  DEFBLOCKSIZE = SizeOf(TCmdPack) div 3 * 4;  //消息体加密之后大小 SizeOf(TCmdPack) div 3必须能被整除
  CMDPACKSIZE = SizeOf(TCmdPack);  //封包头大小

type
  KPRIORITY = Longint;
  TPDWord = ^DWORD;

  SYSTEM_INFORMATION_CLASS = (
    SystemBasicInformation,
    SystemProcessorInformation,
    SystemPerformanceInformation,
    SystemTimeOfDayInformation,
    SystemNotImplemented1,
    SystemProcessesAndThreadsInformation,
    SystemCallCounts,
    SystemConfigurationInformation,
    SystemProcessorTimes,
    SystemGlobalFlag,
    SystemNotImplemented2,
    SystemModuleInformation,
    SystemLockInformation,
    SystemNotImplemented3,
    SystemNotImplemented4,
    SystemNotImplemented5,
    SystemHandleInformation,
    SystemObjectInformation,
    SystemPagefileInformation,
    SystemInstructionEmulationCounts,
    SystemInvalidInfoClass1,
    SystemCacheInformation,
    SystemPoolTagInformation,
    SystemProcessorStatistics,
    SystemDpcInformation,
    SystemNotImplemented6,
    SystemLoadImage,
    SystemUnloadImage,
    SystemTimeAdjustment,
    SystemNotImplemented7,
    SystemNotImplemented8,
    SystemNotImplemented9,
    SystemCrashDumpInformation,
    SystemExceptionInformation,
    SystemCrashDumpStateInformation,
    SystemKernelDebuggerInformation,
    SystemContextSwitchInformation,
    SystemRegistryQuotaInformation,
    SystemLoadAndCallImage,
    SystemPrioritySeparation,
    SystemNotImplemented10,
    SystemNotImplemented11,
    SystemInvalidInfoClass2,
    SystemInvalidInfoClass3,
    SystemTimeZoneInformation,
    SystemLookasideInformation,
    SystemSetTimeSlipEvent,
    SystemCreateSession,
    SystemDeleteSession,
    SystemInvalidInfoClass4,
    SystemRangeStartInformation,
    SystemVerifierInformation,
    SystemAddVerifier,
    SystemSessionProcessesInformation
    );

  PROCESSINFOCLASS = (ProcessBasicInformation = 0, ProcessVMCounters = 3, ProcessWow64Information = 26);

  TUNICODE_STRING = record
    Length: Word;
    MaximumLength: Word;
    Buffer: PWideChar;
  end;
  pTUNICODE_STRING = ^TUNICODE_STRING;

  _PEB = packed record
    Reserved1: array[0..2 - 1] of Byte;
    BeingDebugged: Byte;
    Reserved2: array[0..229 - 1] of Byte;
    Reserved3: array[0..59 - 1] of Pointer;
    SessionId: ULONG;
  end;
  PEB = _PEB;
  PPEB = ^PEB;

  {_PROCESS_BASIC_INFORMATION = packed record
    Reserved1: Pointer;
    PebBaseAddress: PPEB;
    Reserved2: array[0..1] of Pointer;
    UniqueProcessId: LongWord;
    Reserved3: Pointer;
  end;
  PROCESS_BASIC_INFORMATION = _PROCESS_BASIC_INFORMATION;
  PPROCESS_BASIC_INFORMATION = ^PROCESS_BASIC_INFORMATION;}

  _PROCESS_BASIC_INFORMATION = packed record
    ExitStatus: NTStatus;
    PebBaseAddress: ULONG;
    AffinityMask: ULONG;
    BasePriority: ULONG;
    UniqueProcessId: ULONG;
    InheritedFromUniqueProcessId: ULONG;
  end;
  PROCESS_BASIC_INFORMATION = _PROCESS_BASIC_INFORMATION;
  PPROCESS_BASIC_INFORMATION = ^PROCESS_BASIC_INFORMATION;

  _SYSTEM_HANDLE_INFORMATION = packed record
    ProcessId: ULONG;
    ObjectTypeNumber: UCHAR;
    Flags: UCHAR;
    Handle: SHORT;
    pobject: Pointer;
    GrantedAccess: ACCESS_MASK;
  end;
  SYSTEM_HANDLE_INFORMATION = _SYSTEM_HANDLE_INFORMATION;
  PSYSTEM_HANDLE_INFORMATION = ^SYSTEM_HANDLE_INFORMATION;

  _SYSTEM_HANDLE_INFORMATION_EX = packed record
    NumberOfHandles: ULONG;
    Information: array[0..0] of SYSTEM_HANDLE_INFORMATION;
  end;
  SYSTEM_HANDLE_INFORMATION_EX = _SYSTEM_HANDLE_INFORMATION_EX;
  PSYSTEM_HANDLE_INFORMATION_EX = ^SYSTEM_HANDLE_INFORMATION_EX;

  TMsgProc = procedure(Msg: PChar; nMsgLen: Integer; nMode: Integer); stdcall;
  TIPLocal = procedure(IPAddr: PChar; var IP: array of Char; IPSize: Integer); stdcall;
  TLocalIP = procedure(var IP: array of AnsiChar; IPSize: Integer); stdcall;
  TFindProc = function(ProcName: PChar; nNameLen: Integer): Pointer; stdcall;
  TSetProc = function(ProcAddr: Pointer; ProcName: PChar; nNameLen: Integer): Boolean; stdcall;
  TFindObj = function(ObjName: PChar; nNameLen: Integer): TObject; stdcall;
  TPlugInit = function(AppHandle: HWnd; MsgProc: TMsgProc; FindProc: TFindProc; SetProc: TSetProc; FindObj: TFindObj): PChar; stdcall;
  TDeCryptString = procedure(Src, Dest: PChar; nSrc: Integer; var nDest: Integer); stdcall;
  TPlugConfig = procedure(); stdcall;

  //TGetLicense = function(var nDay: Integer; var nM2Crc: Integer): Integer; stdcall;
  TGetNextDirection = function(sX, sY, dx, dy: Integer): Byte; stdcall;
  TGetExVersionNO = function(nVersionDate: Integer; var nOldVerstionDate: Integer): Integer; stdcall;
  TGetGoldShape = function(nGold: Integer): Word; stdcall;
  TStrType = (t_sWellCome, t_sTitleName, t_sProductName, t_sVersion, t_sUpDateTime, t_sProgram, t_sWebSite, t_sBbsSite, t_sHash, t_sChar, t_sContact, t_sAdvertisement {, t_mSendWhisperMsg});
  TGetResourceString = function(StrType: TStrType): PAnsiChar; stdcall;
  TGetValNameNo = function(sText: string): Integer; stdcall;
  TCheckUserItems = function(nIdx: Integer; StdItem: pTStdItem): Boolean; stdcall;
  TGetItemNumber = function(): Integer; stdcall;
  TGetItemNumberEx = function(): Integer; stdcall;
  TCheckGuildName = function(sName: string): Boolean; stdcall;
  TZW_QUERY_INFORMATION_PROCESS = function(ProcessHandle: THandle; PrcInfoClass: DWORD; PrcInfo: Pointer; PrcInfoLength: ULONG; ReturnLength: TPDWord): DWORD; stdcall;

  TDoorStatus = record
    boOpened: Boolean;
    nRefCount: Integer;
    dwOpenTick: DWORD64;
  end;
  pTDoorStatus = ^TDoorStatus;

  TDoorInfo = record
    nX, nY: Integer;
    nPoint: Integer;
    Status: pTDoorStatus;
  end;
  pTDoorInfo = ^TDoorInfo;

  TMapQuestInfo = record
    nFlag: Integer;
    nValue: Integer;
    sMonName: string[15];
    sItemName: string[ItemNameLen];
    boGrouped: Boolean;
    NPC: TObject;
  end;
  pTMapQuestInfo = ^TMapQuestInfo;

  TDynamicVar = record
    sName: string[15];
    VarType: TVarType;
    nInternet: Integer;
    sString: string;
  end;
  pTDynamicVar = ^TDynamicVar;

  TItemName = record
    nMakeIndex: int64;
    nItemIndex: Integer;
    sItemName: string[ItemNameLen];
  end;
  pTItemName = ^TItemName;

  TLoadHuman = record
    sAccount: string[12];
    sChrName: string[14];
    sUserAddr: string[15];
    nSessionID: Integer;
  end;

  TOClientItem = packed record
    s: TOStdItem;
    MakeIndex: int64;
    Dura: Integer;
    DuraMax: Integer;
    NameColor: Byte;
  end;
  pTOClientItem = ^TOClientItem;

  TClientItem = packed record
    s: TClientStdItem;
    MakeIndex: int64;         //物品id
    Dura: Integer;              //物品当前持久
    DuraMax: Integer;           //最大持久
    NameColor: Byte;            //物品名称颜色
  end;
  PTClientItem = ^TClientItem;

  TStorageItem = packed record
      item:TClientItem;
      nPagePos:Integer;
  end;
  PTStorageItem = ^TStorageItem;

  TClientDealItem = record
    sAccount : string[10];           //物品所属账号
    sChrName : string[14];           //物品所属名字
    price    : DWORD;                //价格
    money_type: Byte;                //货币类型
    add_time: TDateTime;             //上架时间
    buy_time: TDateTime;             //被购买时间
    status : Byte;                   //物品状态 0正常 1被购买 2等待上架 3上架时间到期
    buy_sAccount: string[10];        //购买人账号
    buy_sChrName: string[14];        //购买人角色名字
    ClientItem: TClientItem;
  end;
  pTClientDealItem = ^TClientDealItem;

  TCharDesc = packed record
    Feature: int64;
    Status: Integer;
    StatusEx: Integer;
  end;

  TCharDescHMP = packed record
    Feature: int64;
    Status: Integer;
    StatusEx: Integer;
    nChangeHp:Integer;
    nChangeMp:Integer;
  end;

  TCharDescEx = packed record
    nFeature: int64;
    nStatus: Integer;
    nFeatureEx: Integer;
  end;

  TMessageBodyW = record
    param1: Word;
    param2: Word;
    Tag1: Word;
    Tag2: Word;
    Tag3: int64;//兼容老的登录器， 增加tag3
  end;

  TMessageBodyWL = record
    lParam1: int64;
    lParam2: Integer;
    lTag1: Integer;
    lTag2: Integer;
    lTag3: int64;//兼容老的登录器， 增加tag3
  end;

  TShortMessage = record
    Ident: Word;
    wMsg: Word;
  end;

  TUserStateInfo = record
    Feature: int64;
    UserName: string[32];
    NameColor: Integer;
    GuildName: string[14];
    GuildRankName: string[15];
    btGender: Byte;
    btHumAttr: Byte;
    btResver1: Byte;
    btResver2: Byte;
    UseItems: array[0..High(THumanUseItems)] of TClientItem;
//{$IFDEF UI_0508}

//{$ELSE}
    ActiveTitle: Byte;
    Titles: THumTitles;
//{$ENDIF}
    btAnimal12:Byte;
  end;
  pTUserStateInfo = ^TUserStateInfo;

  TOUserStateInfo = packed record
    Feature: int64;
    UserName: string[32];
    NameColor: Integer;
    GuildName: string[14];
    GuildRankName: string[16];
    UseItems: array[0..High(THumanUseItems)] of TOClientItem;
  end;

  TClientMagic = record
    Key: Char;
    Level: Byte;
    CurTrain: Integer;
    btIntensLevel: Byte;//强化等级
    Def: TMagic;
    btEffectID: Byte;
    btIntensEffectID: Byte;
  end;
  PTClientMagic = ^TClientMagic;

  //TSeriesSkillInfo = array [0..2] of word; //packed record

  {TRegInfo = packed record
    sKey: string;
    sServerName: string;
    sRegSrvIP: string;
    nRegPort: Integer;
    //sGateIPaddr: string[20];
  end;}

  TGateObj = record
    DEnvir: TObject;
    nDMapX: Integer;
    nDMapY: Integer;
    //boFlag: Boolean;
  end;
  pTGateObj = ^TGateObj;

  TSellOff = packed record
    sCharName: string[14]; //00
    SellTime: TDateTime; //0F
    Price: LongWord; //17
    tax: Integer; //1B
    item: TUserItem; //1F
    No2: Integer; //未知
  end;
  pSellOff = ^TSellOff;

  TItemLimit = record
    sItemName: string[ItemNameLen];  //物品名
    nItemInedx: Integer;             //数据库id
    boAllowMake: Boolean;            //允许制造
    boDisableMake: Boolean;          //禁止制造
    boDisableTakeOff: Boolean;       //禁止取下
    boAllowSellOff: Boolean;
    boDisableSell: Boolean;
    boDisableDeal: Boolean;
    boDisableDrop: Boolean;
    boDisableStorage: Boolean;
    boDispearOnLogon: Boolean;
    boDisableUpgrade: Boolean;
    boDisableRepair: Boolean;
    boDropWithoutFail: Boolean;
    boAbleDropInSafeZone: Boolean;
    boDisCustomName: Boolean;
    boDisallowHeroUse: Boolean;
    boDisallowPSell: Boolean;
    boNoScatter: Boolean;
    bodTakeOn: Boolean;
    boDisSuper:Boolean;
  end;
  pTItemLimit = ^TItemLimit;

  TItemVipEffect = packed record   //物品内观特效
    nStartPicture: Integer;
    nPlayCount: Integer;
    nResourcesNum: Integer;
    nX: Integer;
    nY: Integer;
    nSpeed: Integer;
    boRepairMode: Boolean;
    boDraw: Boolean;
    boCloseEffect: Boolean;
  end;

  TItemAppEffect = packed record   //物品外观特效
    nStartPicture: Integer;
    nResourcesNum: Integer;
    boShield: Boolean;
    boNoGender: Boolean;
    boDraw: Boolean;
    boCloseEffect: Boolean;
  end;

  TItemParcelEffect = packed record  //物品在包裹中的特效
    nStartPicture: Integer;
    nPlayCount: Integer;
    nResourcesNum: Integer;
    nX: Integer;
    nY: Integer;
    nSpeed: Integer;
    boRepairMode: Boolean;
    boDraw: Boolean;
    boCloseEffect: Boolean;
  end;

  TItemLandEffect = packed record  //物品在地上的特效
    nStartPicture: Integer;
    nPlayCount: Integer;
    nResourcesNum: Integer;
    nX: Integer;
    nY: Integer;
    nSpeed: Integer;
    boRepairMode: Boolean;
    boDraw: Boolean;
    boCloseEffect: Boolean;
  end;

  TEffectList = packed record
    nEffectListNum: Integer;
    ItemVipEffect: TItemVipEffect;    //物品内观特效
    ItemAppEffect: TItemAppEffect;    //物品外观特效
    ItemParcelEffect: TItemParcelEffect;    //物品在包裹中的特效
    ItemLandEffect: TItemLandEffect;    //物品在包裹中的特效
    sRemarks: string;
  end;
  pTEffectList = ^TEffectList;

  //时装内观特效
  TFashionEffList = packed record
     nId,nWidId:Integer;
     nStart,nCnt,nNext:Integer;
     nMode,boOpen:Boolean;
     x,y:Integer;
  end;
  PTFashionEffList = ^TFashionEffList;

  TEffectItemList = packed record
    sItemName: string;
    sItemNum: string;
  end;
  pTEffectItemList = ^TEffectItemList;

  TResourceList = packed record
    sName: string;
  end;
  pTResourceList = ^TResourceList;

  TShortString = packed record
    btLen: Byte;
    Strings: array[0..49] of AnsiChar;
  end;
  pTShortString = ^TShortString;

  TSaleItem = packed record
    sStdItem: TClientStdItem;
    sItemDesc: array[0..50] of AnsiChar;
  end;
  pTSaleItem = ^TSaleItem;

  TItemsNote = packed record
    sItemsName: string[44];
    sItemsNote: string[250];
  end;
  pTItemsNote = ^TItemsNote;

  TShopItem = packed record //0x98
    sItemName: string[ItemNameLen]; //0x00
    btClass: Byte; //0X0F
    wLooks: Word; //0X10 //Items.wil
    wPrice: DWORD; //0X12  物品价格
    wShape1: Word; //0X14
    wShape2: Word; //0X16
    sSellType: string[8];  //货币名称
    sExplain: string[127];  //物品描述
  end;
  pTShopItem = ^TShopItem;

  TIPCData = packed record
    SendString: string[100];
    SendInteger: Integer;
  end;
  PIPCData = ^TIPCData;

  TServerInfo = packed record
    nSckHandle: Integer;
    sStr: string;
    Socket: TCustomWinSocket;
  end;
  pTServerInfo = ^TServerInfo;

  THumSession = packed record
    sChrName: string[14];
    nIndex: Integer;
    Socket: TCustomWinSocket;
    bo24: Boolean;
    bo2C: Boolean;
    dwTick30: LongWord;
  end;
  pTHumSession = ^THumSession;

  TClientGT = packed record
    number: Byte;
    GuildName: string[GuildNameLen];
    GuildMasters: array[0..1] of string[ActorNameLen];
    SalePrice: Integer;
    Status: Byte; //0=normal, 1= onsale, 2= sold, pending activation
  end;
  pTClientGT = ^TClientGT;

  TDecoItem = packed record
    Appr: Word;
    Name: string[20];
    Price: Integer;
    Location: Byte;
  end;
  pTDecoItem = ^TDecoItem;

  TMakerMap = packed record
    sCharName: string[14];
    sMapName: string[16];
    wMapX: Word;
    wMapY: Word;
  end;
  pTMakerMap = ^TMakerMap;
  TMakerMapInfo = array[1..6] of TMakerMap;

  TPSInfo = packed record
    sStr: string[ItemNameLen]; //???
    nInt: Int64;
  end;
  TCPostSell = array[0..10] of TPSInfo;

  TPostSell = packed record
    sCharName: string[14];
    sTargName: string[14];
    dPostTime: TDateTime;
    nPostPrice: Integer;
    aPostItems: array[0..8] of TUserItem;
    nPostStone: Integer;
  end;
  pTPostSell = ^TPostSell;

  TClientPS = packed record
    sCharName: string[14];
    sTargName: string[14];
    nPostPrice: Integer;
    sPostTime: string[20];
    sPostState: string[4];
    aPostItems: array[0..9] of TClientItem;
  end;
  PTClientPS = ^TClientPS;

  TEGoldRcd = packed record
    boDealFlag: Boolean;
    PostTime: TDateTime;
    nDealGold: Integer;
    sTargName: string[14];
  end;
  TPostGold = packed record
    sCharName: string[14];
    EGold: array[0..4] of TEGoldRcd;
  end;
  pTPostGold = ^TPostGold;

  TMsgHeaderNew = packed record //0X0C
    dwRunCode: LongWord; //0X04    $FF44FF44
    btIdent: Byte; //0X04
    btFalgs: Byte; //0X05
    wLength: Word; //0X06
    nSendTickCount: Integer; //0X08
  end;

  TOpenBoxItem = packed record
    nBoxItemMIdx: Int64;
    sBoxItemName: string[ItemNameLen];
    nKeyItemMIdx: Int64;
    sKeyItemName: string[ItemNameLen];
  end;

  TBoxItem = packed record //0X18
    sName: string[ItemNameLen]; //0X00
    btRate: Byte; //0X0F
    nLooks: Integer; //0X10
    nNumber: Integer; //0X14
  end;
  pTBoxItem = ^TBoxItem;
  TBoxItems = array[1..9] of TBoxItem;
  pTBoxItems = ^TBoxItems;

  TScriptTimer = packed record
    bActive: Boolean;
    dwExecTick: DWORD64;
    dwTnterval: LongWord;
  end;
  TScriptTimers = array[0..255] of TScriptTimer;

  //TColorEffect = (ceNone, ceGrayScale, ceGrayScaleMMX,ceBright, ceRed, ceGreen, ceBlue, ceYellow, ceFuchsia, ceCyan, ceDark, ceBlack, ceWihte, cePurple, cePurple2);

  TChrMsg = packed record
    Ident: Integer;
    X: Integer;
    Y: Integer;
    Dir: Integer;
    State: int64;
    Feature: int64;
    Saying: Integer; //string;  //1234
    Sound: Integer;
    dwDelay: LongWord;
  end;
  pTChrMsg = ^TChrMsg;

  TDropItem = packed record
    X: Integer;
    Y: Integer;
    id: Integer;
    looks: Integer;
    Name: string;
    Width: Integer;
    Height: Integer;
    FlashTime: DWORD;
    FlashStepTime: DWORD;
    FlashStep: Integer;
    BoFlash: Boolean;

    boNonSuch: Boolean;
    boPickUp: Boolean;
    boShowName: Boolean;
    color :Cardinal;
    autoPickTime: DWORD; //挂机同一个捡取失败之后尝试自动捡取时间
    autoPickType: DWORD; //范围自动捡取是否捡取
  end;
  pTDropItem = ^TDropItem;

  TUserCharacterInfo = packed record
    Name: string[19];
    Job: Byte;
    hair: Byte;
    Level: Word;
    Sex: Byte;
  end;

  TClientGoods = packed record
    Name: string;
    SubMenu: Integer;
    Price: int64;
    Stock: Int64;
    Grade: Integer;
  end;
  PTClientGoods = ^TClientGoods;

  TRouteInfo = packed record
    nServerIdx: Integer;
    nGateCount: Integer;
    sSelGateIP: string[15];
    sGameGateIP: array[0..15] of string[15];
    nGameGatePort: array[0..15] of Integer;
    nIndex:Integer;
  end;
  pTRouteInfo = ^TRouteInfo;

  TMapsScoreInfo = packed record
    sScriptSign: string[20];
    sClientName: string[20];
    sMap: string[20];
//    bClientShow: BOOL;
    iMaxMapIndex:Integer;

    bMapsScoreStart: bool;      //计分地图开始计算
    nKillCount: Integer;       //计分地图击杀数量
    nTotalDamage: Integer;     //计分地图的总伤害
    nTotalEXP: Integer;        //计分地图获取的总经验
    dFirstEnterTime:TDateTime;          //第一次进入计分地图时间
    dLastLeaveTime:TDateTime;          //最后离开计分地图时间
    nTotalTime:Int64;          //在计分地图里面累计时间
    nOnceTotalTime:Int64;      //单次在计分地图里面累计时间,实时更新,不记录

    dEnterTime:TDateTime;          //进入计分地图时间
    dLeaveTime:TDateTime;          //离开计分地图时间
    abClientShow: array[0..7] of Byte;  //控制显示:0结算标识,1副本名称,2最高层数,3击杀数量,4造成伤害,5获得经验,6进入时间,7累计时间
  end;
  pTMapsScoreInfo = ^TMapsScoreInfo;

  TPkMapScoreInfo = packed record
    bStartLog:bool;
    dStartTime:TDateTime;          //开始时间
    dLifeTime:Integer;          //生存时间
    nHpReplies:Integer;           //hp回复量
    nMpReplies:Integer;           //Mp回复量
    nTotalDamage: Integer;     //PK计分地图的总伤害
  end;
  pTPkMapScoreInfo = ^TPkMapScoreInfo;

  TCurrentMapScoreInfo = packed record
    nEXP: Integer;
    nKillCount: Integer;
    nDamage: Integer;
  end;
  pTCurrentMapScoreInfo = ^TCurrentMapScoreInfo;

{$IF VER_PATHMAP = 1}
  TPath = array of TPoint;
  pTPath = ^TPath;
{$ENDIF}

  TRandomAddValue = packed record
    nAddValueRate: Integer;
    abAddValueRate: array[0..14] of Byte;
    abAddValueMaxLimit: array[0..14] of Byte;
  end;

  TRefineItem = packed record
    sUpItemName: string[ItemNameLen];
    nSucessRate: Integer;
    nRevertRate: Integer;
    bNewLogic: Boolean;
    bRestore: Boolean;
    bCount: Integer;
    bDelCrystal: Boolean;
    RamAddValue: TRandomAddValue;
  end;
  pTRefineItem = ^TRefineItem;

  TClientRefineItem = packed record
    nMakeIndex: int64;
    sItemName: string[ItemNameLen];
  end;
  TClientRefineItems = array[0..2] of TClientRefineItem;
  TClientBuildAcus = array[0..7] of TClientRefineItem;

  THeroLevelRank = packed record //34
    sMasterName: string[14];
    sHeroName: string[14];
    nLevel: Word;
    nIndex: Word;
  end;
  pTHeroLevelRank = ^THeroLevelRank;
  THeroLevelRanks = array[0..9] of THeroLevelRank;
  pTHeroLevelRanks = ^THeroLevelRanks;

  THumanLevelRank = packed record //24
    sCharName: string[15];
    nLevel: Integer;
    nIndex: Integer;
  end;
  pTHumanLevelRank = ^THumanLevelRank;
  THumanLevelRanks = array[0..9] of THumanLevelRank;
  pTHumanLevelRanks = ^THumanLevelRanks;

  {TRegInfo = packed record
    sKey: string;
    sServerName: string;
    sRegSrvIP: string;
    nRegPort: Integer;
    //sGateIPaddr: string[20];
  end;}

  //登录器设置结构
  TLoginToolConfig = packed record
    FileName: string[50];//登录器可执行程序名称，不含扩展名exe
    Config1: string[50];
    Config2: string[50];
    //Config3: string[200];
    Config3: array[0..1023] of AnsiChar;
    Config7: string[49];
    Config8: Byte;   //通过位运算，保存是否读取 Wis, Wil, Wzl 的标志
  end;

  TCliCmdLines = array[0..21] of string[28];//由长度28的string的元素构成的数组

  TImgInfo = packed record
    Size: Integer;
    Offset: Integer;
  end;
  TBtnImg = packed record
    Visible: Boolean;
    Disabled: TImgInfo;
    Down: TImgInfo;
    Hot: TImgInfo;
    Up: TImgInfo;
  end;
  TRcHeader2 = packed record
    AlphaBlend: Boolean;
    AlphaBlendColor: Integer;
    UiSize: Integer;
    MainRect: TRect;
    CtrlRects: array[0..22] of TRect;
    BtnImgs: array[0..9] of TBtnImg;
  end;

  TRcHeader = packed record
    sCompany: string[050];  //公司名称// = '热血传奇';
    sFileName: string[050]; //登录器名称，显示在登录器上的标题// = '热血传奇登录器';
    sWebLink: string[255];  //网站公告的网址// = '55B19C2CB50DA4D16F8E345A00496A41359108DC0D5C25228D808D71F2E82078';
    sWebSite: string[255];  //官方网站 = '55B19C2CB50DA4D16F8E345A00496A4167BEFB55C9F9AD2F';
    sBbsSite: string[255];  //官方论坛// = '55B19C2CB50DA4D16F8E345A00496A4167BEFB55C9F9AD2F';

    sListSite: string[255];
    GameList: string[255]; //服务器列表文件网址// = '55B19C2CB50DA4D16F8E345A00496A41555B8ECAE49841B72C28D608615BB0E306F0C168FEC29FAECAFD4FDDAAE82DD8';
    GameList2: string[255];//后备服务器列表文件网址
    sSiteUrl: string[255]; //UpGrade的网址 = '55B19C2CB50DA4D16F8E345A00496A41555B8ECAE49841B74F398006846553C8AA3E4F7A4F6BDEAD';
    sPathAdress: array[1..3] of string[132];
    sLuiName1: string[65];
    sLuiName2: string[65];// end date
    sLuiName3: string[65];
    nPicSize: Integer;
  end;
  pTRcHeader = ^TRcHeader;

  TedHeader = packed record
    //sWebSite: string[255];
    nStrLen: Integer;
    nCetLen: Integer;
    nLoginToolCrc: Integer;
  end;

  THero = record
    sCharName: string[15];
    nPort: Integer;
  end;
  pTHero = ^THero;

  TDelChar = record
    sCharName: string[14];
    nLevel: Integer;
    btJob: Byte;
    btSex: Byte;
  end;
  pTDelChar = ^TDelChar;

  //----------------------------------------------------------
  TMarketItem = record
    item: TClientItem;
    UpgCount: Integer;
    Index: int64;
    SellPrice: Integer;
    btMoneyType:Byte; //货币类型
    SellWho: string[20];
    Selldate: string[10]; //(0312311210 = 2003-12-31 12:10 )
    SellState: Word
  end;
  PTMarketITem = ^TMarketItem;

  TEMailItem = record
  guid:string[36];
  Owerguid:string[36] ;
  sRecvWho:string[15] ;//接收人
  sSendWho:string[15] ;//发送人
  sTitle:string[15]; //邮件标题
  sContent:string[120]; //邮件内容
  sSendDate:string[20];//发送时间
  nGold :DWORD;   //金币
  nGameGold:DWORD; //元宝
  nGamePoint:DWORD;//泡点
  nPayPoint:DWORD;//充值点
  nGameGrid:DWORD;//灵符
  nAccPoint:DWORD;//无双币
  isRead:Boolean;
  itemCount:Integer;
  items:array[0..4] of TClientItem;
  end;
  PTEMailItem = ^TEMailItem;

  TEmailShow = record
    tShow:TObject;
    Item:TEMailItem;
  end;
  PTEmailShow = ^TEmailShow;

  TEMailItemLoad = record
  guid:string[36];
  Owerguid:string[36] ;
  sRecvWho:string[20] ;//接收人
  sSendWho:string[20] ;//发送人
  sTitle:string[20]; //邮件标题
  sContent:string[255]; //邮件内容
  sSendDate:string[30];//发送时间
  nGold :DWORD;   //金币
  nGameGold:DWORD; //元宝
  nGamePoint:DWORD;//泡点
  nPayPoint:DWORD;//充值点 金刚石
  nGameGrid:DWORD;//灵符
  nAccPoint:DWORD;//无双币
  isRead:Boolean;
  itemCount:Integer;
  items:array[0..4] of TUserItem;
  IsOK: Integer; // 搬苞蔼
  end;
  PTEMailItemLoad = ^TEMailItemLoad;

  TMarketLoad = record
    guid: string[36];
    Owerguid: string[36] ;
    UserItem: TUserItem; // DB 物品信息
    Index: int64; // DB 数据库ID
    MarketType: Integer; // 类型
    SetType: Integer; // 物品类型 武器 衣服 等
    SellCount: Integer;
    SellPrice: Integer; // 出售价格
    nMoneyType: Integer;
    ItemName: string[30]; // 物品名字
    MarketName: string[30]; // 交易行名字
    SellWho: string[20]; // 卖家买家对象
    Selldate: string[16]; // 出售时间(0312311210 = 2003-12-31 12:10 )
    SellState: Word; //1 = 出售 , 2 = 已经出售 3 等待出售
    IsOK: Integer; // 搬苞蔼
    buyPrice:Integer;//买家预期数量
    buyName:string[32];//买家名字
  end;
  PTMarketLoad = ^TMarketLoad;

  //------------------------------------------------------------
  TSearchSellItem = record
    guid:string[36];
    Owerguid:string[36] ;
    MarketName: string[25]; // 交易NPC名字
    who: string[25]; // 操作人
    ItemName: string[25]; // 物品名字
    MakeIndex: int64; //物品唯一ID
    ItemType: Integer; // 物品类型 武器 衣服 等
    ItemSet: Integer; // 物品设置
    sellindex: int64; // 出售物品唯一ID
    CheckType: Integer; // DB 检查物品状态
    IsOK: Integer; // 是否合法
    SellState: Word; // 1 = 出售 , 2 = 已经出售 3 等待出售
    UserMode: Integer; // 1= 购买  , 2= 查询 3 出售
    isAsc   : Boolean;//升序
    nSortType:Integer;//按什么排序 0价格  1时间
    nMoneyType:Integer; //货币类型  0 金币 1元宝  2泡点 3金刚石 4灵符 5无双币
    pList: TList; // 查询返回的物品列表
  end;
  PTSearchSellItem = ^TSearchSellItem;

  TSearchEmail = record
  who: string[25]; // 操作人
  IsOK: Integer; // 是否合法
  pList: TList; // 查询返回的邮件列表
  end;
  PTSearchEmail = ^TSearchEmail;

  TQueryLogSQL = record
    sSQL: string;
    pObj: Pointer;
  end;
  PTQueryLogSQL = ^TQueryLogSQL;

  TUserAccount = record
    UserName: string[25];                   // 操作人
    IsOK: Integer;                          // 是否合法
    qfCallBack: string;                     // QF回调标签
    varName: string;                        // 保存字符的变量
    AccRecord: TAccountDBRecord;            // 账号信息
    sCheckCode: string;                     // 验证码
    sTick: string                           // 验证码有效时间
  end;
  PTUserAccount = ^TUserAccount;

  //------------------------------------------------------------
  TMarKetReqInfo = record
    UserName: string[30];
    MarketName: string[30];
    SearchWho: string[30];
    SearchItem: string[30];
    ItemType: Integer;
    ItemSet: Integer;
    SellState: Word; // 1 = 出售 , 2 = 已经出售 3 等待出售
    isAsc   : Boolean;//升序
    nSortType:Integer;//按什么排序 0价格  1时间
    nMoneyType:Integer; //货币类型  0 金币 1元宝  2泡点
    UserMode: Integer;
    nMakeIndex:int64;
  end;

  TCenterMsg = record
    s: string;
    fc: Integer;
    bc: Integer;
    dwSec: Integer;
    nY:Integer;
    dwNow: LongWord;
    dwCloseTick: LongWord;
  end;
  PTCenterMsg = ^TCenterMsg;

  TDelayType = (d_None,d_progress);
  TDelayTypeFlag = array of TDelayType;
  TDelayCallNPC = record
    nDelayType:TDelayType;//延时类型
    nDelayCall: Integer;     //延时 多少毫秒
    dwDelayCallTick: DWORD64; //开始计时的时间
    DelayCallNPC: Integer;   //回调NPC
    sDelayCallLabel: string; //成功回调标签
    sFailCallLabel:string; //失败回调标签
    bProcessed: Boolean; //是否已经完成
    bCanCancel:Boolean;//是否可以中断
    dwReleaseTick: DWORD64; //被处理的时间
  end;
  PTDelayCallNPC = ^TDelayCallNPC;

  TShortStr = string[255];
  PTShortStr = ^TShortStr;

  TClientMission = record
    sIndex: string[14];
    sTitle: string[128];
    sDesc: string;
    nStep:Integer;
  end;
  PTClientMission = ^TClientMission;

{$IF NewVisibleEvent = 1}
  TVisibleEvent = record
    Event: TObject;
    nVisibleFlag: Integer;
    nEventType: Integer;
    nEventParam: Integer;
    nX, nY: Integer;
  end;
  pTVisibleEvent = ^TVisibleEvent;
{$IFEND}

  TVNeedLevel = array[1..5] of Integer;
  TVNeedLevels = array[0..3] of TVNeedLevel;

  TVDamageExRate = array[0..15] of Word;
  TSeriesSkills = array[0..3] of string;

  TMouseItemInfos = record
    iName: string[30];
    StdMode: Byte; //0X0F
    Shape: Byte; //0X10
    Weight: Byte; //0X11
    AniCount: Word; //0X12
    Source: shortint; //0X13
    Reserved: Byte; //0X14
    NeedIdentify: Byte; //0X15
    looks: Word; //0X16
    DuraMax: Integer; //0X18
    AC: Word; //0X1A
    MAC: Word; //0X1C
    DC: Word; //0X1E
    MC: Word; //0X20
    SC: Word; //0X22
    Need: Byte; //0X24
    NeedLevel: Byte; //0X25
    w26: Word; //0X26
    Price: Integer; //0X28
  end;
  PTMouseItemInfos = ^TMouseItemInfos;



  TZipInfo = packed record
    dwSize:LongWord;              //实际数据长度
    dwZipSize:LongWord;           //压缩数据长度
    dwZipLevel:LongWord;          //压缩数据等级
  end;

  //改名系统结构体
  THumNameRcd = record
    sAccount: string[10];
    sChrName: string[14];
    sChrNewName: string[14];
  end;
  pTHumNameRcd = ^THumNameRcd;


 //查看收人信息
  TGuildShouRenInfo = record
     sGuildname:string[64];
     notice:string[64];
     nLevel:integer;
     njob:Byte; //(1 << 0 = 武士) (1 << 1 = 法师) (1 << 2 = 道士)
     allowAlly:Byte;
  end;
  //加入行会界面 公会信息
  TGuildSamepleInfo = record
     sGuildname:string[64];
     nOnlineCnt:integer;
     nTotCnt:integer;
     nMax:integer;
  end;

  //加入行会界面 收人消息
  TGuildShouRenMsg = record
      cnt:integer;
      nPageId:integer;
      data:array [0..5] of TGuildSamepleInfo;
  end;
  //玩家申请信息
  TGuildReqPlayerInfo = record
      name:string[64];
      btSex:byte;
      btJob:byte;
      nLevel:integer;
      state:byte;
  end;
  //玩家申请包
  TGuildReqJoinMsg = record
      cnt:integer;
      playerInfo:array [0..6] of TGuildReqPlayerInfo;
  end;
  //同意与拒绝玩家入会
  TGuildReqState = record
      name:string[32];
      state:byte;
  end;

  TGuildReqStateMsg = record
      cnt:integer;
      ReqList:array [0..5] of TGuildReqState;
  end;
  
  //公会玩家信息
  TGuildMemerData = record
      info:TGuildReqPlayerInfo;
      rankName:string[64];
      nRankId:integer;
  end;

  //大表情Emoji结构。
  TBigEmojiInfo = record
    nStart:Integer;
    nNum:Integer;
    nCurrFram:Integer;//当前播放帧；
    dwShowTime:DWORD;//头顶显示时间
    dwPlayTick:DWORD;
  end;
  pTBigEmojiInfo = ^TBigEmojiInfo;

  function  GetByte64(input:uint64;index:Byte):Byte;//取 byte 0 - 7；
  function  GetWord64(input:uint64;index:Byte):WORD;
  function  GetInt64(input:uint64;index:Byte):Integer;


  procedure SetByte64(var input:uint64;index:Byte;value:Byte);
  procedure SetWord64(var input:uint64;index:Byte;value:Word);

  function  JoinInt64(a,b:Int64):Int64;

  function  GetByte(input:uint;index:Byte):Byte;//取 byte 0 - 7；
  function  GetWord(input:uint;index:Byte):WORD;
  procedure SetByte(var input:uint;index:Byte;value:Byte);
  procedure SetWord(var input:uint;index:Byte;value:Word);



  function APPRfeature(cfeature: Integer): Word;
  function RACEfeature(cfeature: Integer): Byte;
  function HAIRfeature(cfeature: Integer): Byte;
  function DRESSfeature(cfeature: Integer): Byte;
  function WEAPONfeature(cfeature: Integer): Byte;
  function Horsefeature(cfeature: Integer): Byte;
  function Effectfeature(cfeature: Integer): Byte;
  function MakeHumanFeature(btRaceImg, btDress, btWeapon, btHair: WORD): uint64;
  function MakeMonsterFeature(btRaceImg, btWeapon: WORD; wAppr: Word): uint64;
  procedure InitIPNeedExps();
  function DosDevicePath2LogicalPath(const lpszDosPath: PChar; lpszFilename: PChar; dwLength: DWORD): DWORD;
  function GetSysTickCount():UInt64;


  function  gcd(a,b:int64):int64; //最大公约数

  function tick_diff(tick_start:UInt64; tick_end: UInt64 = 0): Cardinal;
  function DateTimeToStrEx(input:TDateTime):string;
  function CheckBinary(input:DWORD;index:Byte):Boolean;//检测二进制位
  procedure AddBinary(var input:DWORD;index:Byte);//设置二进制位
  procedure DecBinary(var input:DWORD;index:Byte);//取消二进制位
  function  Lowbit(input:Integer):Integer;            //取最低的二进制位
  function  GetChineseNum(input:string):string;       //阿拉伯数字转中文数字
  function  IsRelationOpt(input:string):Boolean;    //是否关系运算符
  function  GetClientItemDeLen():Integer;
  function  CanInDrugsWindow(stdmode,shape:Integer):Boolean;//道具能否放在快捷栏中

  function GetTickCount: UInt64;


  procedure GetProcess(var processList: TList);  //枚举进程
  function FindMainWindow(AProcessID: THandle): THandle;  //查找主进程窗口
  function fFindMainWindow(hWnd: HWND; lParam: PMainWindow): BOOL; stdcall;
  function IsMainWindow(wndHandle: HWND): Boolean;
  procedure RunOnCPU(CpuNo: Integer);  //CPU核数从0开始
  procedure RunOnCPUEx(CPUCount: Integer);
  procedure SaveToDisk(Directory: string; fileName: string; str_msg: string);
  function  BitCount(input:uInt64):Integer;

  function  IpToInt(ip:string):Integer; //点分十进制
  function  IntToIp(ip:Integer):string;
  function  GetItem32To64(item32:TUserItem32):TUserItem;
var
{$IF SERIESSKILL}
  g_VLevelStr: array[1..5] of string = ('一', '二', '三', '四', '五');
  g_VaStrs: array[0..3] of string = ('冲脉', '阴跷', '阴维', '任脉');
  g_VPStrs: array[0..3, 1..5] of string = (
    ('幽门', '通谷', '商曲', '四满', '横骨'),
    ('睛明', '盘缺', '交信', '照海', '然谷'),
    ('廉泉', '期门', '府舍', '冲门', '筑宾'),
    ('承浆', '天突', '鸠尾', '气海', '曲骨')
    );
  g_JobofSeriesSkill: array[0..2] of TSeriesSkills = (
    ('三绝杀', '追心刺', '断岳斩', '横扫千军'),
    ('双龙破', '凤舞祭', '惊雷爆', '冰天雪地'),
    ('虎啸诀', '八卦掌', '三焰咒', '万剑归宗')
    );
  g_VNeedLevels: TVNeedLevels = (
    (5, 7, 10, 13, 15),
    (19, 23, 25, 27, 33),
    (36, 39, 45, 48, 52),
    (56, 62, 72, 81, 95)
    );
  g_VLvNeesAcus: TVNeedLevels = (
    (5, 3, 2, 2, 2),
    (6, 4, 3, 3, 3),
    (7, 5, 4, 4, 4),
    (8, 6, 5, 5, 5)
    );
  g_VPoDamageExRate: array[0..3] of Word = (10, 15, 25, 30);
  g_VLvDamageExRate: TVDamageExRate = (0, 5, 10, 20, 30, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50);
{$ENDIF SERIESSKILL}

  g_dwIPNeedInfo: PTIPLvlNeedList;

implementation


uses HUtil32;

function gcd(a,b:int64):int64;
begin
   if b = 0 then begin
      Result := a;
   end else begin
      Result := gcd(b,a mod b);
   end;
end;
procedure InitIPNeedExps();
var
  t: Int64;
  i: Integer;
begin
  New(g_dwIPNeedInfo);
  for i := 1 to MAX_IPLEVEL do begin
    g_dwIPNeedInfo^[i].nPower := i * i + 10;
    t := 200 * i * i * i + 13940 * i * i + 55330;
    if t > 4200000000 then
      t := 4200000000;
    g_dwIPNeedInfo^[i].dwPExp := t;
    t := 200 * i * i * i + 14240 * i * i + 62400;
    if t > 4200000000 then
      t := 4200000000;
    g_dwIPNeedInfo^[i].dwHExp := t;
  end;
end;

function WEAPONfeature(cfeature: Integer): Byte;
begin
  Result := Hibyte(cfeature);
end;

function DRESSfeature(cfeature: Integer): Byte;
begin
  Result := Hibyte(HiWord(cfeature));
end;

function APPRfeature(cfeature: Integer): Word;
begin
  Result := HiWord(cfeature);
end;

function HAIRfeature(cfeature: Integer): Byte;
begin
  Result := HiWord(cfeature);
end;

function RACEfeature(cfeature: Integer): Byte;
begin
  Result := cfeature;
end;

function Horsefeature(cfeature: Integer): Byte;
begin
  Result := Lobyte(LoWord(cfeature));
end;

function Effectfeature(cfeature: Integer): Byte;
begin
  Result := Hibyte(LoWord(cfeature));
end;

function MakeHumanFeature(btRaceImg, btDress, btWeapon, btHair: WORD): UInt64;
begin
//  Result := MakeLong(MakeWord(btRaceImg, btWeapon), MakeWord(btHair, btDress));
    //btRaceImg  btWeapon btHair btDress
    Result := 0;
    SetWord64(Result,0,btRaceImg);
    SetWord64(Result,2,btWeapon);
    SetWord64(Result,4,btHair);
    SetWord64(Result,6,btDress);
end;

function MakeMonsterFeature(btRaceImg, btWeapon: WORD; wAppr: Word): UInt64;
begin
//  Result := MakeLong(MakeWord(btRaceImg, btWeapon), wAppr);
//  btRaceImg  btWeapon wAppr
  Result := 0;
  SetWord64(Result,0,btRaceImg);
  SetWord64(Result,2,btWeapon);
  SetWord64(Result,4,wAppr);
end;

function DosDevicePath2LogicalPath(const lpszDosPath: PChar; lpszFilename: PChar; dwLength: DWORD): DWORD;
var
  szTemp, szName: array[0..MAX_PATH - 1] of Char;
  szDrive: array[0..2] of Char;
  bFound: Boolean;
  P: PChar;
  nlen, uNameLen: Integer;
begin

  // Translate path with device name to drive letters.
  Result := 0;
  FillChar(szTemp[0], SizeOf(szTemp), 0);
  FillChar(lpszFilename^, dwLength, 0);

  nlen := GetLogicalDriveStrings(SizeOf(szTemp) - 1, szTemp);
  if (lpszDosPath = nil) or (nlen = 0) then begin
    Exit;
  end;

  szDrive := ' :';
  bFound := False;
  P := @szTemp[0];

  while not bFound do begin
    // Copy the drive letter to the template string
    szDrive[0] := P^;

    // Look up each device name
    if QueryDosDevice(szDrive, szName, SizeOf(szName)) > 0 then begin
      uNameLen := StrLen(szName);
      if uNameLen < MAX_PATH then begin
        bFound := StrLIComp(lpszDosPath, szName, StrLen(szName)) = 0;
        if bFound then begin
          // Reconstruct pszFilename using szTemp
          // Replace device path with DOS path
          StrFmt(lpszFilename, '%s%s', [szDrive, lpszDosPath + uNameLen]);
          Result := StrLen(lpszFilename);
          Break;
        end;
      end;
    end;
    // Go to the next NULL character.
    Inc(P);
    Dec(nlen);
    if nlen <= 0 then
      Break;
  end;

end;

function GetSysTickCount(): UInt64;
var
//nFreq,nCount:Int64;
  diff: UInt64;
begin
//  if (QueryPerformanceFrequency(nFreq) and  QueryPerformanceCounter(nCount)) then
//  begin
//    Result := Trunc(nCount / nFreq * 1000);
//  end;
  Result := GetTickCount();

end;

function DateTimeToStrEx(input:TDateTime):string;
var
  day:Int64;
  hour:TDateTime;
  tmp,tmp2,tmp3:string;
begin
    day := Trunc(input);
    hour := input - day;
    tmp := datetimetoStr(input);//.Substring();//(0,10);
    tmp := GetValidStr3(tmp,tmp3,[' ']);
    tmp2 := datetimetoStr(hour).Substring(11);
    Result := tmp3 +' '+ tmp2;
end;

function CheckBinary(input:DWORD;index:Byte):Boolean;//检测二进制位
begin
    index := index mod 32;
    Result := (input and  (1 shl index)) <> 0;
end;

procedure AddBinary(var input:DWORD;index:Byte);//设置二进制位
begin
    index := index mod 32;
    input := input or  (1 shl index);
end;

procedure DecBinary(var input:DWORD;index:Byte);//取消二进制位
begin
    index := index mod 32;
    input := input and  (not (1 shl index));
end;

function  Lowbit(input:Integer):Integer;            //取最低的二进制位
begin
    Result := input and (-input);
end;

function  BitCount(input:uInt64):Integer;
begin
    Result := 0;
    while input <> 0 do begin
        input := input and (input - 1);
        inc(Result);
    end;
end;

//num - 原数字  index - 第几个  取长度多少
function _GetByte64(num:uint64;index,len:Byte):uint64;
var
  maxn:Integer;
  shf:Integer;
begin
    Result := 0;
    if index + len >= sizeof(uint64) then begin
       if index < sizeof(uint64) then Result := num shr (index * 8);
       Exit;
    end;
    if len <= 0 then len := 1;

    maxn := sizeof(uint64) - len;
    index := index mod (maxn + 1);
    shf := index * 8;

    Result := (num shr shf) and (( uint64(1) shl (len * 8 + 1)) - 1);
end;
//num - 原数字  index - 第几个  取长度多少 从0开始
function _GetByte(num:uint;index,len:Byte):uint;
var
  maxn:Integer;
  shf:Integer;
begin
    Result := 0;
    if index + len >= sizeof(uint) then begin
       if index < sizeof(uint) then Result := num shr (index * 8);
       Exit;
    end;
    if len <= 0 then len := 1;

    //最大下标
    maxn := sizeof(uint) - len;

    index := index mod (maxn + 1);
    //偏移
    shf := index * 8;

    Result := (num shr shf) and (( uint(1) shl (len * 8 + 1)) - 1);
end;

//下标0-7
procedure _SetByte(var input:uint;index,len:Byte;value:uint);
var
  maxn,shf:Integer;
  tmp,tmp2:uint;
begin
    if (len <= 0) or (index >= sizeof(uint)) then exit;

    //从起始位置全部截取
    if index + len >= sizeof(uint) then begin
       len := sizeof(uint) - index;
       //直接赋值
       if len = sizeof(uint) then begin
          input := value;
          exit;
       end;
    end;
    //最大下标
    maxn := sizeof(uint) - len;
    //
    index := index mod (maxn + 1);
    //起始偏移
    shf := index * 8;

    //截取长度用1覆盖
    tmp := ( uint(1) shl (len * 8 )) - 1;
    //偏移到起始位置
    tmp := tmp shl shf;
    //消去原来截取的值
    input := input and (not tmp);
    //把替代值 对齐到起始位置  并消除除截取之外的值
    tmp2 := (value shl shf) and tmp;
    //替换原来的值
    input := input or tmp2;
end;

procedure _SetByte64(var input:uint64;index,len:Byte;value:uint64);
var
  maxn,shf:Integer;
  tmp,tmp2:uint64;
begin
    if (len <= 0) or (index >= sizeof(uint64)) then exit;

    //从起始位置全部截取
    if index + len >= sizeof(uint64) then begin
       len := sizeof(uint64) - index;
       //直接赋值
       if len = sizeof(uint64) then begin
          input := value;
          exit;
       end;
    end;
    //最大下标
    maxn := sizeof(uint64) - len;
    //
    index := index mod (maxn + 1);
    //起始偏移
    shf := index * 8;

    //截取长度用1覆盖
    tmp := ( uint64(1) shl (len * 8 )) - 1;
    //偏移到起始位置
    tmp := tmp shl shf;
    //消去原来截取的值
    input := input and (not tmp);
    //把替代值 对齐到起始位置  并消除除截取之外的值
    tmp2 := (value shl shf) and tmp;
    //替换原来的值
    input := input or tmp2;
end;

function GetByte(input:uint;index:Byte):Byte;
begin
    Result := _GetByte(input,index,sizeof(Byte));
end;

function  GetWord(input:uint;index:Byte):WORD;
begin
    Result := _GetByte(input,index,sizeof(WORD));
end;

function  GetInt64(input:uint64;index:Byte):Integer;
begin
    Result := _GetByte64(input,index,sizeof(Integer));
end;

procedure SetByte(var input:uint;index:Byte;value:Byte);
begin
    _SetByte(input,index,sizeof(Byte),value);
end;

procedure SetWord(var input:uint;index:Byte;value:Word);
begin
     _SetByte(input,index,sizeof(Word),value);
end;

function  GetByte64(input:uint64;index:Byte):Byte;//取 byte 0 - 7；
begin
    Result := _GetByte64(input,index,sizeof(Byte));
end;
function  GetWord64(input:uint64;index:Byte):WORD;
begin
    Result := _GetByte64(input,index,sizeof(WORD));
end;

procedure SetByte64(var input:uint64;index:Byte;value:Byte);
begin
    _SetByte64(input,index,sizeof(Byte),value);
end;
procedure SetWord64(var input:uint64;index:Byte;value:Word);
begin
    _SetByte64(input,index,sizeof(Word),value);
end;

function  JoinInt64(a,b:Int64):Int64;
begin
   Result := (a and $ffffffff) or (b shl 32);
end;
function _GetChineseNum(input:string):string;
var
  len:Integer;
  I,lastZero,id: Integer;
  first,last:integer;
  tmp,tmp2:string;
  res,res2:string;
begin
    Result := '';
    try
        if input = '' then exit;

        len := length(input);
        if len >= 9 then begin
            tmp := input.Substring(0,len - 8);
            tmp2 := input.Substring(len - 8);
            res := _GetChineseNum(tmp);
            res2 := _GetChineseNum(tmp2);
            if (res = ChineseNum[0]) and (res2 = ChineseNum[0]) then  Result := ChineseNum[0]
            else if res = ChineseNum[0] then res := ''
            else res := res + ChineseUnit[6];

            if res2 <> ChineseNum[0] then Result := res + res2
            else Result := res;
        end else if len >= 5 then begin
            tmp := input.Substring(0,len - 4);
            tmp2 := input.Substring(len - 4);
            res := _GetChineseNum(tmp);
            res2 := _GetChineseNum(tmp2);

            if (res = ChineseNum[0]) and (res2 = ChineseNum[0]) then  Result := ChineseNum[0]
            else begin
                if res = ChineseNum[0] then res := ''
                else res := res + ChineseUnit[5];

                if (length(tmp2) = 4) and (tmp2[1] <> '0') then  Result := res  + res2
                else Result := res + ChineseNum[0] + res2;
            end;
        end else begin
             tmp := input;
             for I := 1 to 4 - len do begin
                 tmp := '0' + tmp;
                 input := input + '0';
             end;
             for I := 1 to 4 do begin
                input[i] := tmp[4 - i + 1];
             end;
             first := 1;
             last := 4;
             while (first <= 4) and (input[first] = '0')  do Inc(first);
             while (last >= 1) and (input[last] = '0') do  Dec(last);
             lastZero := 0;
             while first <= last do begin
                   id := ord(input[first]) - ord('0');
                   if input[first] <> '0' then begin
                        Result := ChineseNum[id] + ChineseUnit[first] + Result;
                        lastZero := 0;
                   end else begin
                        if lastZero = 0 then
                            Result := ChineseNum[id] + Result;
                        lastZero := 1;
                   end;
                   Inc(first);
             end;
             if Result = '' then Result := ChineseNum[0];
        end;
    except on E: Exception do
//        g_logs.AddLog(Format('GetBigNumEx Error,Message = %s',[E.Message]),LOGERROR);
    end;
end;

//阿拉伯数字转中文数字
function GetChineseNum(input:string):string;
var
  num:integer;
  id:Integer;
begin
    try
        Result := '';
        if input = '' then exit;

        num := Str_ToInt(input,0);
        if (num >= 10) and (num < 20) then begin
          Result := ChineseUnit[2];
          id := num - 10;
          if id > 0 then Result := Result + ChineseNum[id];
          exit;
        end;
        Result := _GetChineseNum(input);
    except on E: Exception do
//        g_logs.AddLog(Format('GetBigNum Error,Message = %s',[E.Message]),LOGERROR);
    end;
end;

function  IsRelationOpt(input:string):Boolean;    //是否关系运算符
begin
    Result := (input = '>') or (input = '=') or (input = '<') or (input = '>=') or (input = '<=');

end;

function  GetClientItemDeLen():Integer;
begin
    Result := (SizeOf(TClientItem) * 4 div 3 + Integer((SizeOf(TClientItem) mod 3) <> 0)) ;
end;

//道具能否放在快捷栏中
function  CanInDrugsWindow(stdmode,shape:Integer):Boolean;
begin
    Result := (stdmode <= 3) or ((stdmode = 31) and (shape = 2));
end;
function _tick_diff(tick_start: UInt64; tick_end: UInt64 = 0): Cardinal;
var
    first ,second ,diff , mmax, QuartNum , QuartNum3:UInt64;
    outBound,outBound2,inBound:Boolean;
begin
  Result := 0;

  first := tick_start;
  second := tick_end;

  mmax := UInt64(High(Cardinal)) + 1;
  //时间间隔
  diff := (second - first + mmax) mod mmax;
  //判断大小

  QuartNum := (High(Cardinal) div 4);   // 1/4
  QuartNum3 := High(Cardinal) - QuartNum;// 3/4

  outBound := (first <= QuartNum) and (second >= QuartNum3);
  outBound2 := (second <= QuartNum) and (first >= QuartNum3);

  //未越界
  inBound := (not outBound) and (not outBound2);
  //判断大于等于
  if outBound2 or (inBound and (second >= first) )then begin
      Result := diff;
      if outBound2 then begin
          Result := mmax - diff;
      end;
  end;

end;

{
当前时间 大于等于(不是数值上的大于) 开始时间 返回 差值
当前时间 小于 开始时间 从数学上讲需要返回负数 返回值为无符号数 负数替换为 无符号最小值0
}
function tick_diff(tick_start: UInt64; tick_end: UInt64 = 0): Cardinal;
var
    first ,second:UInt64;
begin
  first := tick_start;
  second := tick_end;
  Result := 0;
  if tick_end = 0  then second := GetTickCount;

  //特判 未赋值标记
  if first = 0 then begin
     Result := second;
     exit;
  end;
  if first < second then
    Result := second - first;



  //Result := _tick_diff(first,second);
end;

function GetTickCount: UInt64;
var
  nFreq,nCount:Int64;
  diff: UInt64;
begin
//  if (QueryPerformanceFrequency(nFreq) and  QueryPerformanceCounter(nCount)) then
//  begin
//    Result := Trunc(nCount / nFreq * 1000);
//  end;
 if TOSVersion.Check(6) then begin
    var tick := GetTickCount64;
  //  Result := tick;
  //  var timeResult := timeBeginPeriod(1);
    var utime := timeGetTime();
  //  Result := utime;
  //  timeResult := timeEndPeriod(1);

    Result := ( tick and $FFFFFFFFFFFF0000 ) or ( utime and $000000000000FFFF );

    if Result > tick then begin
      if tick > utime then
        diff := tick - utime
      else
        diff := utime - tick;
      if Result - tick > diff then
        Result := Result - $10000;
    end else if Result < tick then begin
      if tick > utime then
        diff := tick - utime
      else
        diff := utime - tick;
      if tick - Result > diff then
        Result := Result + $10000;
    end;
 end else begin
  Result := timeGetTime(); //XP系统调用
 end;

end;

//枚举进程
procedure GetProcess(var processList: TList);
var
  processentry32: PPROCESSENTRY32W;
  hSnap: THandle;
  boFlag : Boolean;
  boFirst: Boolean;
begin
  if processList <> nil then begin
    boFirst := True;
    hSnap := CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);   //获得进程快照句柄
    if hSnap <> INVALID_HANDLE_VALUE then begin
      while True do begin
        New(processentry32);
        FillChar(processentry32^,SizeOf(tagPROCESSENTRY32W),#0);
        processentry32^.dwSize := SizeOf(tagPROCESSENTRY32W);
        if boFirst then begin
          boFirst := False;
          boFlag := Process32First(hSnap,processentry32^);
        end else begin
          boFlag := Process32Next(hSnap,processentry32^);
        end;

        if boFlag then begin
          processList.Add(processentry32);
        end else begin
          Dispose(processentry32);
          Break;
        end;
      end;
      CloseHandle(hSnap);
    end;
  end;
end;

function FindMainWindow(AProcessID: THandle): THandle;
var
  vMainWindow: TMainWindow;
begin
  vMainWindow.ProcessID := AProcessID;
  vMainWindow.MainWindow := 0;
  EnumWindows(@fFindMainWindow, Integer(@vMainWindow));
  Result := vMainWindow.MainWindow;
end;

function IsMainWindow(wndHandle: HWND): Boolean;
var
  arr: array[0..254] of Char;
begin
  Result := (GetWindow(wndHandle, GW_OWNER) = 0) and IsWindowVisible(wndHandle) and (GetWindowText(wndHandle, @arr, SizeOf(arr)) <> 0);
end;

function fFindMainWindow(hWnd: HWND; lParam: PMainWindow): BOOL; stdcall;
var
  vProcessID: DWORD;
begin
  GetWindowThreadProcessId(hWnd, vProcessID);
  if (lParam^.ProcessID = vProcessID) and IsMainWindow(hWnd) then begin
    lParam^.MainWindow := hWnd;
    Result := False;
  end else
    Result := True;
end;

//将线程运行在指定cpu核上
//CPU核数从0开始
procedure RunOnCPU(CpuNo: Integer);
begin
  SetProcessAffinityMask(GetCurrentProcess,1 shl CpuNo);
  SetThreadAffinityMask(GetCurrentThread,1 shl CpuNo);
end;

//将线程运行在多个cpu核上
//参数为0则 将线程运行在所有cpu核上
procedure RunOnCPUEx(CPUCount: Integer);
begin
  if (CPUCount > System.CPUCount) or (CPUCount <= 0) then begin
    CPUCount := System.CPUCount;
  end;
  SetProcessAffinityMask(GetCurrentProcess,1 shl CPUCount - 1);
  SetThreadAffinityMask(GetCurrentThread,1 shl CPUCount - 1);
end;

procedure SaveToDisk(Directory: string; fileName: string; str_msg: string);
var
  filepath: string;
  F: TextFile;
begin
  if (Directory <> '') and (fileName <> '') and (str_msg <> '') then begin
    if not DirectoryExists(Directory) then begin  //检测目录是否存在
      ForceDirectories(Directory);  //不存在则创建目录
    end;
    filepath := Directory + fileName;
    AssignFile(F, filepath);
    if not FileExists(filepath) then  //检测文件是否存在
      Rewrite(F)  //不存在则创建文件
    else
      Append(F);  //向文件末尾追加数据

    Writeln(F, str_msg);
    Flush(F);  //保存数据到磁盘
    CloseFile(F);
  end;
end;
function  IpToInt(ip:string):Integer; //点分十进制
var
   num:Byte;
   i,c,len:Integer;
begin
    Result := 0;
    len := length(ip);
    num := 0;
    c := 24;
    for I := 1 to len do begin
        if ip[i] = '.' then begin
            Result := Result + (num shl c);
            num := 0;
            c := c - 8;
            if c < 0 then break;
        end;
    end;
    if c >= 0 then Result := Result + (num shl c);
end;




function  IntToIp(ip:Integer):string;
begin
    Result := format('%d.%d.%d.%d',[GetByte(ip,3),GetByte(ip,2),GetByte(ip,1),GetByte(ip,0)]);
end;

function  GetItem32To64(item32:TUserItem32):TUserItem;
begin
   FillChar(Result,sizeof(TUserItem),#0);
   Result.MakeIndex :=  item32.MakeIndex;
   Result.wIndex :=  item32.wIndex;
   Result.Dura := item32.Dura;           //当前持久  重叠物品则标识物品数量
   Result.DuraMax := item32.DuraMax;        //持久上限
   Result.NameColor := item32.NameColor;         //物品名称颜色
   Move(item32.btValue,Result.btValue,sizeof(Result.btValue));
   Move(item32.btValueEx,Result.btValueEx,sizeof(Result.btValue));
   Move(item32.Reserved,Result.Reserved,sizeof(Result.btValue));
   Result.nPageAndPos := item32.nPageAndPos;
end;

end.
