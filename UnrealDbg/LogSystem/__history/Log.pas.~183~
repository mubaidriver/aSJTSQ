unit Log;

interface

uses Winapi.Windows, Vcl.ComCtrls, Winapi.Messages, System.Classes, System.SysUtils;

type
  TLog = class
  private
    FRichEditLog: TRichEdit;
    FLock: TRTLCriticalSection;
  public
    constructor Create;
    destructor Destroy; override;

    procedure Lock;
    procedure UnLock;
    procedure outDebug(sText: string);
    procedure TLog.outInfo(sText: string);
    procedure outError(sText: string);
    procedure LogPrint(sText: string; LogType: Word);
    procedure RichEditClear(value: Word);
    procedure setLog(RichEdit: TRichEdit);
    procedure WriteLogFile(sText: string; LogType: Word);
  end;

var
  sLog: TLog;


implementation

const
  DEBUG_TYPE = 0;
  ERROR_TYPE = 1;
  INFO_TYPE  = 2;

{ TLog }

constructor TLog.Create;
begin
  inherited;
  InitializeCriticalSection(FLock);
end;

destructor TLog.Destroy;
begin
  DeleteCriticalSection(FLock);
  inherited;
end;

procedure TLog.Lock;
begin
  EnterCriticalSection(FLock);
end;

procedure TLog.UnLock;
begin
  LeaveCriticalSection(FLock);
end;

procedure TLog.setLog(RichEdit: TRichEdit);
begin
  FRichEditLog := RichEdit;
end;

procedure TLog.RichEditClear(value: Word);
begin
  if not Assigned(FRichEditLog) then Exit;

  if FRichEditLog.Lines.Count > value then
    FRichEditLog.Clear;
end;

procedure TLog.WriteLogFile(sText: string; LogType: Word);
var
  F: TextFile;
  sLogFile, sLogDir: string;
begin
  if sText <> '' then begin
    case LogType of
      DEBUG_TYPE: begin
        Exit;
      end;
      INFO_TYPE: begin
        sText := DateTimeToStr(Now) + ' [INFORMATION]: ' + sText;
      end;
      ERROR_TYPE: begin
        sText := DateTimeToStr(Now) + ' [Error]: ' + sText;
      end;
    end;

    sLogDir := '.\Log';
    if not DirectoryExists(sLogDir) then
      ForceDirectories(sLogDir);

    sLogFile := sLogDir + '\Log.txt';
    try
      AssignFile(F, sLogFile);
      if not FileExists(sLogFile) then
        Rewrite(F)
      else
        Append(F);

      Writeln(F, sText);
      Flush(F);
    finally
      CloseFile(F);
    end;
  end;
end;

procedure TLog.LogPrint(sText: string; LogType: Word);
begin
  Lock;
  try
    if (sText <> '') and (Assigned(FRichEditLog)) then begin
      try
        FRichEditLog.Lines.Add(DateTimeToStr(Now) + ' ' + sText);
        RichEditClear(200);
      except

      end;
      SendMessage(FRichEditLog.Handle, WM_VSCROLL, SB_BOTTOM, 0); //ÏòÉÏ¹ö¶¯
      WriteLogFile(sText,LogType);
    end;
  finally
    UnLock;
  end;
end;

procedure TLog.outDebug(sText: string);
begin
  LogPrint(sText,DEBUG_TYPE);
end;

procedure TLog.outInfo(sText: string);
begin
  LogPrint(sText,DEBUG_TYPE);
end;

procedure TLog.outError(sText: string);
begin
  LogPrint(sText,ERROR_TYPE);
end;

initialization
begin
  sLog := TLog.Create;
end;

finalization
begin
  sLog.Free;
end;

end.
