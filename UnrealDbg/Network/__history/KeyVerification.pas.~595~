unit KeyVerification;

interface

uses IdHTTP, System.SysUtils, System.Classes, System.JSON, System.DateUtils, IdHashMessageDigest, Vcl.Forms,
  Winapi.Windows;

type

  //身份验证
  TAuthentication = class
  private
    m_appkey: string;  //软件秘钥
    m_token: string;  //登录返回的token令牌
    m_cdkey: string;  //登录密钥
  public
    constructor Create;
    destructor Destroy; override;
    function SoftwareInit: Boolean;
    function cdkeyLogin: Boolean;
    function LoadCdkey: string;
    function cdkeyLoginHeartbeat: Boolean;
  end;

var
  g_Authentication: TAuthentication;

const
  _STR_CDK_FILE = 'License.key';

implementation

uses Log, VMProtectSDK, Grobal, Main, GlobalVar;



{ TAuthentication }

constructor TAuthentication.Create;
begin
  m_appkey := '4812561F-D529-49E3-9C60-4A29A02996BD';
  m_token := '';
  m_cdkey := LoadCdkey;
end;

destructor TAuthentication.Destroy;
begin

  inherited;
end;

function GetCurTimeStamp(): Int64;
begin
  Result := DateTimeToUnix(Now) - 8 * 3600;
end;

// 生成GUID
function GetGUID: string;
var
  LTep: TGUID;
  sGUID: string;
begin
  CreateGUID(LTep);
  sGUID := GuidToString(LTep);
//  sGUID := StringReplace(sGUID, '-', '', [rfReplaceAll]);
//  sGUID := Copy(sGUID, 2, length(sGUID) - 2);
  Result := sGUID;
end;

//string转字节流
function StringToByteStream(const AString: string): TBytes;
begin
  Result := TEncoding.UTF8.GetBytes(AString);
end;

//string转HexByte
function StringToHexByteStream(const AHexString: string): TBytes;
var
  HexChars: string;
  I: Integer;
begin
  // 移除字符串中的空格或其他分隔符
  HexChars := StringReplace(AHexString, ' ', '', [rfReplaceAll]);

  // 确保十六进制字符数为偶数
  if Length(HexChars) mod 2 <> 0 then
    raise Exception.Create('输入的十六进制字符串无效');

  SetLength(Result, Length(HexChars) div 2);

  // 将每对十六进制字符转换为一个字节
  for I := 1 to Length(HexChars) div 2 do
    Result[I - 1] := StrToInt('$' + Copy(HexChars, (I - 1) * 2 + 1, 2));
end;

function CloneByteArray(const bytesArray: array of Byte): TBytes;
begin
  SetLength(Result, Length(bytesArray));
  if Length(bytesArray) > 0 then
    Move(bytesArray[0], Result[0], Length(bytesArray));
end;


//字节流转HexStr
function ByteStreamToHexStr(const bytesArray: array of Byte): string;
var
  bytes: TBytes;
  I: Integer;
begin
  Result := '';
  for I := 0 to High(bytesArray) do begin
    Result := Result + IntToHex(bytesArray[I],2);
  end;
//  bytes := CloneByteArray(bytesArray);
//  Result := TEncoding.Unicode.GetString(bytes);
//  SetLength(bytes,0);
end;

//字节流转string
function ByteStreamToString(const bytesArray: array of Byte): string;
begin
  Result := TEncoding.UTF8.GetString(bytesArray);
end;

//加密
function whole_up(data: string): string;
var
  ByteStream: TBytes;
  I: Integer;
  mCode: array of Byte;
const
  mKey: array[0..14] of Byte = (250,89,108,237,199,134,175,136,74,226,162,147,74,109,41);
begin
  Result := '';
  ByteStream := StringToByteStream(data);
  SetLength(mCode,Length(ByteStream));
  FillChar(mCode[0],Length(ByteStream),#0);
  for I := 0 to Length(ByteStream) - 1 do begin
    mCode[I] := Byte(ByteStream[I] - 121 xor mKey[I mod Length(mKey)]);
  end;
  Result := ByteStreamToHexStr(mCode);
  SetLength(mCode,0);
end;

//解密
function whole_down(data: string): string;
var
  ByteStream: TBytes;
  I: Integer;
  mCode: array of Byte;
const
  mKey: array[0..10] of Byte = (35,91,109,151,67,148,68,128,174,53,122);
begin
  Result := '';
  ByteStream := StringToHexByteStream(data);
  SetLength(mCode,Length(ByteStream));
  FillChar(mCode[0],Length(ByteStream),#0);
  for I := 0 to Length(ByteStream) - 1 do begin
    mCode[I] := Byte((ByteStream[I] xor mKey[I mod Length(mKey)]) - 158);
  end;
  Result := ByteStreamToString(mCode);
  SetLength(mCode,0);
end;

//验证初始化
function TAuthentication.SoftwareInit: Boolean;
var
  IdHTTP1: TIdHTTP;
  Params: TStringStream;
  json: TJSONObject;
  json2: TJSONObject;
  sText, nonce, data: string;
  status, appid: Integer;
  Md5Encode: TIdHashMessageDigest5;
  timestamp: Int64;
begin

end;

function TAuthentication.LoadCdkey: string;
var
  LoadList: TStringList;
  I: Integer;
  str_msg, sPath: string;
begin

end;

function GetHWID: string;
begin
  Result := GetWMIBaseBoard('SerialNumber');
end;

function TAuthentication.cdkeyLogin: Boolean;
var
  IdHTTP1: TIdHTTP;
  Params: TStringStream;
  json: TJSONObject;
  json2: TJSONObject;
  sText, msg, nonce, data, tally: string;
  status, appid: Integer;
  Md5Encode: TIdHashMessageDigest5;
  timestamp: Int64;
begin

end;

//心跳包
function TAuthentication.cdkeyLoginHeartbeat: Boolean;
var
  IdHTTP1: TIdHTTP;
  Params: TStringStream;
  json: TJSONObject;
  json2: TJSONObject;
  sText, nonce, data: string;
  status, appid: Integer;
  Md5Encode: TIdHashMessageDigest5;
  timestamp: Int64;
begin

end;

end.
